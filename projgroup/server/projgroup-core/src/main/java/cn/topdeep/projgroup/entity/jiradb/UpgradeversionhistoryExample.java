package cn.topdeep.projgroup.entity.jiradb;

import common.entity.Page;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class UpgradeversionhistoryExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    protected Page page;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public UpgradeversionhistoryExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public void setPage(Page page) {
        this.page=page;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public Page getPage() {
        return page;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andTargetbuildIsNull() {
            addCriterion("TARGETBUILD is null");
            return (Criteria) this;
        }

        public Criteria andTargetbuildIsNotNull() {
            addCriterion("TARGETBUILD is not null");
            return (Criteria) this;
        }

        public Criteria andTargetbuildEqualTo(String value) {
            addCriterion("TARGETBUILD =", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildNotEqualTo(String value) {
            addCriterion("TARGETBUILD <>", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildGreaterThan(String value) {
            addCriterion("TARGETBUILD >", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildGreaterThanOrEqualTo(String value) {
            addCriterion("TARGETBUILD >=", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildLessThan(String value) {
            addCriterion("TARGETBUILD <", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildLessThanOrEqualTo(String value) {
            addCriterion("TARGETBUILD <=", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildLike(String value) {
            addCriterion("TARGETBUILD like", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildNotLike(String value) {
            addCriterion("TARGETBUILD not like", value, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildIn(List<String> values) {
            addCriterion("TARGETBUILD in", values, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildNotIn(List<String> values) {
            addCriterion("TARGETBUILD not in", values, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildBetween(String value1, String value2) {
            addCriterion("TARGETBUILD between", value1, value2, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andTargetbuildNotBetween(String value1, String value2) {
            addCriterion("TARGETBUILD not between", value1, value2, "targetbuild");
            return (Criteria) this;
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andTimeperformedIsNull() {
            addCriterion("TIMEPERFORMED is null");
            return (Criteria) this;
        }

        public Criteria andTimeperformedIsNotNull() {
            addCriterion("TIMEPERFORMED is not null");
            return (Criteria) this;
        }

        public Criteria andTimeperformedEqualTo(Date value) {
            addCriterion("TIMEPERFORMED =", value, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedNotEqualTo(Date value) {
            addCriterion("TIMEPERFORMED <>", value, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedGreaterThan(Date value) {
            addCriterion("TIMEPERFORMED >", value, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedGreaterThanOrEqualTo(Date value) {
            addCriterion("TIMEPERFORMED >=", value, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedLessThan(Date value) {
            addCriterion("TIMEPERFORMED <", value, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedLessThanOrEqualTo(Date value) {
            addCriterion("TIMEPERFORMED <=", value, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedIn(List<Date> values) {
            addCriterion("TIMEPERFORMED in", values, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedNotIn(List<Date> values) {
            addCriterion("TIMEPERFORMED not in", values, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedBetween(Date value1, Date value2) {
            addCriterion("TIMEPERFORMED between", value1, value2, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTimeperformedNotBetween(Date value1, Date value2) {
            addCriterion("TIMEPERFORMED not between", value1, value2, "timeperformed");
            return (Criteria) this;
        }

        public Criteria andTargetversionIsNull() {
            addCriterion("TARGETVERSION is null");
            return (Criteria) this;
        }

        public Criteria andTargetversionIsNotNull() {
            addCriterion("TARGETVERSION is not null");
            return (Criteria) this;
        }

        public Criteria andTargetversionEqualTo(String value) {
            addCriterion("TARGETVERSION =", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionNotEqualTo(String value) {
            addCriterion("TARGETVERSION <>", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionGreaterThan(String value) {
            addCriterion("TARGETVERSION >", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionGreaterThanOrEqualTo(String value) {
            addCriterion("TARGETVERSION >=", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionLessThan(String value) {
            addCriterion("TARGETVERSION <", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionLessThanOrEqualTo(String value) {
            addCriterion("TARGETVERSION <=", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionLike(String value) {
            addCriterion("TARGETVERSION like", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionNotLike(String value) {
            addCriterion("TARGETVERSION not like", value, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionIn(List<String> values) {
            addCriterion("TARGETVERSION in", values, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionNotIn(List<String> values) {
            addCriterion("TARGETVERSION not in", values, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionBetween(String value1, String value2) {
            addCriterion("TARGETVERSION between", value1, value2, "targetversion");
            return (Criteria) this;
        }

        public Criteria andTargetversionNotBetween(String value1, String value2) {
            addCriterion("TARGETVERSION not between", value1, value2, "targetversion");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table upgradeversionhistory
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}