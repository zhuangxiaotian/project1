package cn.topdeep.projgroup.entity.jiradb;

import common.entity.Page;
import java.util.ArrayList;
import java.util.List;

public class AoD5e466CalendarYearExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    protected Page page;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public AoD5e466CalendarYearExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public void setPage(Page page) {
        this.page=page;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public Page getPage() {
        return page;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andCalendarIdIsNull() {
            addCriterion("CALENDAR_ID is null");
            return (Criteria) this;
        }

        public Criteria andCalendarIdIsNotNull() {
            addCriterion("CALENDAR_ID is not null");
            return (Criteria) this;
        }

        public Criteria andCalendarIdEqualTo(Integer value) {
            addCriterion("CALENDAR_ID =", value, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdNotEqualTo(Integer value) {
            addCriterion("CALENDAR_ID <>", value, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdGreaterThan(Integer value) {
            addCriterion("CALENDAR_ID >", value, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("CALENDAR_ID >=", value, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdLessThan(Integer value) {
            addCriterion("CALENDAR_ID <", value, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdLessThanOrEqualTo(Integer value) {
            addCriterion("CALENDAR_ID <=", value, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdIn(List<Integer> values) {
            addCriterion("CALENDAR_ID in", values, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdNotIn(List<Integer> values) {
            addCriterion("CALENDAR_ID not in", values, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdBetween(Integer value1, Integer value2) {
            addCriterion("CALENDAR_ID between", value1, value2, "calendarId");
            return (Criteria) this;
        }

        public Criteria andCalendarIdNotBetween(Integer value1, Integer value2) {
            addCriterion("CALENDAR_ID not between", value1, value2, "calendarId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdIsNull() {
            addCriterion("FESTIVE_YEAR_ID is null");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdIsNotNull() {
            addCriterion("FESTIVE_YEAR_ID is not null");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdEqualTo(Integer value) {
            addCriterion("FESTIVE_YEAR_ID =", value, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdNotEqualTo(Integer value) {
            addCriterion("FESTIVE_YEAR_ID <>", value, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdGreaterThan(Integer value) {
            addCriterion("FESTIVE_YEAR_ID >", value, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("FESTIVE_YEAR_ID >=", value, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdLessThan(Integer value) {
            addCriterion("FESTIVE_YEAR_ID <", value, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdLessThanOrEqualTo(Integer value) {
            addCriterion("FESTIVE_YEAR_ID <=", value, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdIn(List<Integer> values) {
            addCriterion("FESTIVE_YEAR_ID in", values, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdNotIn(List<Integer> values) {
            addCriterion("FESTIVE_YEAR_ID not in", values, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdBetween(Integer value1, Integer value2) {
            addCriterion("FESTIVE_YEAR_ID between", value1, value2, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andFestiveYearIdNotBetween(Integer value1, Integer value2) {
            addCriterion("FESTIVE_YEAR_ID not between", value1, value2, "festiveYearId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdIsNull() {
            addCriterion("WORKING_DAY_ID is null");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdIsNotNull() {
            addCriterion("WORKING_DAY_ID is not null");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdEqualTo(Integer value) {
            addCriterion("WORKING_DAY_ID =", value, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdNotEqualTo(Integer value) {
            addCriterion("WORKING_DAY_ID <>", value, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdGreaterThan(Integer value) {
            addCriterion("WORKING_DAY_ID >", value, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("WORKING_DAY_ID >=", value, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdLessThan(Integer value) {
            addCriterion("WORKING_DAY_ID <", value, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdLessThanOrEqualTo(Integer value) {
            addCriterion("WORKING_DAY_ID <=", value, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdIn(List<Integer> values) {
            addCriterion("WORKING_DAY_ID in", values, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdNotIn(List<Integer> values) {
            addCriterion("WORKING_DAY_ID not in", values, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdBetween(Integer value1, Integer value2) {
            addCriterion("WORKING_DAY_ID between", value1, value2, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andWorkingDayIdNotBetween(Integer value1, Integer value2) {
            addCriterion("WORKING_DAY_ID not between", value1, value2, "workingDayId");
            return (Criteria) this;
        }

        public Criteria andYearIsNull() {
            addCriterion("YEAR is null");
            return (Criteria) this;
        }

        public Criteria andYearIsNotNull() {
            addCriterion("YEAR is not null");
            return (Criteria) this;
        }

        public Criteria andYearEqualTo(Integer value) {
            addCriterion("YEAR =", value, "year");
            return (Criteria) this;
        }

        public Criteria andYearNotEqualTo(Integer value) {
            addCriterion("YEAR <>", value, "year");
            return (Criteria) this;
        }

        public Criteria andYearGreaterThan(Integer value) {
            addCriterion("YEAR >", value, "year");
            return (Criteria) this;
        }

        public Criteria andYearGreaterThanOrEqualTo(Integer value) {
            addCriterion("YEAR >=", value, "year");
            return (Criteria) this;
        }

        public Criteria andYearLessThan(Integer value) {
            addCriterion("YEAR <", value, "year");
            return (Criteria) this;
        }

        public Criteria andYearLessThanOrEqualTo(Integer value) {
            addCriterion("YEAR <=", value, "year");
            return (Criteria) this;
        }

        public Criteria andYearIn(List<Integer> values) {
            addCriterion("YEAR in", values, "year");
            return (Criteria) this;
        }

        public Criteria andYearNotIn(List<Integer> values) {
            addCriterion("YEAR not in", values, "year");
            return (Criteria) this;
        }

        public Criteria andYearBetween(Integer value1, Integer value2) {
            addCriterion("YEAR between", value1, value2, "year");
            return (Criteria) this;
        }

        public Criteria andYearNotBetween(Integer value1, Integer value2) {
            addCriterion("YEAR not between", value1, value2, "year");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table ao_d5e466_calendar_year
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}