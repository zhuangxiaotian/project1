package cn.topdeep.projgroup.entity.jiradb;
import java.util.*;
import common.util.*;
import java.sql.*;
import org.mybatis.spring.support.SqlSessionDaoSupport;
import common.cache2.*;
/**
 * 基本的商业应用层代码，可扩展
 */
public abstract class BaseBiz {
	
	public abstract BusinessLogicManage getDao();
	
	/**
	 * 插入一个对象Ao563aeeActivityEntity到数据库中
	 * <param name="ao563aeeActivityEntity">需要插入的新对象</param>
	 */
	public int ao563aeeActivityEntityInsert(Ao563aeeActivityEntity ao563aeeActivityEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityInsert(ao563aeeActivityEntity);
		if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
			this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActivityEntity.getActivityId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "插入", "ACTIVITY_ID", kvalue, ao563aeeActivityEntity, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeActivityEntity">从数据库中删除一个对象Ao563aeeActivityEntity</param>
	 * <param name="AActivityId"></param>
	 */
	public int ao563aeeActivityEntityDeleteByPrimaryKey(long AActivityId) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityDeleteByPrimaryKey(AActivityId);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AActivityId);
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "删除", "ACTIVITY_ID", kvalue, AActivityId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeActivityEntity">从数据库中删除一个对象Ao563aeeActivityEntity</param>
	 */
	public int ao563aeeActivityEntityDeleteByCondition(Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityDeleteByCondition(ao563aeeActivityEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeActivityEntityExampleConditionSql(ao563aeeActivityEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "条件删除", "conditionSql", kvalue, ao563aeeActivityEntityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao563aeeActivityEntity到数据库中
	 * <param name="ao563aeeActivityEntity">需要更新的Ao563aeeActivityEntity</param>
	 */
	public int ao563aeeActivityEntityUpdate(Ao563aeeActivityEntity ao563aeeActivityEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityUpdate(ao563aeeActivityEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActivityEntity.getActivityId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "更新", "ACTIVITY_ID", kvalue, ao563aeeActivityEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao563aeeActivityEntity到数据库中
	 * <param name="ao563aeeActivityEntity">需要更新的Ao563aeeActivityEntity</param>
	 */
	public int ao563aeeActivityEntityUpdateSelective(Ao563aeeActivityEntity ao563aeeActivityEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityUpdateSelective(ao563aeeActivityEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActivityEntity.getActivityId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "部分更新", "ACTIVITY_ID", kvalue, ao563aeeActivityEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Ao563aeeActivityEntity到数据库中
	 * <param name="ao563aeeActivityEntity">需要更新的Ao563aeeActivityEntity</param>
	 */
	public int ao563aeeActivityEntityUpdateWithBlobs(Ao563aeeActivityEntity ao563aeeActivityEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityUpdateWithBlobs(ao563aeeActivityEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActivityEntity.getActivityId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "更新含Blob", "ACTIVITY_ID", kvalue, ao563aeeActivityEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeActivityEntity到数据库中
	 * <param name="ao563aeeActivityEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeActivityEntity">需要更新的Ao563aeeActivityEntity</param>
	 */
	public int ao563aeeActivityEntityUpdateByCondition(Ao563aeeActivityEntity ao563aeeActivityEntity, Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityUpdateByCondition(ao563aeeActivityEntity, ao563aeeActivityEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeActivityEntityExampleConditionSql(ao563aeeActivityEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "条件更新", "conditionSql", kvalue, ao563aeeActivityEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeActivityEntity到数据库中
	 * <param name="ao563aeeActivityEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeActivityEntity">需要更新的Ao563aeeActivityEntity</param>
	 */
	public int ao563aeeActivityEntityUpdateSelectiveByCondition(Ao563aeeActivityEntity ao563aeeActivityEntity, Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeActivityEntityUpdateSelectiveByCondition(ao563aeeActivityEntity, ao563aeeActivityEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTIVITY_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeActivityEntityExampleConditionSql(ao563aeeActivityEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_ACTIVITY_ENTITY", "批量部分更新", "conditionSql", kvalue, ao563aeeActivityEntity, ret);
		return ret;
	}
	
	public String getAo563aeeActivityEntityExampleConditionSql(Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao563aeeActivityEntityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao563aeeActivityEntityExample.Criteria item = ao563aeeActivityEntityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao563aeeActivityEntityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao563aeeActivityEntity">从数据库中查询一个对象Ao563aeeActivityEntity</param>
	 * <param name="AActivityId"></param>
	 */
	public Ao563aeeActivityEntity ao563aeeActivityEntitySelectByPrimaryKey(long AActivityId) throws CacheException {
		if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
			String key = ("AO_563AEE_ACTIVITY_ENTITY_" 
						+ (("_BYUNIINDEX_" + AActivityId) 
						+ "_"));
			Ao563aeeActivityEntity obj = ((Ao563aeeActivityEntity)(this.getCache().get("AO_563AEE_ACTIVITY_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActivityEntitySelectByPrimaryKey(AActivityId);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTIVITY_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActivityEntitySelectByPrimaryKey(AActivityId);
		}
	}
	
	/**
	 * <param name="ao563aeeActivityEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao563aeeActivityEntity> ao563aeeActivityEntitySelectObjects(Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
			String key = ("AO_563AEE_ACTIVITY_ENTITY_" 
						+ ("queryObject_" + this.getAo563aeeActivityEntityExampleConditionSql(ao563aeeActivityEntityQueryCondition)));
			List<Ao563aeeActivityEntity> obj = ((List<Ao563aeeActivityEntity>)(this.getCache().get("AO_563AEE_ACTIVITY_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActivityEntitySelectObjects(ao563aeeActivityEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTIVITY_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActivityEntitySelectObjects(ao563aeeActivityEntityQueryCondition);
		}
	}
	
	/**
	 * <param name="ao563aeeActivityEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao563aeeActivityEntity> ao563aeeActivityEntitySelectObjectsWithBLOBs(Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
			String key = ("AO_563AEE_ACTIVITY_ENTITY_" 
						+ ("queryObject_" + this.getAo563aeeActivityEntityExampleConditionSql(ao563aeeActivityEntityQueryCondition)));
			List<Ao563aeeActivityEntity> obj = ((List<Ao563aeeActivityEntity>)(this.getCache().get("AO_563AEE_ACTIVITY_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActivityEntitySelectObjectsWithBLOBs(ao563aeeActivityEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTIVITY_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActivityEntitySelectObjectsWithBLOBs(ao563aeeActivityEntityQueryCondition);
		}
	}
	
	/**
	 * <param name="ao563aeeActivityEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao563aeeActivityEntityQuerySelectObjectsCount(Ao563aeeActivityEntityExample ao563aeeActivityEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_ACTIVITY_ENTITY")) {
			String key = ("AO_563AEE_ACTIVITY_ENTITY_" 
						+ ("queryCount_" + this.getAo563aeeActivityEntityExampleConditionSql(ao563aeeActivityEntityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_563AEE_ACTIVITY_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActivityEntityQuerySelectObjectsCount(ao563aeeActivityEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTIVITY_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActivityEntityQuerySelectObjectsCount(ao563aeeActivityEntityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Ao563aeeActorEntity到数据库中
	 * <param name="ao563aeeActorEntity">需要插入的新对象</param>
	 */
	public int ao563aeeActorEntityInsert(Ao563aeeActorEntity ao563aeeActorEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityInsert(ao563aeeActorEntity);
		if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
			this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActorEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "插入", "ID", kvalue, ao563aeeActorEntity, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeActorEntity">从数据库中删除一个对象Ao563aeeActorEntity</param>
	 * <param name="AId"></param>
	 */
	public int ao563aeeActorEntityDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeActorEntity">从数据库中删除一个对象Ao563aeeActorEntity</param>
	 */
	public int ao563aeeActorEntityDeleteByCondition(Ao563aeeActorEntityExample ao563aeeActorEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityDeleteByCondition(ao563aeeActorEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeActorEntityExampleConditionSql(ao563aeeActorEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "条件删除", "conditionSql", kvalue, ao563aeeActorEntityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao563aeeActorEntity到数据库中
	 * <param name="ao563aeeActorEntity">需要更新的Ao563aeeActorEntity</param>
	 */
	public int ao563aeeActorEntityUpdate(Ao563aeeActorEntity ao563aeeActorEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityUpdate(ao563aeeActorEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActorEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "更新", "ID", kvalue, ao563aeeActorEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao563aeeActorEntity到数据库中
	 * <param name="ao563aeeActorEntity">需要更新的Ao563aeeActorEntity</param>
	 */
	public int ao563aeeActorEntityUpdateSelective(Ao563aeeActorEntity ao563aeeActorEntity) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityUpdateSelective(ao563aeeActorEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeActorEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "部分更新", "ID", kvalue, ao563aeeActorEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeActorEntity到数据库中
	 * <param name="ao563aeeActorEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeActorEntity">需要更新的Ao563aeeActorEntity</param>
	 */
	public int ao563aeeActorEntityUpdateByCondition(Ao563aeeActorEntity ao563aeeActorEntity, Ao563aeeActorEntityExample ao563aeeActorEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityUpdateByCondition(ao563aeeActorEntity, ao563aeeActorEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeActorEntityExampleConditionSql(ao563aeeActorEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "条件更新", "conditionSql", kvalue, ao563aeeActorEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeActorEntity到数据库中
	 * <param name="ao563aeeActorEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeActorEntity">需要更新的Ao563aeeActorEntity</param>
	 */
	public int ao563aeeActorEntityUpdateSelectiveByCondition(Ao563aeeActorEntity ao563aeeActorEntity, Ao563aeeActorEntityExample ao563aeeActorEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeActorEntityUpdateSelectiveByCondition(ao563aeeActorEntity, ao563aeeActorEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
				this.getCache().clear("AO_563AEE_ACTOR_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeActorEntityExampleConditionSql(ao563aeeActorEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_ACTOR_ENTITY", "批量部分更新", "conditionSql", kvalue, ao563aeeActorEntity, ret);
		return ret;
	}
	
	public String getAo563aeeActorEntityExampleConditionSql(Ao563aeeActorEntityExample ao563aeeActorEntityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao563aeeActorEntityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao563aeeActorEntityExample.Criteria item = ao563aeeActorEntityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao563aeeActorEntityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao563aeeActorEntity">从数据库中查询一个对象Ao563aeeActorEntity</param>
	 * <param name="AId"></param>
	 */
	public Ao563aeeActorEntity ao563aeeActorEntitySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
			String key = ("AO_563AEE_ACTOR_ENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Ao563aeeActorEntity obj = ((Ao563aeeActorEntity)(this.getCache().get("AO_563AEE_ACTOR_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActorEntitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTOR_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActorEntitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="ao563aeeActorEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao563aeeActorEntity> ao563aeeActorEntitySelectObjects(Ao563aeeActorEntityExample ao563aeeActorEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
			String key = ("AO_563AEE_ACTOR_ENTITY_" 
						+ ("queryObject_" + this.getAo563aeeActorEntityExampleConditionSql(ao563aeeActorEntityQueryCondition)));
			List<Ao563aeeActorEntity> obj = ((List<Ao563aeeActorEntity>)(this.getCache().get("AO_563AEE_ACTOR_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActorEntitySelectObjects(ao563aeeActorEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTOR_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActorEntitySelectObjects(ao563aeeActorEntityQueryCondition);
		}
	}
	
	/**
	 * <param name="ao563aeeActorEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao563aeeActorEntityQuerySelectObjectsCount(Ao563aeeActorEntityExample ao563aeeActorEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_ACTOR_ENTITY")) {
			String key = ("AO_563AEE_ACTOR_ENTITY_" 
						+ ("queryCount_" + this.getAo563aeeActorEntityExampleConditionSql(ao563aeeActorEntityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_563AEE_ACTOR_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeActorEntityQuerySelectObjectsCount(ao563aeeActorEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_ACTOR_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeActorEntityQuerySelectObjectsCount(ao563aeeActorEntityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Ao563aeeMediaLinkEntity到数据库中
	 * <param name="ao563aeeMediaLinkEntity">需要插入的新对象</param>
	 */
	public int ao563aeeMediaLinkEntityInsert(Ao563aeeMediaLinkEntity ao563aeeMediaLinkEntity) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityInsert(ao563aeeMediaLinkEntity);
		if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
			this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeMediaLinkEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "插入", "ID", kvalue, ao563aeeMediaLinkEntity, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeMediaLinkEntity">从数据库中删除一个对象Ao563aeeMediaLinkEntity</param>
	 * <param name="AId"></param>
	 */
	public int ao563aeeMediaLinkEntityDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
				this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeMediaLinkEntity">从数据库中删除一个对象Ao563aeeMediaLinkEntity</param>
	 */
	public int ao563aeeMediaLinkEntityDeleteByCondition(Ao563aeeMediaLinkEntityExample ao563aeeMediaLinkEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityDeleteByCondition(ao563aeeMediaLinkEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
				this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeMediaLinkEntityExampleConditionSql(ao563aeeMediaLinkEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "条件删除", "conditionSql", kvalue, ao563aeeMediaLinkEntityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao563aeeMediaLinkEntity到数据库中
	 * <param name="ao563aeeMediaLinkEntity">需要更新的Ao563aeeMediaLinkEntity</param>
	 */
	public int ao563aeeMediaLinkEntityUpdate(Ao563aeeMediaLinkEntity ao563aeeMediaLinkEntity) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityUpdate(ao563aeeMediaLinkEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
				this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeMediaLinkEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "更新", "ID", kvalue, ao563aeeMediaLinkEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao563aeeMediaLinkEntity到数据库中
	 * <param name="ao563aeeMediaLinkEntity">需要更新的Ao563aeeMediaLinkEntity</param>
	 */
	public int ao563aeeMediaLinkEntityUpdateSelective(Ao563aeeMediaLinkEntity ao563aeeMediaLinkEntity) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityUpdateSelective(ao563aeeMediaLinkEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
				this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeMediaLinkEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "部分更新", "ID", kvalue, ao563aeeMediaLinkEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeMediaLinkEntity到数据库中
	 * <param name="ao563aeeMediaLinkEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeMediaLinkEntity">需要更新的Ao563aeeMediaLinkEntity</param>
	 */
	public int ao563aeeMediaLinkEntityUpdateByCondition(Ao563aeeMediaLinkEntity ao563aeeMediaLinkEntity, Ao563aeeMediaLinkEntityExample ao563aeeMediaLinkEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityUpdateByCondition(ao563aeeMediaLinkEntity, ao563aeeMediaLinkEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
				this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeMediaLinkEntityExampleConditionSql(ao563aeeMediaLinkEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "条件更新", "conditionSql", kvalue, ao563aeeMediaLinkEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeMediaLinkEntity到数据库中
	 * <param name="ao563aeeMediaLinkEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeMediaLinkEntity">需要更新的Ao563aeeMediaLinkEntity</param>
	 */
	public int ao563aeeMediaLinkEntityUpdateSelectiveByCondition(Ao563aeeMediaLinkEntity ao563aeeMediaLinkEntity, Ao563aeeMediaLinkEntityExample ao563aeeMediaLinkEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeMediaLinkEntityUpdateSelectiveByCondition(ao563aeeMediaLinkEntity, ao563aeeMediaLinkEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
				this.getCache().clear("AO_563AEE_MEDIA_LINK_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeMediaLinkEntityExampleConditionSql(ao563aeeMediaLinkEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_MEDIA_LINK_ENTITY", "批量部分更新", "conditionSql", kvalue, ao563aeeMediaLinkEntity, ret);
		return ret;
	}
	
	public String getAo563aeeMediaLinkEntityExampleConditionSql(Ao563aeeMediaLinkEntityExample ao563aeeMediaLinkEntityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao563aeeMediaLinkEntityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao563aeeMediaLinkEntityExample.Criteria item = ao563aeeMediaLinkEntityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao563aeeMediaLinkEntityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao563aeeMediaLinkEntity">从数据库中查询一个对象Ao563aeeMediaLinkEntity</param>
	 * <param name="AId"></param>
	 */
	public Ao563aeeMediaLinkEntity ao563aeeMediaLinkEntitySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
			String key = ("AO_563AEE_MEDIA_LINK_ENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Ao563aeeMediaLinkEntity obj = ((Ao563aeeMediaLinkEntity)(this.getCache().get("AO_563AEE_MEDIA_LINK_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeMediaLinkEntitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_MEDIA_LINK_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeMediaLinkEntitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="ao563aeeMediaLinkEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao563aeeMediaLinkEntity> ao563aeeMediaLinkEntitySelectObjects(Ao563aeeMediaLinkEntityExample ao563aeeMediaLinkEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
			String key = ("AO_563AEE_MEDIA_LINK_ENTITY_" 
						+ ("queryObject_" + this.getAo563aeeMediaLinkEntityExampleConditionSql(ao563aeeMediaLinkEntityQueryCondition)));
			List<Ao563aeeMediaLinkEntity> obj = ((List<Ao563aeeMediaLinkEntity>)(this.getCache().get("AO_563AEE_MEDIA_LINK_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeMediaLinkEntitySelectObjects(ao563aeeMediaLinkEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_MEDIA_LINK_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeMediaLinkEntitySelectObjects(ao563aeeMediaLinkEntityQueryCondition);
		}
	}
	
	/**
	 * <param name="ao563aeeMediaLinkEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao563aeeMediaLinkEntityQuerySelectObjectsCount(Ao563aeeMediaLinkEntityExample ao563aeeMediaLinkEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_MEDIA_LINK_ENTITY")) {
			String key = ("AO_563AEE_MEDIA_LINK_ENTITY_" 
						+ ("queryCount_" + this.getAo563aeeMediaLinkEntityExampleConditionSql(ao563aeeMediaLinkEntityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_563AEE_MEDIA_LINK_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeMediaLinkEntityQuerySelectObjectsCount(ao563aeeMediaLinkEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_MEDIA_LINK_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeMediaLinkEntityQuerySelectObjectsCount(ao563aeeMediaLinkEntityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Ao563aeeObjectEntity到数据库中
	 * <param name="ao563aeeObjectEntity">需要插入的新对象</param>
	 */
	public int ao563aeeObjectEntityInsert(Ao563aeeObjectEntity ao563aeeObjectEntity) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityInsert(ao563aeeObjectEntity);
		if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
			this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeObjectEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "插入", "ID", kvalue, ao563aeeObjectEntity, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeObjectEntity">从数据库中删除一个对象Ao563aeeObjectEntity</param>
	 * <param name="AId"></param>
	 */
	public int ao563aeeObjectEntityDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
				this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeObjectEntity">从数据库中删除一个对象Ao563aeeObjectEntity</param>
	 */
	public int ao563aeeObjectEntityDeleteByCondition(Ao563aeeObjectEntityExample ao563aeeObjectEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityDeleteByCondition(ao563aeeObjectEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
				this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeObjectEntityExampleConditionSql(ao563aeeObjectEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "条件删除", "conditionSql", kvalue, ao563aeeObjectEntityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao563aeeObjectEntity到数据库中
	 * <param name="ao563aeeObjectEntity">需要更新的Ao563aeeObjectEntity</param>
	 */
	public int ao563aeeObjectEntityUpdate(Ao563aeeObjectEntity ao563aeeObjectEntity) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityUpdate(ao563aeeObjectEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
				this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeObjectEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "更新", "ID", kvalue, ao563aeeObjectEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao563aeeObjectEntity到数据库中
	 * <param name="ao563aeeObjectEntity">需要更新的Ao563aeeObjectEntity</param>
	 */
	public int ao563aeeObjectEntityUpdateSelective(Ao563aeeObjectEntity ao563aeeObjectEntity) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityUpdateSelective(ao563aeeObjectEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
				this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeObjectEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "部分更新", "ID", kvalue, ao563aeeObjectEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeObjectEntity到数据库中
	 * <param name="ao563aeeObjectEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeObjectEntity">需要更新的Ao563aeeObjectEntity</param>
	 */
	public int ao563aeeObjectEntityUpdateByCondition(Ao563aeeObjectEntity ao563aeeObjectEntity, Ao563aeeObjectEntityExample ao563aeeObjectEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityUpdateByCondition(ao563aeeObjectEntity, ao563aeeObjectEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
				this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeObjectEntityExampleConditionSql(ao563aeeObjectEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "条件更新", "conditionSql", kvalue, ao563aeeObjectEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeObjectEntity到数据库中
	 * <param name="ao563aeeObjectEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeObjectEntity">需要更新的Ao563aeeObjectEntity</param>
	 */
	public int ao563aeeObjectEntityUpdateSelectiveByCondition(Ao563aeeObjectEntity ao563aeeObjectEntity, Ao563aeeObjectEntityExample ao563aeeObjectEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeObjectEntityUpdateSelectiveByCondition(ao563aeeObjectEntity, ao563aeeObjectEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
				this.getCache().clear("AO_563AEE_OBJECT_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeObjectEntityExampleConditionSql(ao563aeeObjectEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_OBJECT_ENTITY", "批量部分更新", "conditionSql", kvalue, ao563aeeObjectEntity, ret);
		return ret;
	}
	
	public String getAo563aeeObjectEntityExampleConditionSql(Ao563aeeObjectEntityExample ao563aeeObjectEntityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao563aeeObjectEntityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao563aeeObjectEntityExample.Criteria item = ao563aeeObjectEntityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao563aeeObjectEntityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao563aeeObjectEntity">从数据库中查询一个对象Ao563aeeObjectEntity</param>
	 * <param name="AId"></param>
	 */
	public Ao563aeeObjectEntity ao563aeeObjectEntitySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
			String key = ("AO_563AEE_OBJECT_ENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Ao563aeeObjectEntity obj = ((Ao563aeeObjectEntity)(this.getCache().get("AO_563AEE_OBJECT_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeObjectEntitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_OBJECT_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeObjectEntitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="ao563aeeObjectEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao563aeeObjectEntity> ao563aeeObjectEntitySelectObjects(Ao563aeeObjectEntityExample ao563aeeObjectEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
			String key = ("AO_563AEE_OBJECT_ENTITY_" 
						+ ("queryObject_" + this.getAo563aeeObjectEntityExampleConditionSql(ao563aeeObjectEntityQueryCondition)));
			List<Ao563aeeObjectEntity> obj = ((List<Ao563aeeObjectEntity>)(this.getCache().get("AO_563AEE_OBJECT_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeObjectEntitySelectObjects(ao563aeeObjectEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_OBJECT_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeObjectEntitySelectObjects(ao563aeeObjectEntityQueryCondition);
		}
	}
	
	/**
	 * <param name="ao563aeeObjectEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao563aeeObjectEntityQuerySelectObjectsCount(Ao563aeeObjectEntityExample ao563aeeObjectEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_OBJECT_ENTITY")) {
			String key = ("AO_563AEE_OBJECT_ENTITY_" 
						+ ("queryCount_" + this.getAo563aeeObjectEntityExampleConditionSql(ao563aeeObjectEntityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_563AEE_OBJECT_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeObjectEntityQuerySelectObjectsCount(ao563aeeObjectEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_OBJECT_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeObjectEntityQuerySelectObjectsCount(ao563aeeObjectEntityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Ao563aeeTargetEntity到数据库中
	 * <param name="ao563aeeTargetEntity">需要插入的新对象</param>
	 */
	public int ao563aeeTargetEntityInsert(Ao563aeeTargetEntity ao563aeeTargetEntity) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityInsert(ao563aeeTargetEntity);
		if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
			this.getCache().clear("AO_563AEE_TARGET_ENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeTargetEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "插入", "ID", kvalue, ao563aeeTargetEntity, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeTargetEntity">从数据库中删除一个对象Ao563aeeTargetEntity</param>
	 * <param name="AId"></param>
	 */
	public int ao563aeeTargetEntityDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
				this.getCache().clear("AO_563AEE_TARGET_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao563aeeTargetEntity">从数据库中删除一个对象Ao563aeeTargetEntity</param>
	 */
	public int ao563aeeTargetEntityDeleteByCondition(Ao563aeeTargetEntityExample ao563aeeTargetEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityDeleteByCondition(ao563aeeTargetEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
				this.getCache().clear("AO_563AEE_TARGET_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeTargetEntityExampleConditionSql(ao563aeeTargetEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "条件删除", "conditionSql", kvalue, ao563aeeTargetEntityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao563aeeTargetEntity到数据库中
	 * <param name="ao563aeeTargetEntity">需要更新的Ao563aeeTargetEntity</param>
	 */
	public int ao563aeeTargetEntityUpdate(Ao563aeeTargetEntity ao563aeeTargetEntity) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityUpdate(ao563aeeTargetEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
				this.getCache().clear("AO_563AEE_TARGET_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeTargetEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "更新", "ID", kvalue, ao563aeeTargetEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao563aeeTargetEntity到数据库中
	 * <param name="ao563aeeTargetEntity">需要更新的Ao563aeeTargetEntity</param>
	 */
	public int ao563aeeTargetEntityUpdateSelective(Ao563aeeTargetEntity ao563aeeTargetEntity) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityUpdateSelective(ao563aeeTargetEntity);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
				this.getCache().clear("AO_563AEE_TARGET_ENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao563aeeTargetEntity.getId());
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "部分更新", "ID", kvalue, ao563aeeTargetEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeTargetEntity到数据库中
	 * <param name="ao563aeeTargetEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeTargetEntity">需要更新的Ao563aeeTargetEntity</param>
	 */
	public int ao563aeeTargetEntityUpdateByCondition(Ao563aeeTargetEntity ao563aeeTargetEntity, Ao563aeeTargetEntityExample ao563aeeTargetEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityUpdateByCondition(ao563aeeTargetEntity, ao563aeeTargetEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
				this.getCache().clear("AO_563AEE_TARGET_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeTargetEntityExampleConditionSql(ao563aeeTargetEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "条件更新", "conditionSql", kvalue, ao563aeeTargetEntity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao563aeeTargetEntity到数据库中
	 * <param name="ao563aeeTargetEntityQueryCondition">附加的条件</param>
	 * <param name="ao563aeeTargetEntity">需要更新的Ao563aeeTargetEntity</param>
	 */
	public int ao563aeeTargetEntityUpdateSelectiveByCondition(Ao563aeeTargetEntity ao563aeeTargetEntity, Ao563aeeTargetEntityExample ao563aeeTargetEntityQueryCondition) throws CacheException {
		int ret = this.getDao().ao563aeeTargetEntityUpdateSelectiveByCondition(ao563aeeTargetEntity, ao563aeeTargetEntityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
				this.getCache().clear("AO_563AEE_TARGET_ENTITY");
			}
		}
		String kvalue = this.getAo563aeeTargetEntityExampleConditionSql(ao563aeeTargetEntityQueryCondition);
		this.operatesLogSimpleAdd("AO_563AEE_TARGET_ENTITY", "批量部分更新", "conditionSql", kvalue, ao563aeeTargetEntity, ret);
		return ret;
	}
	
	public String getAo563aeeTargetEntityExampleConditionSql(Ao563aeeTargetEntityExample ao563aeeTargetEntityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao563aeeTargetEntityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao563aeeTargetEntityExample.Criteria item = ao563aeeTargetEntityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao563aeeTargetEntityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao563aeeTargetEntity">从数据库中查询一个对象Ao563aeeTargetEntity</param>
	 * <param name="AId"></param>
	 */
	public Ao563aeeTargetEntity ao563aeeTargetEntitySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
			String key = ("AO_563AEE_TARGET_ENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Ao563aeeTargetEntity obj = ((Ao563aeeTargetEntity)(this.getCache().get("AO_563AEE_TARGET_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeTargetEntitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_TARGET_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeTargetEntitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="ao563aeeTargetEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao563aeeTargetEntity> ao563aeeTargetEntitySelectObjects(Ao563aeeTargetEntityExample ao563aeeTargetEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
			String key = ("AO_563AEE_TARGET_ENTITY_" 
						+ ("queryObject_" + this.getAo563aeeTargetEntityExampleConditionSql(ao563aeeTargetEntityQueryCondition)));
			List<Ao563aeeTargetEntity> obj = ((List<Ao563aeeTargetEntity>)(this.getCache().get("AO_563AEE_TARGET_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeTargetEntitySelectObjects(ao563aeeTargetEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_TARGET_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeTargetEntitySelectObjects(ao563aeeTargetEntityQueryCondition);
		}
	}
	
	/**
	 * <param name="ao563aeeTargetEntityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao563aeeTargetEntityQuerySelectObjectsCount(Ao563aeeTargetEntityExample ao563aeeTargetEntityQueryCondition) throws CacheException {
		if (this.needCache("AO_563AEE_TARGET_ENTITY")) {
			String key = ("AO_563AEE_TARGET_ENTITY_" 
						+ ("queryCount_" + this.getAo563aeeTargetEntityExampleConditionSql(ao563aeeTargetEntityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_563AEE_TARGET_ENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().ao563aeeTargetEntityQuerySelectObjectsCount(ao563aeeTargetEntityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_563AEE_TARGET_ENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao563aeeTargetEntityQuerySelectObjectsCount(ao563aeeTargetEntityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Ao854ed6Configuration到数据库中
	 * <param name="ao854ed6Configuration">需要插入的新对象</param>
	 */
	public int ao854ed6ConfigurationInsert(Ao854ed6Configuration ao854ed6Configuration) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationInsert(ao854ed6Configuration);
		if (this.needCache("AO_854ED6_CONFIGURATION")) {
			this.getCache().clear("AO_854ED6_CONFIGURATION");
		}
		String kvalue = "";
		kvalue = (kvalue + ao854ed6Configuration.getId());
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "插入", "ID", kvalue, ao854ed6Configuration, ret);
		return ret;
	}
	
	/**
	 * <param name="ao854ed6Configuration">从数据库中删除一个对象Ao854ed6Configuration</param>
	 * <param name="AId"></param>
	 */
	public int ao854ed6ConfigurationDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_CONFIGURATION")) {
				this.getCache().clear("AO_854ED6_CONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao854ed6Configuration">从数据库中删除一个对象Ao854ed6Configuration</param>
	 */
	public int ao854ed6ConfigurationDeleteByCondition(Ao854ed6ConfigurationExample ao854ed6ConfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationDeleteByCondition(ao854ed6ConfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_CONFIGURATION")) {
				this.getCache().clear("AO_854ED6_CONFIGURATION");
			}
		}
		String kvalue = this.getAo854ed6ConfigurationExampleConditionSql(ao854ed6ConfigurationQueryCondition);
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "条件删除", "conditionSql", kvalue, ao854ed6ConfigurationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao854ed6Configuration到数据库中
	 * <param name="ao854ed6Configuration">需要更新的Ao854ed6Configuration</param>
	 */
	public int ao854ed6ConfigurationUpdate(Ao854ed6Configuration ao854ed6Configuration) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationUpdate(ao854ed6Configuration);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_CONFIGURATION")) {
				this.getCache().clear("AO_854ED6_CONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao854ed6Configuration.getId());
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "更新", "ID", kvalue, ao854ed6Configuration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao854ed6Configuration到数据库中
	 * <param name="ao854ed6Configuration">需要更新的Ao854ed6Configuration</param>
	 */
	public int ao854ed6ConfigurationUpdateSelective(Ao854ed6Configuration ao854ed6Configuration) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationUpdateSelective(ao854ed6Configuration);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_CONFIGURATION")) {
				this.getCache().clear("AO_854ED6_CONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao854ed6Configuration.getId());
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "部分更新", "ID", kvalue, ao854ed6Configuration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao854ed6Configuration到数据库中
	 * <param name="ao854ed6ConfigurationQueryCondition">附加的条件</param>
	 * <param name="ao854ed6Configuration">需要更新的Ao854ed6Configuration</param>
	 */
	public int ao854ed6ConfigurationUpdateByCondition(Ao854ed6Configuration ao854ed6Configuration, Ao854ed6ConfigurationExample ao854ed6ConfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationUpdateByCondition(ao854ed6Configuration, ao854ed6ConfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_CONFIGURATION")) {
				this.getCache().clear("AO_854ED6_CONFIGURATION");
			}
		}
		String kvalue = this.getAo854ed6ConfigurationExampleConditionSql(ao854ed6ConfigurationQueryCondition);
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "条件更新", "conditionSql", kvalue, ao854ed6Configuration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao854ed6Configuration到数据库中
	 * <param name="ao854ed6ConfigurationQueryCondition">附加的条件</param>
	 * <param name="ao854ed6Configuration">需要更新的Ao854ed6Configuration</param>
	 */
	public int ao854ed6ConfigurationUpdateSelectiveByCondition(Ao854ed6Configuration ao854ed6Configuration, Ao854ed6ConfigurationExample ao854ed6ConfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().ao854ed6ConfigurationUpdateSelectiveByCondition(ao854ed6Configuration, ao854ed6ConfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_CONFIGURATION")) {
				this.getCache().clear("AO_854ED6_CONFIGURATION");
			}
		}
		String kvalue = this.getAo854ed6ConfigurationExampleConditionSql(ao854ed6ConfigurationQueryCondition);
		this.operatesLogSimpleAdd("AO_854ED6_CONFIGURATION", "批量部分更新", "conditionSql", kvalue, ao854ed6Configuration, ret);
		return ret;
	}
	
	public String getAo854ed6ConfigurationExampleConditionSql(Ao854ed6ConfigurationExample ao854ed6ConfigurationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao854ed6ConfigurationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao854ed6ConfigurationExample.Criteria item = ao854ed6ConfigurationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao854ed6ConfigurationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao854ed6Configuration">从数据库中查询一个对象Ao854ed6Configuration</param>
	 * <param name="AId"></param>
	 */
	public Ao854ed6Configuration ao854ed6ConfigurationSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_854ED6_CONFIGURATION")) {
			String key = ("AO_854ED6_CONFIGURATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Ao854ed6Configuration obj = ((Ao854ed6Configuration)(this.getCache().get("AO_854ED6_CONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().ao854ed6ConfigurationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_854ED6_CONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao854ed6ConfigurationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="ao854ed6ConfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao854ed6Configuration> ao854ed6ConfigurationSelectObjects(Ao854ed6ConfigurationExample ao854ed6ConfigurationQueryCondition) throws CacheException {
		if (this.needCache("AO_854ED6_CONFIGURATION")) {
			String key = ("AO_854ED6_CONFIGURATION_" 
						+ ("queryObject_" + this.getAo854ed6ConfigurationExampleConditionSql(ao854ed6ConfigurationQueryCondition)));
			List<Ao854ed6Configuration> obj = ((List<Ao854ed6Configuration>)(this.getCache().get("AO_854ED6_CONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().ao854ed6ConfigurationSelectObjects(ao854ed6ConfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_854ED6_CONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao854ed6ConfigurationSelectObjects(ao854ed6ConfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="ao854ed6ConfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao854ed6ConfigurationQuerySelectObjectsCount(Ao854ed6ConfigurationExample ao854ed6ConfigurationQueryCondition) throws CacheException {
		if (this.needCache("AO_854ED6_CONFIGURATION")) {
			String key = ("AO_854ED6_CONFIGURATION_" 
						+ ("queryCount_" + this.getAo854ed6ConfigurationExampleConditionSql(ao854ed6ConfigurationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_854ED6_CONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().ao854ed6ConfigurationQuerySelectObjectsCount(ao854ed6ConfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_854ED6_CONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao854ed6ConfigurationQuerySelectObjectsCount(ao854ed6ConfigurationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Ao854ed6StartDate到数据库中
	 * <param name="ao854ed6StartDate">需要插入的新对象</param>
	 */
	public int ao854ed6StartDateInsert(Ao854ed6StartDate ao854ed6StartDate) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateInsert(ao854ed6StartDate);
		if (this.needCache("AO_854ED6_START_DATE")) {
			this.getCache().clear("AO_854ED6_START_DATE");
		}
		String kvalue = "";
		kvalue = (kvalue + ao854ed6StartDate.getId());
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "插入", "ID", kvalue, ao854ed6StartDate, ret);
		return ret;
	}
	
	/**
	 * <param name="ao854ed6StartDate">从数据库中删除一个对象Ao854ed6StartDate</param>
	 * <param name="AId"></param>
	 */
	public int ao854ed6StartDateDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_START_DATE")) {
				this.getCache().clear("AO_854ED6_START_DATE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="ao854ed6StartDate">从数据库中删除一个对象Ao854ed6StartDate</param>
	 */
	public int ao854ed6StartDateDeleteByCondition(Ao854ed6StartDateExample ao854ed6StartDateQueryCondition) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateDeleteByCondition(ao854ed6StartDateQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_START_DATE")) {
				this.getCache().clear("AO_854ED6_START_DATE");
			}
		}
		String kvalue = this.getAo854ed6StartDateExampleConditionSql(ao854ed6StartDateQueryCondition);
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "条件删除", "conditionSql", kvalue, ao854ed6StartDateQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Ao854ed6StartDate到数据库中
	 * <param name="ao854ed6StartDate">需要更新的Ao854ed6StartDate</param>
	 */
	public int ao854ed6StartDateUpdate(Ao854ed6StartDate ao854ed6StartDate) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateUpdate(ao854ed6StartDate);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_START_DATE")) {
				this.getCache().clear("AO_854ED6_START_DATE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao854ed6StartDate.getId());
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "更新", "ID", kvalue, ao854ed6StartDate, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Ao854ed6StartDate到数据库中
	 * <param name="ao854ed6StartDate">需要更新的Ao854ed6StartDate</param>
	 */
	public int ao854ed6StartDateUpdateSelective(Ao854ed6StartDate ao854ed6StartDate) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateUpdateSelective(ao854ed6StartDate);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_START_DATE")) {
				this.getCache().clear("AO_854ED6_START_DATE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ao854ed6StartDate.getId());
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "部分更新", "ID", kvalue, ao854ed6StartDate, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao854ed6StartDate到数据库中
	 * <param name="ao854ed6StartDateQueryCondition">附加的条件</param>
	 * <param name="ao854ed6StartDate">需要更新的Ao854ed6StartDate</param>
	 */
	public int ao854ed6StartDateUpdateByCondition(Ao854ed6StartDate ao854ed6StartDate, Ao854ed6StartDateExample ao854ed6StartDateQueryCondition) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateUpdateByCondition(ao854ed6StartDate, ao854ed6StartDateQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_START_DATE")) {
				this.getCache().clear("AO_854ED6_START_DATE");
			}
		}
		String kvalue = this.getAo854ed6StartDateExampleConditionSql(ao854ed6StartDateQueryCondition);
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "条件更新", "conditionSql", kvalue, ao854ed6StartDate, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Ao854ed6StartDate到数据库中
	 * <param name="ao854ed6StartDateQueryCondition">附加的条件</param>
	 * <param name="ao854ed6StartDate">需要更新的Ao854ed6StartDate</param>
	 */
	public int ao854ed6StartDateUpdateSelectiveByCondition(Ao854ed6StartDate ao854ed6StartDate, Ao854ed6StartDateExample ao854ed6StartDateQueryCondition) throws CacheException {
		int ret = this.getDao().ao854ed6StartDateUpdateSelectiveByCondition(ao854ed6StartDate, ao854ed6StartDateQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_854ED6_START_DATE")) {
				this.getCache().clear("AO_854ED6_START_DATE");
			}
		}
		String kvalue = this.getAo854ed6StartDateExampleConditionSql(ao854ed6StartDateQueryCondition);
		this.operatesLogSimpleAdd("AO_854ED6_START_DATE", "批量部分更新", "conditionSql", kvalue, ao854ed6StartDate, ret);
		return ret;
	}
	
	public String getAo854ed6StartDateExampleConditionSql(Ao854ed6StartDateExample ao854ed6StartDateQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < ao854ed6StartDateQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			Ao854ed6StartDateExample.Criteria item = ao854ed6StartDateQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					Ao854ed6StartDateExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="ao854ed6StartDate">从数据库中查询一个对象Ao854ed6StartDate</param>
	 * <param name="AId"></param>
	 */
	public Ao854ed6StartDate ao854ed6StartDateSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_854ED6_START_DATE")) {
			String key = ("AO_854ED6_START_DATE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Ao854ed6StartDate obj = ((Ao854ed6StartDate)(this.getCache().get("AO_854ED6_START_DATE", key)));
			if ((obj == null)) {
				obj = this.getDao().ao854ed6StartDateSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_854ED6_START_DATE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao854ed6StartDateSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="ao854ed6StartDateQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Ao854ed6StartDate> ao854ed6StartDateSelectObjects(Ao854ed6StartDateExample ao854ed6StartDateQueryCondition) throws CacheException {
		if (this.needCache("AO_854ED6_START_DATE")) {
			String key = ("AO_854ED6_START_DATE_" 
						+ ("queryObject_" + this.getAo854ed6StartDateExampleConditionSql(ao854ed6StartDateQueryCondition)));
			List<Ao854ed6StartDate> obj = ((List<Ao854ed6StartDate>)(this.getCache().get("AO_854ED6_START_DATE", key)));
			if ((obj == null)) {
				obj = this.getDao().ao854ed6StartDateSelectObjects(ao854ed6StartDateQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_854ED6_START_DATE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao854ed6StartDateSelectObjects(ao854ed6StartDateQueryCondition);
		}
	}
	
	/**
	 * <param name="ao854ed6StartDateQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int ao854ed6StartDateQuerySelectObjectsCount(Ao854ed6StartDateExample ao854ed6StartDateQueryCondition) throws CacheException {
		if (this.needCache("AO_854ED6_START_DATE")) {
			String key = ("AO_854ED6_START_DATE_" 
						+ ("queryCount_" + this.getAo854ed6StartDateExampleConditionSql(ao854ed6StartDateQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_854ED6_START_DATE", key)));
			if ((obj == null)) {
				obj = this.getDao().ao854ed6StartDateQuerySelectObjectsCount(ao854ed6StartDateQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_854ED6_START_DATE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().ao854ed6StartDateQuerySelectObjectsCount(ao854ed6StartDateQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466Calendar到数据库中
	 * <param name="aoD5e466Calendar">需要插入的新对象</param>
	 */
	public int aoD5e466CalendarInsert(AoD5e466Calendar aoD5e466Calendar) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarInsert(aoD5e466Calendar);
		if (this.needCache("AO_D5E466_CALENDAR")) {
			this.getCache().clear("AO_D5E466_CALENDAR");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Calendar.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "插入", "ID", kvalue, aoD5e466Calendar, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Calendar">从数据库中删除一个对象AoD5e466Calendar</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466CalendarDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Calendar">从数据库中删除一个对象AoD5e466Calendar</param>
	 */
	public int aoD5e466CalendarDeleteByCondition(AoD5e466CalendarExample aoD5e466CalendarQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarDeleteByCondition(aoD5e466CalendarQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR");
			}
		}
		String kvalue = this.getAoD5e466CalendarExampleConditionSql(aoD5e466CalendarQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "条件删除", "conditionSql", kvalue, aoD5e466CalendarQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466Calendar到数据库中
	 * <param name="aoD5e466Calendar">需要更新的AoD5e466Calendar</param>
	 */
	public int aoD5e466CalendarUpdate(AoD5e466Calendar aoD5e466Calendar) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarUpdate(aoD5e466Calendar);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Calendar.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "更新", "ID", kvalue, aoD5e466Calendar, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466Calendar到数据库中
	 * <param name="aoD5e466Calendar">需要更新的AoD5e466Calendar</param>
	 */
	public int aoD5e466CalendarUpdateSelective(AoD5e466Calendar aoD5e466Calendar) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarUpdateSelective(aoD5e466Calendar);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Calendar.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "部分更新", "ID", kvalue, aoD5e466Calendar, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Calendar到数据库中
	 * <param name="aoD5e466CalendarQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Calendar">需要更新的AoD5e466Calendar</param>
	 */
	public int aoD5e466CalendarUpdateByCondition(AoD5e466Calendar aoD5e466Calendar, AoD5e466CalendarExample aoD5e466CalendarQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarUpdateByCondition(aoD5e466Calendar, aoD5e466CalendarQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR");
			}
		}
		String kvalue = this.getAoD5e466CalendarExampleConditionSql(aoD5e466CalendarQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "条件更新", "conditionSql", kvalue, aoD5e466Calendar, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Calendar到数据库中
	 * <param name="aoD5e466CalendarQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Calendar">需要更新的AoD5e466Calendar</param>
	 */
	public int aoD5e466CalendarUpdateSelectiveByCondition(AoD5e466Calendar aoD5e466Calendar, AoD5e466CalendarExample aoD5e466CalendarQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarUpdateSelectiveByCondition(aoD5e466Calendar, aoD5e466CalendarQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR");
			}
		}
		String kvalue = this.getAoD5e466CalendarExampleConditionSql(aoD5e466CalendarQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR", "批量部分更新", "conditionSql", kvalue, aoD5e466Calendar, ret);
		return ret;
	}
	
	public String getAoD5e466CalendarExampleConditionSql(AoD5e466CalendarExample aoD5e466CalendarQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466CalendarQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466CalendarExample.Criteria item = aoD5e466CalendarQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466CalendarExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466Calendar">从数据库中查询一个对象AoD5e466Calendar</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466Calendar aoD5e466CalendarSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_CALENDAR")) {
			String key = ("AO_D5E466_CALENDAR_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466Calendar obj = ((AoD5e466Calendar)(this.getCache().get("AO_D5E466_CALENDAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466CalendarSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CALENDAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466CalendarSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466CalendarQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466Calendar> aoD5e466CalendarSelectObjects(AoD5e466CalendarExample aoD5e466CalendarQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_CALENDAR")) {
			String key = ("AO_D5E466_CALENDAR_" 
						+ ("queryObject_" + this.getAoD5e466CalendarExampleConditionSql(aoD5e466CalendarQueryCondition)));
			List<AoD5e466Calendar> obj = ((List<AoD5e466Calendar>)(this.getCache().get("AO_D5E466_CALENDAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466CalendarSelectObjects(aoD5e466CalendarQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CALENDAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466CalendarSelectObjects(aoD5e466CalendarQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466CalendarQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466CalendarQuerySelectObjectsCount(AoD5e466CalendarExample aoD5e466CalendarQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_CALENDAR")) {
			String key = ("AO_D5E466_CALENDAR_" 
						+ ("queryCount_" + this.getAoD5e466CalendarExampleConditionSql(aoD5e466CalendarQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_CALENDAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466CalendarQuerySelectObjectsCount(aoD5e466CalendarQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CALENDAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466CalendarQuerySelectObjectsCount(aoD5e466CalendarQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466CalendarYear到数据库中
	 * <param name="aoD5e466CalendarYear">需要插入的新对象</param>
	 */
	public int aoD5e466CalendarYearInsert(AoD5e466CalendarYear aoD5e466CalendarYear) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearInsert(aoD5e466CalendarYear);
		if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
			this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466CalendarYear.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "插入", "ID", kvalue, aoD5e466CalendarYear, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466CalendarYear">从数据库中删除一个对象AoD5e466CalendarYear</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466CalendarYearDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466CalendarYear">从数据库中删除一个对象AoD5e466CalendarYear</param>
	 */
	public int aoD5e466CalendarYearDeleteByCondition(AoD5e466CalendarYearExample aoD5e466CalendarYearQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearDeleteByCondition(aoD5e466CalendarYearQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
			}
		}
		String kvalue = this.getAoD5e466CalendarYearExampleConditionSql(aoD5e466CalendarYearQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "条件删除", "conditionSql", kvalue, aoD5e466CalendarYearQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466CalendarYear到数据库中
	 * <param name="aoD5e466CalendarYear">需要更新的AoD5e466CalendarYear</param>
	 */
	public int aoD5e466CalendarYearUpdate(AoD5e466CalendarYear aoD5e466CalendarYear) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearUpdate(aoD5e466CalendarYear);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466CalendarYear.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "更新", "ID", kvalue, aoD5e466CalendarYear, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466CalendarYear到数据库中
	 * <param name="aoD5e466CalendarYear">需要更新的AoD5e466CalendarYear</param>
	 */
	public int aoD5e466CalendarYearUpdateSelective(AoD5e466CalendarYear aoD5e466CalendarYear) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearUpdateSelective(aoD5e466CalendarYear);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466CalendarYear.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "部分更新", "ID", kvalue, aoD5e466CalendarYear, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466CalendarYear到数据库中
	 * <param name="aoD5e466CalendarYearQueryCondition">附加的条件</param>
	 * <param name="aoD5e466CalendarYear">需要更新的AoD5e466CalendarYear</param>
	 */
	public int aoD5e466CalendarYearUpdateByCondition(AoD5e466CalendarYear aoD5e466CalendarYear, AoD5e466CalendarYearExample aoD5e466CalendarYearQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearUpdateByCondition(aoD5e466CalendarYear, aoD5e466CalendarYearQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
			}
		}
		String kvalue = this.getAoD5e466CalendarYearExampleConditionSql(aoD5e466CalendarYearQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "条件更新", "conditionSql", kvalue, aoD5e466CalendarYear, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466CalendarYear到数据库中
	 * <param name="aoD5e466CalendarYearQueryCondition">附加的条件</param>
	 * <param name="aoD5e466CalendarYear">需要更新的AoD5e466CalendarYear</param>
	 */
	public int aoD5e466CalendarYearUpdateSelectiveByCondition(AoD5e466CalendarYear aoD5e466CalendarYear, AoD5e466CalendarYearExample aoD5e466CalendarYearQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466CalendarYearUpdateSelectiveByCondition(aoD5e466CalendarYear, aoD5e466CalendarYearQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
				this.getCache().clear("AO_D5E466_CALENDAR_YEAR");
			}
		}
		String kvalue = this.getAoD5e466CalendarYearExampleConditionSql(aoD5e466CalendarYearQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CALENDAR_YEAR", "批量部分更新", "conditionSql", kvalue, aoD5e466CalendarYear, ret);
		return ret;
	}
	
	public String getAoD5e466CalendarYearExampleConditionSql(AoD5e466CalendarYearExample aoD5e466CalendarYearQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466CalendarYearQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466CalendarYearExample.Criteria item = aoD5e466CalendarYearQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466CalendarYearExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466CalendarYear">从数据库中查询一个对象AoD5e466CalendarYear</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466CalendarYear aoD5e466CalendarYearSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
			String key = ("AO_D5E466_CALENDAR_YEAR_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466CalendarYear obj = ((AoD5e466CalendarYear)(this.getCache().get("AO_D5E466_CALENDAR_YEAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466CalendarYearSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CALENDAR_YEAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466CalendarYearSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466CalendarYearQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466CalendarYear> aoD5e466CalendarYearSelectObjects(AoD5e466CalendarYearExample aoD5e466CalendarYearQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
			String key = ("AO_D5E466_CALENDAR_YEAR_" 
						+ ("queryObject_" + this.getAoD5e466CalendarYearExampleConditionSql(aoD5e466CalendarYearQueryCondition)));
			List<AoD5e466CalendarYear> obj = ((List<AoD5e466CalendarYear>)(this.getCache().get("AO_D5E466_CALENDAR_YEAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466CalendarYearSelectObjects(aoD5e466CalendarYearQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CALENDAR_YEAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466CalendarYearSelectObjects(aoD5e466CalendarYearQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466CalendarYearQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466CalendarYearQuerySelectObjectsCount(AoD5e466CalendarYearExample aoD5e466CalendarYearQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_CALENDAR_YEAR")) {
			String key = ("AO_D5E466_CALENDAR_YEAR_" 
						+ ("queryCount_" + this.getAoD5e466CalendarYearExampleConditionSql(aoD5e466CalendarYearQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_CALENDAR_YEAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466CalendarYearQuerySelectObjectsCount(aoD5e466CalendarYearQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CALENDAR_YEAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466CalendarYearQuerySelectObjectsCount(aoD5e466CalendarYearQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466Configuration到数据库中
	 * <param name="aoD5e466Configuration">需要插入的新对象</param>
	 */
	public int aoD5e466ConfigurationInsert(AoD5e466Configuration aoD5e466Configuration) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationInsert(aoD5e466Configuration);
		if (this.needCache("AO_D5E466_CONFIGURATION")) {
			this.getCache().clear("AO_D5E466_CONFIGURATION");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Configuration.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "插入", "ID", kvalue, aoD5e466Configuration, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Configuration">从数据库中删除一个对象AoD5e466Configuration</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466ConfigurationDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CONFIGURATION")) {
				this.getCache().clear("AO_D5E466_CONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Configuration">从数据库中删除一个对象AoD5e466Configuration</param>
	 */
	public int aoD5e466ConfigurationDeleteByCondition(AoD5e466ConfigurationExample aoD5e466ConfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationDeleteByCondition(aoD5e466ConfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CONFIGURATION")) {
				this.getCache().clear("AO_D5E466_CONFIGURATION");
			}
		}
		String kvalue = this.getAoD5e466ConfigurationExampleConditionSql(aoD5e466ConfigurationQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "条件删除", "conditionSql", kvalue, aoD5e466ConfigurationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466Configuration到数据库中
	 * <param name="aoD5e466Configuration">需要更新的AoD5e466Configuration</param>
	 */
	public int aoD5e466ConfigurationUpdate(AoD5e466Configuration aoD5e466Configuration) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationUpdate(aoD5e466Configuration);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CONFIGURATION")) {
				this.getCache().clear("AO_D5E466_CONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Configuration.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "更新", "ID", kvalue, aoD5e466Configuration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466Configuration到数据库中
	 * <param name="aoD5e466Configuration">需要更新的AoD5e466Configuration</param>
	 */
	public int aoD5e466ConfigurationUpdateSelective(AoD5e466Configuration aoD5e466Configuration) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationUpdateSelective(aoD5e466Configuration);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CONFIGURATION")) {
				this.getCache().clear("AO_D5E466_CONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Configuration.getId());
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "部分更新", "ID", kvalue, aoD5e466Configuration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Configuration到数据库中
	 * <param name="aoD5e466ConfigurationQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Configuration">需要更新的AoD5e466Configuration</param>
	 */
	public int aoD5e466ConfigurationUpdateByCondition(AoD5e466Configuration aoD5e466Configuration, AoD5e466ConfigurationExample aoD5e466ConfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationUpdateByCondition(aoD5e466Configuration, aoD5e466ConfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CONFIGURATION")) {
				this.getCache().clear("AO_D5E466_CONFIGURATION");
			}
		}
		String kvalue = this.getAoD5e466ConfigurationExampleConditionSql(aoD5e466ConfigurationQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "条件更新", "conditionSql", kvalue, aoD5e466Configuration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Configuration到数据库中
	 * <param name="aoD5e466ConfigurationQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Configuration">需要更新的AoD5e466Configuration</param>
	 */
	public int aoD5e466ConfigurationUpdateSelectiveByCondition(AoD5e466Configuration aoD5e466Configuration, AoD5e466ConfigurationExample aoD5e466ConfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466ConfigurationUpdateSelectiveByCondition(aoD5e466Configuration, aoD5e466ConfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_CONFIGURATION")) {
				this.getCache().clear("AO_D5E466_CONFIGURATION");
			}
		}
		String kvalue = this.getAoD5e466ConfigurationExampleConditionSql(aoD5e466ConfigurationQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_CONFIGURATION", "批量部分更新", "conditionSql", kvalue, aoD5e466Configuration, ret);
		return ret;
	}
	
	public String getAoD5e466ConfigurationExampleConditionSql(AoD5e466ConfigurationExample aoD5e466ConfigurationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466ConfigurationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466ConfigurationExample.Criteria item = aoD5e466ConfigurationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466ConfigurationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466Configuration">从数据库中查询一个对象AoD5e466Configuration</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466Configuration aoD5e466ConfigurationSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_CONFIGURATION")) {
			String key = ("AO_D5E466_CONFIGURATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466Configuration obj = ((AoD5e466Configuration)(this.getCache().get("AO_D5E466_CONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466ConfigurationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466ConfigurationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466ConfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466Configuration> aoD5e466ConfigurationSelectObjects(AoD5e466ConfigurationExample aoD5e466ConfigurationQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_CONFIGURATION")) {
			String key = ("AO_D5E466_CONFIGURATION_" 
						+ ("queryObject_" + this.getAoD5e466ConfigurationExampleConditionSql(aoD5e466ConfigurationQueryCondition)));
			List<AoD5e466Configuration> obj = ((List<AoD5e466Configuration>)(this.getCache().get("AO_D5E466_CONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466ConfigurationSelectObjects(aoD5e466ConfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466ConfigurationSelectObjects(aoD5e466ConfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466ConfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466ConfigurationQuerySelectObjectsCount(AoD5e466ConfigurationExample aoD5e466ConfigurationQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_CONFIGURATION")) {
			String key = ("AO_D5E466_CONFIGURATION_" 
						+ ("queryCount_" + this.getAoD5e466ConfigurationExampleConditionSql(aoD5e466ConfigurationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_CONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466ConfigurationQuerySelectObjectsCount(aoD5e466ConfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_CONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466ConfigurationQuerySelectObjectsCount(aoD5e466ConfigurationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466Element到数据库中
	 * <param name="aoD5e466Element">需要插入的新对象</param>
	 */
	public int aoD5e466ElementInsert(AoD5e466Element aoD5e466Element) throws CacheException {
		int ret = this.getDao().aoD5e466ElementInsert(aoD5e466Element);
		if (this.needCache("AO_D5E466_ELEMENT")) {
			this.getCache().clear("AO_D5E466_ELEMENT");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Element.getId());
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "插入", "ID", kvalue, aoD5e466Element, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Element">从数据库中删除一个对象AoD5e466Element</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466ElementDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466ElementDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_ELEMENT")) {
				this.getCache().clear("AO_D5E466_ELEMENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Element">从数据库中删除一个对象AoD5e466Element</param>
	 */
	public int aoD5e466ElementDeleteByCondition(AoD5e466ElementExample aoD5e466ElementQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466ElementDeleteByCondition(aoD5e466ElementQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_ELEMENT")) {
				this.getCache().clear("AO_D5E466_ELEMENT");
			}
		}
		String kvalue = this.getAoD5e466ElementExampleConditionSql(aoD5e466ElementQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "条件删除", "conditionSql", kvalue, aoD5e466ElementQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466Element到数据库中
	 * <param name="aoD5e466Element">需要更新的AoD5e466Element</param>
	 */
	public int aoD5e466ElementUpdate(AoD5e466Element aoD5e466Element) throws CacheException {
		int ret = this.getDao().aoD5e466ElementUpdate(aoD5e466Element);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_ELEMENT")) {
				this.getCache().clear("AO_D5E466_ELEMENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Element.getId());
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "更新", "ID", kvalue, aoD5e466Element, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466Element到数据库中
	 * <param name="aoD5e466Element">需要更新的AoD5e466Element</param>
	 */
	public int aoD5e466ElementUpdateSelective(AoD5e466Element aoD5e466Element) throws CacheException {
		int ret = this.getDao().aoD5e466ElementUpdateSelective(aoD5e466Element);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_ELEMENT")) {
				this.getCache().clear("AO_D5E466_ELEMENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Element.getId());
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "部分更新", "ID", kvalue, aoD5e466Element, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Element到数据库中
	 * <param name="aoD5e466ElementQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Element">需要更新的AoD5e466Element</param>
	 */
	public int aoD5e466ElementUpdateByCondition(AoD5e466Element aoD5e466Element, AoD5e466ElementExample aoD5e466ElementQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466ElementUpdateByCondition(aoD5e466Element, aoD5e466ElementQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_ELEMENT")) {
				this.getCache().clear("AO_D5E466_ELEMENT");
			}
		}
		String kvalue = this.getAoD5e466ElementExampleConditionSql(aoD5e466ElementQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "条件更新", "conditionSql", kvalue, aoD5e466Element, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Element到数据库中
	 * <param name="aoD5e466ElementQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Element">需要更新的AoD5e466Element</param>
	 */
	public int aoD5e466ElementUpdateSelectiveByCondition(AoD5e466Element aoD5e466Element, AoD5e466ElementExample aoD5e466ElementQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466ElementUpdateSelectiveByCondition(aoD5e466Element, aoD5e466ElementQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_ELEMENT")) {
				this.getCache().clear("AO_D5E466_ELEMENT");
			}
		}
		String kvalue = this.getAoD5e466ElementExampleConditionSql(aoD5e466ElementQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_ELEMENT", "批量部分更新", "conditionSql", kvalue, aoD5e466Element, ret);
		return ret;
	}
	
	public String getAoD5e466ElementExampleConditionSql(AoD5e466ElementExample aoD5e466ElementQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466ElementQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466ElementExample.Criteria item = aoD5e466ElementQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466ElementExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466Element">从数据库中查询一个对象AoD5e466Element</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466Element aoD5e466ElementSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_ELEMENT")) {
			String key = ("AO_D5E466_ELEMENT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466Element obj = ((AoD5e466Element)(this.getCache().get("AO_D5E466_ELEMENT", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466ElementSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_ELEMENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466ElementSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466ElementQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466Element> aoD5e466ElementSelectObjects(AoD5e466ElementExample aoD5e466ElementQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_ELEMENT")) {
			String key = ("AO_D5E466_ELEMENT_" 
						+ ("queryObject_" + this.getAoD5e466ElementExampleConditionSql(aoD5e466ElementQueryCondition)));
			List<AoD5e466Element> obj = ((List<AoD5e466Element>)(this.getCache().get("AO_D5E466_ELEMENT", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466ElementSelectObjects(aoD5e466ElementQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_ELEMENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466ElementSelectObjects(aoD5e466ElementQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466ElementQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466ElementQuerySelectObjectsCount(AoD5e466ElementExample aoD5e466ElementQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_ELEMENT")) {
			String key = ("AO_D5E466_ELEMENT_" 
						+ ("queryCount_" + this.getAoD5e466ElementExampleConditionSql(aoD5e466ElementQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_ELEMENT", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466ElementQuerySelectObjectsCount(aoD5e466ElementQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_ELEMENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466ElementQuerySelectObjectsCount(aoD5e466ElementQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466FestiveDay到数据库中
	 * <param name="aoD5e466FestiveDay">需要插入的新对象</param>
	 */
	public int aoD5e466FestiveDayInsert(AoD5e466FestiveDay aoD5e466FestiveDay) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayInsert(aoD5e466FestiveDay);
		if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
			this.getCache().clear("AO_D5E466_FESTIVE_DAY");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466FestiveDay.getId());
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "插入", "ID", kvalue, aoD5e466FestiveDay, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466FestiveDay">从数据库中删除一个对象AoD5e466FestiveDay</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466FestiveDayDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
				this.getCache().clear("AO_D5E466_FESTIVE_DAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466FestiveDay">从数据库中删除一个对象AoD5e466FestiveDay</param>
	 */
	public int aoD5e466FestiveDayDeleteByCondition(AoD5e466FestiveDayExample aoD5e466FestiveDayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayDeleteByCondition(aoD5e466FestiveDayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
				this.getCache().clear("AO_D5E466_FESTIVE_DAY");
			}
		}
		String kvalue = this.getAoD5e466FestiveDayExampleConditionSql(aoD5e466FestiveDayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "条件删除", "conditionSql", kvalue, aoD5e466FestiveDayQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466FestiveDay到数据库中
	 * <param name="aoD5e466FestiveDay">需要更新的AoD5e466FestiveDay</param>
	 */
	public int aoD5e466FestiveDayUpdate(AoD5e466FestiveDay aoD5e466FestiveDay) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayUpdate(aoD5e466FestiveDay);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
				this.getCache().clear("AO_D5E466_FESTIVE_DAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466FestiveDay.getId());
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "更新", "ID", kvalue, aoD5e466FestiveDay, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466FestiveDay到数据库中
	 * <param name="aoD5e466FestiveDay">需要更新的AoD5e466FestiveDay</param>
	 */
	public int aoD5e466FestiveDayUpdateSelective(AoD5e466FestiveDay aoD5e466FestiveDay) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayUpdateSelective(aoD5e466FestiveDay);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
				this.getCache().clear("AO_D5E466_FESTIVE_DAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466FestiveDay.getId());
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "部分更新", "ID", kvalue, aoD5e466FestiveDay, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466FestiveDay到数据库中
	 * <param name="aoD5e466FestiveDayQueryCondition">附加的条件</param>
	 * <param name="aoD5e466FestiveDay">需要更新的AoD5e466FestiveDay</param>
	 */
	public int aoD5e466FestiveDayUpdateByCondition(AoD5e466FestiveDay aoD5e466FestiveDay, AoD5e466FestiveDayExample aoD5e466FestiveDayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayUpdateByCondition(aoD5e466FestiveDay, aoD5e466FestiveDayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
				this.getCache().clear("AO_D5E466_FESTIVE_DAY");
			}
		}
		String kvalue = this.getAoD5e466FestiveDayExampleConditionSql(aoD5e466FestiveDayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "条件更新", "conditionSql", kvalue, aoD5e466FestiveDay, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466FestiveDay到数据库中
	 * <param name="aoD5e466FestiveDayQueryCondition">附加的条件</param>
	 * <param name="aoD5e466FestiveDay">需要更新的AoD5e466FestiveDay</param>
	 */
	public int aoD5e466FestiveDayUpdateSelectiveByCondition(AoD5e466FestiveDay aoD5e466FestiveDay, AoD5e466FestiveDayExample aoD5e466FestiveDayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveDayUpdateSelectiveByCondition(aoD5e466FestiveDay, aoD5e466FestiveDayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
				this.getCache().clear("AO_D5E466_FESTIVE_DAY");
			}
		}
		String kvalue = this.getAoD5e466FestiveDayExampleConditionSql(aoD5e466FestiveDayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_DAY", "批量部分更新", "conditionSql", kvalue, aoD5e466FestiveDay, ret);
		return ret;
	}
	
	public String getAoD5e466FestiveDayExampleConditionSql(AoD5e466FestiveDayExample aoD5e466FestiveDayQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466FestiveDayQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466FestiveDayExample.Criteria item = aoD5e466FestiveDayQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466FestiveDayExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466FestiveDay">从数据库中查询一个对象AoD5e466FestiveDay</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466FestiveDay aoD5e466FestiveDaySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
			String key = ("AO_D5E466_FESTIVE_DAY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466FestiveDay obj = ((AoD5e466FestiveDay)(this.getCache().get("AO_D5E466_FESTIVE_DAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466FestiveDaySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_FESTIVE_DAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466FestiveDaySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466FestiveDayQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466FestiveDay> aoD5e466FestiveDaySelectObjects(AoD5e466FestiveDayExample aoD5e466FestiveDayQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
			String key = ("AO_D5E466_FESTIVE_DAY_" 
						+ ("queryObject_" + this.getAoD5e466FestiveDayExampleConditionSql(aoD5e466FestiveDayQueryCondition)));
			List<AoD5e466FestiveDay> obj = ((List<AoD5e466FestiveDay>)(this.getCache().get("AO_D5E466_FESTIVE_DAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466FestiveDaySelectObjects(aoD5e466FestiveDayQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_FESTIVE_DAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466FestiveDaySelectObjects(aoD5e466FestiveDayQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466FestiveDayQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466FestiveDayQuerySelectObjectsCount(AoD5e466FestiveDayExample aoD5e466FestiveDayQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_FESTIVE_DAY")) {
			String key = ("AO_D5E466_FESTIVE_DAY_" 
						+ ("queryCount_" + this.getAoD5e466FestiveDayExampleConditionSql(aoD5e466FestiveDayQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_FESTIVE_DAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466FestiveDayQuerySelectObjectsCount(aoD5e466FestiveDayQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_FESTIVE_DAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466FestiveDayQuerySelectObjectsCount(aoD5e466FestiveDayQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466FestiveYear到数据库中
	 * <param name="aoD5e466FestiveYear">需要插入的新对象</param>
	 */
	public int aoD5e466FestiveYearInsert(AoD5e466FestiveYear aoD5e466FestiveYear) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearInsert(aoD5e466FestiveYear);
		if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
			this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466FestiveYear.getId());
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "插入", "ID", kvalue, aoD5e466FestiveYear, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466FestiveYear">从数据库中删除一个对象AoD5e466FestiveYear</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466FestiveYearDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
				this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466FestiveYear">从数据库中删除一个对象AoD5e466FestiveYear</param>
	 */
	public int aoD5e466FestiveYearDeleteByCondition(AoD5e466FestiveYearExample aoD5e466FestiveYearQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearDeleteByCondition(aoD5e466FestiveYearQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
				this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
			}
		}
		String kvalue = this.getAoD5e466FestiveYearExampleConditionSql(aoD5e466FestiveYearQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "条件删除", "conditionSql", kvalue, aoD5e466FestiveYearQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466FestiveYear到数据库中
	 * <param name="aoD5e466FestiveYear">需要更新的AoD5e466FestiveYear</param>
	 */
	public int aoD5e466FestiveYearUpdate(AoD5e466FestiveYear aoD5e466FestiveYear) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearUpdate(aoD5e466FestiveYear);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
				this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466FestiveYear.getId());
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "更新", "ID", kvalue, aoD5e466FestiveYear, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466FestiveYear到数据库中
	 * <param name="aoD5e466FestiveYear">需要更新的AoD5e466FestiveYear</param>
	 */
	public int aoD5e466FestiveYearUpdateSelective(AoD5e466FestiveYear aoD5e466FestiveYear) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearUpdateSelective(aoD5e466FestiveYear);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
				this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466FestiveYear.getId());
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "部分更新", "ID", kvalue, aoD5e466FestiveYear, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466FestiveYear到数据库中
	 * <param name="aoD5e466FestiveYearQueryCondition">附加的条件</param>
	 * <param name="aoD5e466FestiveYear">需要更新的AoD5e466FestiveYear</param>
	 */
	public int aoD5e466FestiveYearUpdateByCondition(AoD5e466FestiveYear aoD5e466FestiveYear, AoD5e466FestiveYearExample aoD5e466FestiveYearQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearUpdateByCondition(aoD5e466FestiveYear, aoD5e466FestiveYearQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
				this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
			}
		}
		String kvalue = this.getAoD5e466FestiveYearExampleConditionSql(aoD5e466FestiveYearQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "条件更新", "conditionSql", kvalue, aoD5e466FestiveYear, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466FestiveYear到数据库中
	 * <param name="aoD5e466FestiveYearQueryCondition">附加的条件</param>
	 * <param name="aoD5e466FestiveYear">需要更新的AoD5e466FestiveYear</param>
	 */
	public int aoD5e466FestiveYearUpdateSelectiveByCondition(AoD5e466FestiveYear aoD5e466FestiveYear, AoD5e466FestiveYearExample aoD5e466FestiveYearQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466FestiveYearUpdateSelectiveByCondition(aoD5e466FestiveYear, aoD5e466FestiveYearQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
				this.getCache().clear("AO_D5E466_FESTIVE_YEAR");
			}
		}
		String kvalue = this.getAoD5e466FestiveYearExampleConditionSql(aoD5e466FestiveYearQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_FESTIVE_YEAR", "批量部分更新", "conditionSql", kvalue, aoD5e466FestiveYear, ret);
		return ret;
	}
	
	public String getAoD5e466FestiveYearExampleConditionSql(AoD5e466FestiveYearExample aoD5e466FestiveYearQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466FestiveYearQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466FestiveYearExample.Criteria item = aoD5e466FestiveYearQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466FestiveYearExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466FestiveYear">从数据库中查询一个对象AoD5e466FestiveYear</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466FestiveYear aoD5e466FestiveYearSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
			String key = ("AO_D5E466_FESTIVE_YEAR_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466FestiveYear obj = ((AoD5e466FestiveYear)(this.getCache().get("AO_D5E466_FESTIVE_YEAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466FestiveYearSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_FESTIVE_YEAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466FestiveYearSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466FestiveYearQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466FestiveYear> aoD5e466FestiveYearSelectObjects(AoD5e466FestiveYearExample aoD5e466FestiveYearQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
			String key = ("AO_D5E466_FESTIVE_YEAR_" 
						+ ("queryObject_" + this.getAoD5e466FestiveYearExampleConditionSql(aoD5e466FestiveYearQueryCondition)));
			List<AoD5e466FestiveYear> obj = ((List<AoD5e466FestiveYear>)(this.getCache().get("AO_D5E466_FESTIVE_YEAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466FestiveYearSelectObjects(aoD5e466FestiveYearQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_FESTIVE_YEAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466FestiveYearSelectObjects(aoD5e466FestiveYearQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466FestiveYearQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466FestiveYearQuerySelectObjectsCount(AoD5e466FestiveYearExample aoD5e466FestiveYearQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_FESTIVE_YEAR")) {
			String key = ("AO_D5E466_FESTIVE_YEAR_" 
						+ ("queryCount_" + this.getAoD5e466FestiveYearExampleConditionSql(aoD5e466FestiveYearQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_FESTIVE_YEAR", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466FestiveYearQuerySelectObjectsCount(aoD5e466FestiveYearQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_FESTIVE_YEAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466FestiveYearQuerySelectObjectsCount(aoD5e466FestiveYearQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466Holiday到数据库中
	 * <param name="aoD5e466Holiday">需要插入的新对象</param>
	 */
	public int aoD5e466HolidayInsert(AoD5e466Holiday aoD5e466Holiday) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayInsert(aoD5e466Holiday);
		if (this.needCache("AO_D5E466_HOLIDAY")) {
			this.getCache().clear("AO_D5E466_HOLIDAY");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Holiday.getId());
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "插入", "ID", kvalue, aoD5e466Holiday, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Holiday">从数据库中删除一个对象AoD5e466Holiday</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466HolidayDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_HOLIDAY")) {
				this.getCache().clear("AO_D5E466_HOLIDAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Holiday">从数据库中删除一个对象AoD5e466Holiday</param>
	 */
	public int aoD5e466HolidayDeleteByCondition(AoD5e466HolidayExample aoD5e466HolidayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayDeleteByCondition(aoD5e466HolidayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_HOLIDAY")) {
				this.getCache().clear("AO_D5E466_HOLIDAY");
			}
		}
		String kvalue = this.getAoD5e466HolidayExampleConditionSql(aoD5e466HolidayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "条件删除", "conditionSql", kvalue, aoD5e466HolidayQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466Holiday到数据库中
	 * <param name="aoD5e466Holiday">需要更新的AoD5e466Holiday</param>
	 */
	public int aoD5e466HolidayUpdate(AoD5e466Holiday aoD5e466Holiday) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayUpdate(aoD5e466Holiday);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_HOLIDAY")) {
				this.getCache().clear("AO_D5E466_HOLIDAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Holiday.getId());
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "更新", "ID", kvalue, aoD5e466Holiday, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466Holiday到数据库中
	 * <param name="aoD5e466Holiday">需要更新的AoD5e466Holiday</param>
	 */
	public int aoD5e466HolidayUpdateSelective(AoD5e466Holiday aoD5e466Holiday) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayUpdateSelective(aoD5e466Holiday);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_HOLIDAY")) {
				this.getCache().clear("AO_D5E466_HOLIDAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Holiday.getId());
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "部分更新", "ID", kvalue, aoD5e466Holiday, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Holiday到数据库中
	 * <param name="aoD5e466HolidayQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Holiday">需要更新的AoD5e466Holiday</param>
	 */
	public int aoD5e466HolidayUpdateByCondition(AoD5e466Holiday aoD5e466Holiday, AoD5e466HolidayExample aoD5e466HolidayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayUpdateByCondition(aoD5e466Holiday, aoD5e466HolidayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_HOLIDAY")) {
				this.getCache().clear("AO_D5E466_HOLIDAY");
			}
		}
		String kvalue = this.getAoD5e466HolidayExampleConditionSql(aoD5e466HolidayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "条件更新", "conditionSql", kvalue, aoD5e466Holiday, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Holiday到数据库中
	 * <param name="aoD5e466HolidayQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Holiday">需要更新的AoD5e466Holiday</param>
	 */
	public int aoD5e466HolidayUpdateSelectiveByCondition(AoD5e466Holiday aoD5e466Holiday, AoD5e466HolidayExample aoD5e466HolidayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466HolidayUpdateSelectiveByCondition(aoD5e466Holiday, aoD5e466HolidayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_HOLIDAY")) {
				this.getCache().clear("AO_D5E466_HOLIDAY");
			}
		}
		String kvalue = this.getAoD5e466HolidayExampleConditionSql(aoD5e466HolidayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_HOLIDAY", "批量部分更新", "conditionSql", kvalue, aoD5e466Holiday, ret);
		return ret;
	}
	
	public String getAoD5e466HolidayExampleConditionSql(AoD5e466HolidayExample aoD5e466HolidayQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466HolidayQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466HolidayExample.Criteria item = aoD5e466HolidayQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466HolidayExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466Holiday">从数据库中查询一个对象AoD5e466Holiday</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466Holiday aoD5e466HolidaySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_HOLIDAY")) {
			String key = ("AO_D5E466_HOLIDAY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466Holiday obj = ((AoD5e466Holiday)(this.getCache().get("AO_D5E466_HOLIDAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466HolidaySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_HOLIDAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466HolidaySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466HolidayQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466Holiday> aoD5e466HolidaySelectObjects(AoD5e466HolidayExample aoD5e466HolidayQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_HOLIDAY")) {
			String key = ("AO_D5E466_HOLIDAY_" 
						+ ("queryObject_" + this.getAoD5e466HolidayExampleConditionSql(aoD5e466HolidayQueryCondition)));
			List<AoD5e466Holiday> obj = ((List<AoD5e466Holiday>)(this.getCache().get("AO_D5E466_HOLIDAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466HolidaySelectObjects(aoD5e466HolidayQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_HOLIDAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466HolidaySelectObjects(aoD5e466HolidayQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466HolidayQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466HolidayQuerySelectObjectsCount(AoD5e466HolidayExample aoD5e466HolidayQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_HOLIDAY")) {
			String key = ("AO_D5E466_HOLIDAY_" 
						+ ("queryCount_" + this.getAoD5e466HolidayExampleConditionSql(aoD5e466HolidayQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_HOLIDAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466HolidayQuerySelectObjectsCount(aoD5e466HolidayQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_HOLIDAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466HolidayQuerySelectObjectsCount(aoD5e466HolidayQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466Period到数据库中
	 * <param name="aoD5e466Period">需要插入的新对象</param>
	 */
	public int aoD5e466PeriodInsert(AoD5e466Period aoD5e466Period) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodInsert(aoD5e466Period);
		if (this.needCache("AO_D5E466_PERIOD")) {
			this.getCache().clear("AO_D5E466_PERIOD");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Period.getId());
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "插入", "ID", kvalue, aoD5e466Period, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Period">从数据库中删除一个对象AoD5e466Period</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466PeriodDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_PERIOD")) {
				this.getCache().clear("AO_D5E466_PERIOD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466Period">从数据库中删除一个对象AoD5e466Period</param>
	 */
	public int aoD5e466PeriodDeleteByCondition(AoD5e466PeriodExample aoD5e466PeriodQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodDeleteByCondition(aoD5e466PeriodQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_PERIOD")) {
				this.getCache().clear("AO_D5E466_PERIOD");
			}
		}
		String kvalue = this.getAoD5e466PeriodExampleConditionSql(aoD5e466PeriodQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "条件删除", "conditionSql", kvalue, aoD5e466PeriodQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466Period到数据库中
	 * <param name="aoD5e466Period">需要更新的AoD5e466Period</param>
	 */
	public int aoD5e466PeriodUpdate(AoD5e466Period aoD5e466Period) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodUpdate(aoD5e466Period);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_PERIOD")) {
				this.getCache().clear("AO_D5E466_PERIOD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Period.getId());
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "更新", "ID", kvalue, aoD5e466Period, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466Period到数据库中
	 * <param name="aoD5e466Period">需要更新的AoD5e466Period</param>
	 */
	public int aoD5e466PeriodUpdateSelective(AoD5e466Period aoD5e466Period) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodUpdateSelective(aoD5e466Period);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_PERIOD")) {
				this.getCache().clear("AO_D5E466_PERIOD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466Period.getId());
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "部分更新", "ID", kvalue, aoD5e466Period, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Period到数据库中
	 * <param name="aoD5e466PeriodQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Period">需要更新的AoD5e466Period</param>
	 */
	public int aoD5e466PeriodUpdateByCondition(AoD5e466Period aoD5e466Period, AoD5e466PeriodExample aoD5e466PeriodQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodUpdateByCondition(aoD5e466Period, aoD5e466PeriodQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_PERIOD")) {
				this.getCache().clear("AO_D5E466_PERIOD");
			}
		}
		String kvalue = this.getAoD5e466PeriodExampleConditionSql(aoD5e466PeriodQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "条件更新", "conditionSql", kvalue, aoD5e466Period, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466Period到数据库中
	 * <param name="aoD5e466PeriodQueryCondition">附加的条件</param>
	 * <param name="aoD5e466Period">需要更新的AoD5e466Period</param>
	 */
	public int aoD5e466PeriodUpdateSelectiveByCondition(AoD5e466Period aoD5e466Period, AoD5e466PeriodExample aoD5e466PeriodQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466PeriodUpdateSelectiveByCondition(aoD5e466Period, aoD5e466PeriodQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_PERIOD")) {
				this.getCache().clear("AO_D5E466_PERIOD");
			}
		}
		String kvalue = this.getAoD5e466PeriodExampleConditionSql(aoD5e466PeriodQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_PERIOD", "批量部分更新", "conditionSql", kvalue, aoD5e466Period, ret);
		return ret;
	}
	
	public String getAoD5e466PeriodExampleConditionSql(AoD5e466PeriodExample aoD5e466PeriodQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466PeriodQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466PeriodExample.Criteria item = aoD5e466PeriodQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466PeriodExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466Period">从数据库中查询一个对象AoD5e466Period</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466Period aoD5e466PeriodSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_PERIOD")) {
			String key = ("AO_D5E466_PERIOD_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466Period obj = ((AoD5e466Period)(this.getCache().get("AO_D5E466_PERIOD", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466PeriodSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_PERIOD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466PeriodSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466PeriodQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466Period> aoD5e466PeriodSelectObjects(AoD5e466PeriodExample aoD5e466PeriodQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_PERIOD")) {
			String key = ("AO_D5E466_PERIOD_" 
						+ ("queryObject_" + this.getAoD5e466PeriodExampleConditionSql(aoD5e466PeriodQueryCondition)));
			List<AoD5e466Period> obj = ((List<AoD5e466Period>)(this.getCache().get("AO_D5E466_PERIOD", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466PeriodSelectObjects(aoD5e466PeriodQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_PERIOD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466PeriodSelectObjects(aoD5e466PeriodQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466PeriodQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466PeriodQuerySelectObjectsCount(AoD5e466PeriodExample aoD5e466PeriodQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_PERIOD")) {
			String key = ("AO_D5E466_PERIOD_" 
						+ ("queryCount_" + this.getAoD5e466PeriodExampleConditionSql(aoD5e466PeriodQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_PERIOD", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466PeriodQuerySelectObjectsCount(aoD5e466PeriodQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_PERIOD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466PeriodQuerySelectObjectsCount(aoD5e466PeriodQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466WorkingDay到数据库中
	 * <param name="aoD5e466WorkingDay">需要插入的新对象</param>
	 */
	public int aoD5e466WorkingDayInsert(AoD5e466WorkingDay aoD5e466WorkingDay) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayInsert(aoD5e466WorkingDay);
		if (this.needCache("AO_D5E466_WORKING_DAY")) {
			this.getCache().clear("AO_D5E466_WORKING_DAY");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466WorkingDay.getId());
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "插入", "ID", kvalue, aoD5e466WorkingDay, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466WorkingDay">从数据库中删除一个对象AoD5e466WorkingDay</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466WorkingDayDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466WorkingDay">从数据库中删除一个对象AoD5e466WorkingDay</param>
	 */
	public int aoD5e466WorkingDayDeleteByCondition(AoD5e466WorkingDayExample aoD5e466WorkingDayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayDeleteByCondition(aoD5e466WorkingDayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY");
			}
		}
		String kvalue = this.getAoD5e466WorkingDayExampleConditionSql(aoD5e466WorkingDayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "条件删除", "conditionSql", kvalue, aoD5e466WorkingDayQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466WorkingDay到数据库中
	 * <param name="aoD5e466WorkingDay">需要更新的AoD5e466WorkingDay</param>
	 */
	public int aoD5e466WorkingDayUpdate(AoD5e466WorkingDay aoD5e466WorkingDay) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayUpdate(aoD5e466WorkingDay);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466WorkingDay.getId());
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "更新", "ID", kvalue, aoD5e466WorkingDay, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466WorkingDay到数据库中
	 * <param name="aoD5e466WorkingDay">需要更新的AoD5e466WorkingDay</param>
	 */
	public int aoD5e466WorkingDayUpdateSelective(AoD5e466WorkingDay aoD5e466WorkingDay) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayUpdateSelective(aoD5e466WorkingDay);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466WorkingDay.getId());
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "部分更新", "ID", kvalue, aoD5e466WorkingDay, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466WorkingDay到数据库中
	 * <param name="aoD5e466WorkingDayQueryCondition">附加的条件</param>
	 * <param name="aoD5e466WorkingDay">需要更新的AoD5e466WorkingDay</param>
	 */
	public int aoD5e466WorkingDayUpdateByCondition(AoD5e466WorkingDay aoD5e466WorkingDay, AoD5e466WorkingDayExample aoD5e466WorkingDayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayUpdateByCondition(aoD5e466WorkingDay, aoD5e466WorkingDayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY");
			}
		}
		String kvalue = this.getAoD5e466WorkingDayExampleConditionSql(aoD5e466WorkingDayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "条件更新", "conditionSql", kvalue, aoD5e466WorkingDay, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466WorkingDay到数据库中
	 * <param name="aoD5e466WorkingDayQueryCondition">附加的条件</param>
	 * <param name="aoD5e466WorkingDay">需要更新的AoD5e466WorkingDay</param>
	 */
	public int aoD5e466WorkingDayUpdateSelectiveByCondition(AoD5e466WorkingDay aoD5e466WorkingDay, AoD5e466WorkingDayExample aoD5e466WorkingDayQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayUpdateSelectiveByCondition(aoD5e466WorkingDay, aoD5e466WorkingDayQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY");
			}
		}
		String kvalue = this.getAoD5e466WorkingDayExampleConditionSql(aoD5e466WorkingDayQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY", "批量部分更新", "conditionSql", kvalue, aoD5e466WorkingDay, ret);
		return ret;
	}
	
	public String getAoD5e466WorkingDayExampleConditionSql(AoD5e466WorkingDayExample aoD5e466WorkingDayQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466WorkingDayQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466WorkingDayExample.Criteria item = aoD5e466WorkingDayQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466WorkingDayExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466WorkingDay">从数据库中查询一个对象AoD5e466WorkingDay</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466WorkingDay aoD5e466WorkingDaySelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_WORKING_DAY")) {
			String key = ("AO_D5E466_WORKING_DAY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466WorkingDay obj = ((AoD5e466WorkingDay)(this.getCache().get("AO_D5E466_WORKING_DAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466WorkingDaySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_WORKING_DAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466WorkingDaySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466WorkingDayQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466WorkingDay> aoD5e466WorkingDaySelectObjects(AoD5e466WorkingDayExample aoD5e466WorkingDayQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_WORKING_DAY")) {
			String key = ("AO_D5E466_WORKING_DAY_" 
						+ ("queryObject_" + this.getAoD5e466WorkingDayExampleConditionSql(aoD5e466WorkingDayQueryCondition)));
			List<AoD5e466WorkingDay> obj = ((List<AoD5e466WorkingDay>)(this.getCache().get("AO_D5E466_WORKING_DAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466WorkingDaySelectObjects(aoD5e466WorkingDayQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_WORKING_DAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466WorkingDaySelectObjects(aoD5e466WorkingDayQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466WorkingDayQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466WorkingDayQuerySelectObjectsCount(AoD5e466WorkingDayExample aoD5e466WorkingDayQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_WORKING_DAY")) {
			String key = ("AO_D5E466_WORKING_DAY_" 
						+ ("queryCount_" + this.getAoD5e466WorkingDayExampleConditionSql(aoD5e466WorkingDayQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_WORKING_DAY", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466WorkingDayQuerySelectObjectsCount(aoD5e466WorkingDayQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_WORKING_DAY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466WorkingDayQuerySelectObjectsCount(aoD5e466WorkingDayQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoD5e466WorkingDayPeriod到数据库中
	 * <param name="aoD5e466WorkingDayPeriod">需要插入的新对象</param>
	 */
	public int aoD5e466WorkingDayPeriodInsert(AoD5e466WorkingDayPeriod aoD5e466WorkingDayPeriod) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodInsert(aoD5e466WorkingDayPeriod);
		if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
			this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466WorkingDayPeriod.getId());
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "插入", "ID", kvalue, aoD5e466WorkingDayPeriod, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466WorkingDayPeriod">从数据库中删除一个对象AoD5e466WorkingDayPeriod</param>
	 * <param name="AId"></param>
	 */
	public int aoD5e466WorkingDayPeriodDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoD5e466WorkingDayPeriod">从数据库中删除一个对象AoD5e466WorkingDayPeriod</param>
	 */
	public int aoD5e466WorkingDayPeriodDeleteByCondition(AoD5e466WorkingDayPeriodExample aoD5e466WorkingDayPeriodQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodDeleteByCondition(aoD5e466WorkingDayPeriodQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
			}
		}
		String kvalue = this.getAoD5e466WorkingDayPeriodExampleConditionSql(aoD5e466WorkingDayPeriodQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "条件删除", "conditionSql", kvalue, aoD5e466WorkingDayPeriodQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoD5e466WorkingDayPeriod到数据库中
	 * <param name="aoD5e466WorkingDayPeriod">需要更新的AoD5e466WorkingDayPeriod</param>
	 */
	public int aoD5e466WorkingDayPeriodUpdate(AoD5e466WorkingDayPeriod aoD5e466WorkingDayPeriod) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodUpdate(aoD5e466WorkingDayPeriod);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466WorkingDayPeriod.getId());
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "更新", "ID", kvalue, aoD5e466WorkingDayPeriod, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoD5e466WorkingDayPeriod到数据库中
	 * <param name="aoD5e466WorkingDayPeriod">需要更新的AoD5e466WorkingDayPeriod</param>
	 */
	public int aoD5e466WorkingDayPeriodUpdateSelective(AoD5e466WorkingDayPeriod aoD5e466WorkingDayPeriod) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodUpdateSelective(aoD5e466WorkingDayPeriod);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoD5e466WorkingDayPeriod.getId());
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "部分更新", "ID", kvalue, aoD5e466WorkingDayPeriod, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466WorkingDayPeriod到数据库中
	 * <param name="aoD5e466WorkingDayPeriodQueryCondition">附加的条件</param>
	 * <param name="aoD5e466WorkingDayPeriod">需要更新的AoD5e466WorkingDayPeriod</param>
	 */
	public int aoD5e466WorkingDayPeriodUpdateByCondition(AoD5e466WorkingDayPeriod aoD5e466WorkingDayPeriod, AoD5e466WorkingDayPeriodExample aoD5e466WorkingDayPeriodQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodUpdateByCondition(aoD5e466WorkingDayPeriod, aoD5e466WorkingDayPeriodQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
			}
		}
		String kvalue = this.getAoD5e466WorkingDayPeriodExampleConditionSql(aoD5e466WorkingDayPeriodQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "条件更新", "conditionSql", kvalue, aoD5e466WorkingDayPeriod, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoD5e466WorkingDayPeriod到数据库中
	 * <param name="aoD5e466WorkingDayPeriodQueryCondition">附加的条件</param>
	 * <param name="aoD5e466WorkingDayPeriod">需要更新的AoD5e466WorkingDayPeriod</param>
	 */
	public int aoD5e466WorkingDayPeriodUpdateSelectiveByCondition(AoD5e466WorkingDayPeriod aoD5e466WorkingDayPeriod, AoD5e466WorkingDayPeriodExample aoD5e466WorkingDayPeriodQueryCondition) throws CacheException {
		int ret = this.getDao().aoD5e466WorkingDayPeriodUpdateSelectiveByCondition(aoD5e466WorkingDayPeriod, aoD5e466WorkingDayPeriodQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
				this.getCache().clear("AO_D5E466_WORKING_DAY_PERIOD");
			}
		}
		String kvalue = this.getAoD5e466WorkingDayPeriodExampleConditionSql(aoD5e466WorkingDayPeriodQueryCondition);
		this.operatesLogSimpleAdd("AO_D5E466_WORKING_DAY_PERIOD", "批量部分更新", "conditionSql", kvalue, aoD5e466WorkingDayPeriod, ret);
		return ret;
	}
	
	public String getAoD5e466WorkingDayPeriodExampleConditionSql(AoD5e466WorkingDayPeriodExample aoD5e466WorkingDayPeriodQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoD5e466WorkingDayPeriodQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoD5e466WorkingDayPeriodExample.Criteria item = aoD5e466WorkingDayPeriodQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoD5e466WorkingDayPeriodExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoD5e466WorkingDayPeriod">从数据库中查询一个对象AoD5e466WorkingDayPeriod</param>
	 * <param name="AId"></param>
	 */
	public AoD5e466WorkingDayPeriod aoD5e466WorkingDayPeriodSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
			String key = ("AO_D5E466_WORKING_DAY_PERIOD_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoD5e466WorkingDayPeriod obj = ((AoD5e466WorkingDayPeriod)(this.getCache().get("AO_D5E466_WORKING_DAY_PERIOD", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466WorkingDayPeriodSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_WORKING_DAY_PERIOD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466WorkingDayPeriodSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoD5e466WorkingDayPeriodQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoD5e466WorkingDayPeriod> aoD5e466WorkingDayPeriodSelectObjects(AoD5e466WorkingDayPeriodExample aoD5e466WorkingDayPeriodQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
			String key = ("AO_D5E466_WORKING_DAY_PERIOD_" 
						+ ("queryObject_" + this.getAoD5e466WorkingDayPeriodExampleConditionSql(aoD5e466WorkingDayPeriodQueryCondition)));
			List<AoD5e466WorkingDayPeriod> obj = ((List<AoD5e466WorkingDayPeriod>)(this.getCache().get("AO_D5E466_WORKING_DAY_PERIOD", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466WorkingDayPeriodSelectObjects(aoD5e466WorkingDayPeriodQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_WORKING_DAY_PERIOD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466WorkingDayPeriodSelectObjects(aoD5e466WorkingDayPeriodQueryCondition);
		}
	}
	
	/**
	 * <param name="aoD5e466WorkingDayPeriodQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoD5e466WorkingDayPeriodQuerySelectObjectsCount(AoD5e466WorkingDayPeriodExample aoD5e466WorkingDayPeriodQueryCondition) throws CacheException {
		if (this.needCache("AO_D5E466_WORKING_DAY_PERIOD")) {
			String key = ("AO_D5E466_WORKING_DAY_PERIOD_" 
						+ ("queryCount_" + this.getAoD5e466WorkingDayPeriodExampleConditionSql(aoD5e466WorkingDayPeriodQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_D5E466_WORKING_DAY_PERIOD", key)));
			if ((obj == null)) {
				obj = this.getDao().aoD5e466WorkingDayPeriodQuerySelectObjectsCount(aoD5e466WorkingDayPeriodQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_D5E466_WORKING_DAY_PERIOD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoD5e466WorkingDayPeriodQuerySelectObjectsCount(aoD5e466WorkingDayPeriodQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoDc78d7HudsonAssociation到数据库中
	 * <param name="aoDc78d7HudsonAssociation">需要插入的新对象</param>
	 */
	public int aoDc78d7HudsonAssociationInsert(AoDc78d7HudsonAssociation aoDc78d7HudsonAssociation) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationInsert(aoDc78d7HudsonAssociation);
		if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
			this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
		}
		String kvalue = "";
		kvalue = (kvalue + aoDc78d7HudsonAssociation.getId());
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "插入", "ID", kvalue, aoDc78d7HudsonAssociation, ret);
		return ret;
	}
	
	/**
	 * <param name="aoDc78d7HudsonAssociation">从数据库中删除一个对象AoDc78d7HudsonAssociation</param>
	 * <param name="AId"></param>
	 */
	public int aoDc78d7HudsonAssociationDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
				this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoDc78d7HudsonAssociation">从数据库中删除一个对象AoDc78d7HudsonAssociation</param>
	 */
	public int aoDc78d7HudsonAssociationDeleteByCondition(AoDc78d7HudsonAssociationExample aoDc78d7HudsonAssociationQueryCondition) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationDeleteByCondition(aoDc78d7HudsonAssociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
				this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
			}
		}
		String kvalue = this.getAoDc78d7HudsonAssociationExampleConditionSql(aoDc78d7HudsonAssociationQueryCondition);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "条件删除", "conditionSql", kvalue, aoDc78d7HudsonAssociationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoDc78d7HudsonAssociation到数据库中
	 * <param name="aoDc78d7HudsonAssociation">需要更新的AoDc78d7HudsonAssociation</param>
	 */
	public int aoDc78d7HudsonAssociationUpdate(AoDc78d7HudsonAssociation aoDc78d7HudsonAssociation) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationUpdate(aoDc78d7HudsonAssociation);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
				this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoDc78d7HudsonAssociation.getId());
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "更新", "ID", kvalue, aoDc78d7HudsonAssociation, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoDc78d7HudsonAssociation到数据库中
	 * <param name="aoDc78d7HudsonAssociation">需要更新的AoDc78d7HudsonAssociation</param>
	 */
	public int aoDc78d7HudsonAssociationUpdateSelective(AoDc78d7HudsonAssociation aoDc78d7HudsonAssociation) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationUpdateSelective(aoDc78d7HudsonAssociation);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
				this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoDc78d7HudsonAssociation.getId());
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "部分更新", "ID", kvalue, aoDc78d7HudsonAssociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoDc78d7HudsonAssociation到数据库中
	 * <param name="aoDc78d7HudsonAssociationQueryCondition">附加的条件</param>
	 * <param name="aoDc78d7HudsonAssociation">需要更新的AoDc78d7HudsonAssociation</param>
	 */
	public int aoDc78d7HudsonAssociationUpdateByCondition(AoDc78d7HudsonAssociation aoDc78d7HudsonAssociation, AoDc78d7HudsonAssociationExample aoDc78d7HudsonAssociationQueryCondition) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationUpdateByCondition(aoDc78d7HudsonAssociation, aoDc78d7HudsonAssociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
				this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
			}
		}
		String kvalue = this.getAoDc78d7HudsonAssociationExampleConditionSql(aoDc78d7HudsonAssociationQueryCondition);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "条件更新", "conditionSql", kvalue, aoDc78d7HudsonAssociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoDc78d7HudsonAssociation到数据库中
	 * <param name="aoDc78d7HudsonAssociationQueryCondition">附加的条件</param>
	 * <param name="aoDc78d7HudsonAssociation">需要更新的AoDc78d7HudsonAssociation</param>
	 */
	public int aoDc78d7HudsonAssociationUpdateSelectiveByCondition(AoDc78d7HudsonAssociation aoDc78d7HudsonAssociation, AoDc78d7HudsonAssociationExample aoDc78d7HudsonAssociationQueryCondition) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonAssociationUpdateSelectiveByCondition(aoDc78d7HudsonAssociation, aoDc78d7HudsonAssociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
				this.getCache().clear("AO_DC78D7_HUDSON_ASSOCIATION");
			}
		}
		String kvalue = this.getAoDc78d7HudsonAssociationExampleConditionSql(aoDc78d7HudsonAssociationQueryCondition);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_ASSOCIATION", "批量部分更新", "conditionSql", kvalue, aoDc78d7HudsonAssociation, ret);
		return ret;
	}
	
	public String getAoDc78d7HudsonAssociationExampleConditionSql(AoDc78d7HudsonAssociationExample aoDc78d7HudsonAssociationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoDc78d7HudsonAssociationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoDc78d7HudsonAssociationExample.Criteria item = aoDc78d7HudsonAssociationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoDc78d7HudsonAssociationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoDc78d7HudsonAssociation">从数据库中查询一个对象AoDc78d7HudsonAssociation</param>
	 * <param name="AId"></param>
	 */
	public AoDc78d7HudsonAssociation aoDc78d7HudsonAssociationSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
			String key = ("AO_DC78D7_HUDSON_ASSOCIATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoDc78d7HudsonAssociation obj = ((AoDc78d7HudsonAssociation)(this.getCache().get("AO_DC78D7_HUDSON_ASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().aoDc78d7HudsonAssociationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_DC78D7_HUDSON_ASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoDc78d7HudsonAssociationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoDc78d7HudsonAssociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoDc78d7HudsonAssociation> aoDc78d7HudsonAssociationSelectObjects(AoDc78d7HudsonAssociationExample aoDc78d7HudsonAssociationQueryCondition) throws CacheException {
		if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
			String key = ("AO_DC78D7_HUDSON_ASSOCIATION_" 
						+ ("queryObject_" + this.getAoDc78d7HudsonAssociationExampleConditionSql(aoDc78d7HudsonAssociationQueryCondition)));
			List<AoDc78d7HudsonAssociation> obj = ((List<AoDc78d7HudsonAssociation>)(this.getCache().get("AO_DC78D7_HUDSON_ASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().aoDc78d7HudsonAssociationSelectObjects(aoDc78d7HudsonAssociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_DC78D7_HUDSON_ASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoDc78d7HudsonAssociationSelectObjects(aoDc78d7HudsonAssociationQueryCondition);
		}
	}
	
	/**
	 * <param name="aoDc78d7HudsonAssociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoDc78d7HudsonAssociationQuerySelectObjectsCount(AoDc78d7HudsonAssociationExample aoDc78d7HudsonAssociationQueryCondition) throws CacheException {
		if (this.needCache("AO_DC78D7_HUDSON_ASSOCIATION")) {
			String key = ("AO_DC78D7_HUDSON_ASSOCIATION_" 
						+ ("queryCount_" + this.getAoDc78d7HudsonAssociationExampleConditionSql(aoDc78d7HudsonAssociationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_DC78D7_HUDSON_ASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().aoDc78d7HudsonAssociationQuerySelectObjectsCount(aoDc78d7HudsonAssociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_DC78D7_HUDSON_ASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoDc78d7HudsonAssociationQuerySelectObjectsCount(aoDc78d7HudsonAssociationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象AoDc78d7HudsonServer到数据库中
	 * <param name="aoDc78d7HudsonServer">需要插入的新对象</param>
	 */
	public int aoDc78d7HudsonServerInsert(AoDc78d7HudsonServer aoDc78d7HudsonServer) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerInsert(aoDc78d7HudsonServer);
		if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
			this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
		}
		String kvalue = "";
		kvalue = (kvalue + aoDc78d7HudsonServer.getId());
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "插入", "ID", kvalue, aoDc78d7HudsonServer, ret);
		return ret;
	}
	
	/**
	 * <param name="aoDc78d7HudsonServer">从数据库中删除一个对象AoDc78d7HudsonServer</param>
	 * <param name="AId"></param>
	 */
	public int aoDc78d7HudsonServerDeleteByPrimaryKey(int AId) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
				this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="aoDc78d7HudsonServer">从数据库中删除一个对象AoDc78d7HudsonServer</param>
	 */
	public int aoDc78d7HudsonServerDeleteByCondition(AoDc78d7HudsonServerExample aoDc78d7HudsonServerQueryCondition) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerDeleteByCondition(aoDc78d7HudsonServerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
				this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
			}
		}
		String kvalue = this.getAoDc78d7HudsonServerExampleConditionSql(aoDc78d7HudsonServerQueryCondition);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "条件删除", "conditionSql", kvalue, aoDc78d7HudsonServerQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象AoDc78d7HudsonServer到数据库中
	 * <param name="aoDc78d7HudsonServer">需要更新的AoDc78d7HudsonServer</param>
	 */
	public int aoDc78d7HudsonServerUpdate(AoDc78d7HudsonServer aoDc78d7HudsonServer) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerUpdate(aoDc78d7HudsonServer);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
				this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoDc78d7HudsonServer.getId());
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "更新", "ID", kvalue, aoDc78d7HudsonServer, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性AoDc78d7HudsonServer到数据库中
	 * <param name="aoDc78d7HudsonServer">需要更新的AoDc78d7HudsonServer</param>
	 */
	public int aoDc78d7HudsonServerUpdateSelective(AoDc78d7HudsonServer aoDc78d7HudsonServer) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerUpdateSelective(aoDc78d7HudsonServer);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
				this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + aoDc78d7HudsonServer.getId());
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "部分更新", "ID", kvalue, aoDc78d7HudsonServer, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoDc78d7HudsonServer到数据库中
	 * <param name="aoDc78d7HudsonServerQueryCondition">附加的条件</param>
	 * <param name="aoDc78d7HudsonServer">需要更新的AoDc78d7HudsonServer</param>
	 */
	public int aoDc78d7HudsonServerUpdateByCondition(AoDc78d7HudsonServer aoDc78d7HudsonServer, AoDc78d7HudsonServerExample aoDc78d7HudsonServerQueryCondition) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerUpdateByCondition(aoDc78d7HudsonServer, aoDc78d7HudsonServerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
				this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
			}
		}
		String kvalue = this.getAoDc78d7HudsonServerExampleConditionSql(aoDc78d7HudsonServerQueryCondition);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "条件更新", "conditionSql", kvalue, aoDc78d7HudsonServer, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象AoDc78d7HudsonServer到数据库中
	 * <param name="aoDc78d7HudsonServerQueryCondition">附加的条件</param>
	 * <param name="aoDc78d7HudsonServer">需要更新的AoDc78d7HudsonServer</param>
	 */
	public int aoDc78d7HudsonServerUpdateSelectiveByCondition(AoDc78d7HudsonServer aoDc78d7HudsonServer, AoDc78d7HudsonServerExample aoDc78d7HudsonServerQueryCondition) throws CacheException {
		int ret = this.getDao().aoDc78d7HudsonServerUpdateSelectiveByCondition(aoDc78d7HudsonServer, aoDc78d7HudsonServerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
				this.getCache().clear("AO_DC78D7_HUDSON_SERVER");
			}
		}
		String kvalue = this.getAoDc78d7HudsonServerExampleConditionSql(aoDc78d7HudsonServerQueryCondition);
		this.operatesLogSimpleAdd("AO_DC78D7_HUDSON_SERVER", "批量部分更新", "conditionSql", kvalue, aoDc78d7HudsonServer, ret);
		return ret;
	}
	
	public String getAoDc78d7HudsonServerExampleConditionSql(AoDc78d7HudsonServerExample aoDc78d7HudsonServerQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < aoDc78d7HudsonServerQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AoDc78d7HudsonServerExample.Criteria item = aoDc78d7HudsonServerQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AoDc78d7HudsonServerExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="aoDc78d7HudsonServer">从数据库中查询一个对象AoDc78d7HudsonServer</param>
	 * <param name="AId"></param>
	 */
	public AoDc78d7HudsonServer aoDc78d7HudsonServerSelectByPrimaryKey(int AId) throws CacheException {
		if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
			String key = ("AO_DC78D7_HUDSON_SERVER_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			AoDc78d7HudsonServer obj = ((AoDc78d7HudsonServer)(this.getCache().get("AO_DC78D7_HUDSON_SERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().aoDc78d7HudsonServerSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AO_DC78D7_HUDSON_SERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoDc78d7HudsonServerSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="aoDc78d7HudsonServerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<AoDc78d7HudsonServer> aoDc78d7HudsonServerSelectObjects(AoDc78d7HudsonServerExample aoDc78d7HudsonServerQueryCondition) throws CacheException {
		if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
			String key = ("AO_DC78D7_HUDSON_SERVER_" 
						+ ("queryObject_" + this.getAoDc78d7HudsonServerExampleConditionSql(aoDc78d7HudsonServerQueryCondition)));
			List<AoDc78d7HudsonServer> obj = ((List<AoDc78d7HudsonServer>)(this.getCache().get("AO_DC78D7_HUDSON_SERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().aoDc78d7HudsonServerSelectObjects(aoDc78d7HudsonServerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_DC78D7_HUDSON_SERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoDc78d7HudsonServerSelectObjects(aoDc78d7HudsonServerQueryCondition);
		}
	}
	
	/**
	 * <param name="aoDc78d7HudsonServerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int aoDc78d7HudsonServerQuerySelectObjectsCount(AoDc78d7HudsonServerExample aoDc78d7HudsonServerQueryCondition) throws CacheException {
		if (this.needCache("AO_DC78D7_HUDSON_SERVER")) {
			String key = ("AO_DC78D7_HUDSON_SERVER_" 
						+ ("queryCount_" + this.getAoDc78d7HudsonServerExampleConditionSql(aoDc78d7HudsonServerQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AO_DC78D7_HUDSON_SERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().aoDc78d7HudsonServerQuerySelectObjectsCount(aoDc78d7HudsonServerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AO_DC78D7_HUDSON_SERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().aoDc78d7HudsonServerQuerySelectObjectsCount(aoDc78d7HudsonServerQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Avatar到数据库中
	 * <param name="avatar">需要插入的新对象</param>
	 */
	public int avatarInsert(Avatar avatar) throws CacheException {
		int ret = this.getDao().avatarInsert(avatar);
		if (this.needCache("AVATAR")) {
			this.getCache().clear("AVATAR");
		}
		String kvalue = "";
		kvalue = (kvalue + avatar.getId());
		this.operatesLogSimpleAdd("AVATAR", "插入", "ID", kvalue, avatar, ret);
		return ret;
	}
	
	/**
	 * <param name="avatar">从数据库中删除一个对象Avatar</param>
	 * <param name="AId"></param>
	 */
	public int avatarDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().avatarDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("AVATAR")) {
				this.getCache().clear("AVATAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("AVATAR", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="avatar">从数据库中删除一个对象Avatar</param>
	 */
	public int avatarDeleteByCondition(AvatarExample avatarQueryCondition) throws CacheException {
		int ret = this.getDao().avatarDeleteByCondition(avatarQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AVATAR")) {
				this.getCache().clear("AVATAR");
			}
		}
		String kvalue = this.getAvatarExampleConditionSql(avatarQueryCondition);
		this.operatesLogSimpleAdd("AVATAR", "条件删除", "conditionSql", kvalue, avatarQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Avatar到数据库中
	 * <param name="avatar">需要更新的Avatar</param>
	 */
	public int avatarUpdate(Avatar avatar) throws CacheException {
		int ret = this.getDao().avatarUpdate(avatar);
		if ((ret > 0)) {
			if (this.needCache("AVATAR")) {
				this.getCache().clear("AVATAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + avatar.getId());
		this.operatesLogSimpleAdd("AVATAR", "更新", "ID", kvalue, avatar, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Avatar到数据库中
	 * <param name="avatar">需要更新的Avatar</param>
	 */
	public int avatarUpdateSelective(Avatar avatar) throws CacheException {
		int ret = this.getDao().avatarUpdateSelective(avatar);
		if ((ret > 0)) {
			if (this.needCache("AVATAR")) {
				this.getCache().clear("AVATAR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + avatar.getId());
		this.operatesLogSimpleAdd("AVATAR", "部分更新", "ID", kvalue, avatar, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Avatar到数据库中
	 * <param name="avatarQueryCondition">附加的条件</param>
	 * <param name="avatar">需要更新的Avatar</param>
	 */
	public int avatarUpdateByCondition(Avatar avatar, AvatarExample avatarQueryCondition) throws CacheException {
		int ret = this.getDao().avatarUpdateByCondition(avatar, avatarQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AVATAR")) {
				this.getCache().clear("AVATAR");
			}
		}
		String kvalue = this.getAvatarExampleConditionSql(avatarQueryCondition);
		this.operatesLogSimpleAdd("AVATAR", "条件更新", "conditionSql", kvalue, avatar, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Avatar到数据库中
	 * <param name="avatarQueryCondition">附加的条件</param>
	 * <param name="avatar">需要更新的Avatar</param>
	 */
	public int avatarUpdateSelectiveByCondition(Avatar avatar, AvatarExample avatarQueryCondition) throws CacheException {
		int ret = this.getDao().avatarUpdateSelectiveByCondition(avatar, avatarQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("AVATAR")) {
				this.getCache().clear("AVATAR");
			}
		}
		String kvalue = this.getAvatarExampleConditionSql(avatarQueryCondition);
		this.operatesLogSimpleAdd("AVATAR", "批量部分更新", "conditionSql", kvalue, avatar, ret);
		return ret;
	}
	
	public String getAvatarExampleConditionSql(AvatarExample avatarQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < avatarQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			AvatarExample.Criteria item = avatarQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					AvatarExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="avatar">从数据库中查询一个对象Avatar</param>
	 * <param name="AId"></param>
	 */
	public Avatar avatarSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("AVATAR")) {
			String key = ("AVATAR_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Avatar obj = ((Avatar)(this.getCache().get("AVATAR", key)));
			if ((obj == null)) {
				obj = this.getDao().avatarSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("AVATAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().avatarSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="avatarQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Avatar> avatarSelectObjects(AvatarExample avatarQueryCondition) throws CacheException {
		if (this.needCache("AVATAR")) {
			String key = ("AVATAR_" 
						+ ("queryObject_" + this.getAvatarExampleConditionSql(avatarQueryCondition)));
			List<Avatar> obj = ((List<Avatar>)(this.getCache().get("AVATAR", key)));
			if ((obj == null)) {
				obj = this.getDao().avatarSelectObjects(avatarQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AVATAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().avatarSelectObjects(avatarQueryCondition);
		}
	}
	
	/**
	 * <param name="avatarQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int avatarQuerySelectObjectsCount(AvatarExample avatarQueryCondition) throws CacheException {
		if (this.needCache("AVATAR")) {
			String key = ("AVATAR_" 
						+ ("queryCount_" + this.getAvatarExampleConditionSql(avatarQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("AVATAR", key)));
			if ((obj == null)) {
				obj = this.getDao().avatarQuerySelectObjectsCount(avatarQueryCondition);
				if ((obj != null)) {
					this.getCache().put("AVATAR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().avatarQuerySelectObjectsCount(avatarQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Changegroup到数据库中
	 * <param name="changegroup">需要插入的新对象</param>
	 */
	public int changegroupInsert(Changegroup changegroup) throws CacheException {
		int ret = this.getDao().changegroupInsert(changegroup);
		if (this.needCache("CHANGEGROUP")) {
			this.getCache().clear("CHANGEGROUP");
		}
		String kvalue = "";
		kvalue = (kvalue + changegroup.getId());
		this.operatesLogSimpleAdd("CHANGEGROUP", "插入", "ID", kvalue, changegroup, ret);
		return ret;
	}
	
	/**
	 * <param name="changegroup">从数据库中删除一个对象Changegroup</param>
	 * <param name="AId"></param>
	 */
	public int changegroupDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().changegroupDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CHANGEGROUP")) {
				this.getCache().clear("CHANGEGROUP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CHANGEGROUP", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="changegroup">从数据库中删除一个对象Changegroup</param>
	 */
	public int changegroupDeleteByCondition(ChangegroupExample changegroupQueryCondition) throws CacheException {
		int ret = this.getDao().changegroupDeleteByCondition(changegroupQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CHANGEGROUP")) {
				this.getCache().clear("CHANGEGROUP");
			}
		}
		String kvalue = this.getChangegroupExampleConditionSql(changegroupQueryCondition);
		this.operatesLogSimpleAdd("CHANGEGROUP", "条件删除", "conditionSql", kvalue, changegroupQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Changegroup到数据库中
	 * <param name="changegroup">需要更新的Changegroup</param>
	 */
	public int changegroupUpdate(Changegroup changegroup) throws CacheException {
		int ret = this.getDao().changegroupUpdate(changegroup);
		if ((ret > 0)) {
			if (this.needCache("CHANGEGROUP")) {
				this.getCache().clear("CHANGEGROUP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + changegroup.getId());
		this.operatesLogSimpleAdd("CHANGEGROUP", "更新", "ID", kvalue, changegroup, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Changegroup到数据库中
	 * <param name="changegroup">需要更新的Changegroup</param>
	 */
	public int changegroupUpdateSelective(Changegroup changegroup) throws CacheException {
		int ret = this.getDao().changegroupUpdateSelective(changegroup);
		if ((ret > 0)) {
			if (this.needCache("CHANGEGROUP")) {
				this.getCache().clear("CHANGEGROUP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + changegroup.getId());
		this.operatesLogSimpleAdd("CHANGEGROUP", "部分更新", "ID", kvalue, changegroup, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Changegroup到数据库中
	 * <param name="changegroupQueryCondition">附加的条件</param>
	 * <param name="changegroup">需要更新的Changegroup</param>
	 */
	public int changegroupUpdateByCondition(Changegroup changegroup, ChangegroupExample changegroupQueryCondition) throws CacheException {
		int ret = this.getDao().changegroupUpdateByCondition(changegroup, changegroupQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CHANGEGROUP")) {
				this.getCache().clear("CHANGEGROUP");
			}
		}
		String kvalue = this.getChangegroupExampleConditionSql(changegroupQueryCondition);
		this.operatesLogSimpleAdd("CHANGEGROUP", "条件更新", "conditionSql", kvalue, changegroup, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Changegroup到数据库中
	 * <param name="changegroupQueryCondition">附加的条件</param>
	 * <param name="changegroup">需要更新的Changegroup</param>
	 */
	public int changegroupUpdateSelectiveByCondition(Changegroup changegroup, ChangegroupExample changegroupQueryCondition) throws CacheException {
		int ret = this.getDao().changegroupUpdateSelectiveByCondition(changegroup, changegroupQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CHANGEGROUP")) {
				this.getCache().clear("CHANGEGROUP");
			}
		}
		String kvalue = this.getChangegroupExampleConditionSql(changegroupQueryCondition);
		this.operatesLogSimpleAdd("CHANGEGROUP", "批量部分更新", "conditionSql", kvalue, changegroup, ret);
		return ret;
	}
	
	public String getChangegroupExampleConditionSql(ChangegroupExample changegroupQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < changegroupQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ChangegroupExample.Criteria item = changegroupQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ChangegroupExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="changegroup">从数据库中查询一个对象Changegroup</param>
	 * <param name="AId"></param>
	 */
	public Changegroup changegroupSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CHANGEGROUP")) {
			String key = ("CHANGEGROUP_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Changegroup obj = ((Changegroup)(this.getCache().get("CHANGEGROUP", key)));
			if ((obj == null)) {
				obj = this.getDao().changegroupSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CHANGEGROUP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changegroupSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="changegroupQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Changegroup> changegroupSelectObjects(ChangegroupExample changegroupQueryCondition) throws CacheException {
		if (this.needCache("CHANGEGROUP")) {
			String key = ("CHANGEGROUP_" 
						+ ("queryObject_" + this.getChangegroupExampleConditionSql(changegroupQueryCondition)));
			List<Changegroup> obj = ((List<Changegroup>)(this.getCache().get("CHANGEGROUP", key)));
			if ((obj == null)) {
				obj = this.getDao().changegroupSelectObjects(changegroupQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CHANGEGROUP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changegroupSelectObjects(changegroupQueryCondition);
		}
	}
	
	/**
	 * <param name="changegroupQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int changegroupQuerySelectObjectsCount(ChangegroupExample changegroupQueryCondition) throws CacheException {
		if (this.needCache("CHANGEGROUP")) {
			String key = ("CHANGEGROUP_" 
						+ ("queryCount_" + this.getChangegroupExampleConditionSql(changegroupQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CHANGEGROUP", key)));
			if ((obj == null)) {
				obj = this.getDao().changegroupQuerySelectObjectsCount(changegroupQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CHANGEGROUP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changegroupQuerySelectObjectsCount(changegroupQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Changeitem到数据库中
	 * <param name="changeitem">需要插入的新对象</param>
	 */
	public int changeitemInsert(ChangeitemWithBLOBs changeitem) throws CacheException {
		int ret = this.getDao().changeitemInsert(changeitem);
		if (this.needCache("CHANGEITEM")) {
			this.getCache().clear("CHANGEITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + changeitem.getId());
		this.operatesLogSimpleAdd("CHANGEITEM", "插入", "ID", kvalue, changeitem, ret);
		return ret;
	}
	
	/**
	 * <param name="changeitem">从数据库中删除一个对象Changeitem</param>
	 * <param name="AId"></param>
	 */
	public int changeitemDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().changeitemDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CHANGEITEM", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="changeitem">从数据库中删除一个对象Changeitem</param>
	 */
	public int changeitemDeleteByCondition(ChangeitemExample changeitemQueryCondition) throws CacheException {
		int ret = this.getDao().changeitemDeleteByCondition(changeitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = this.getChangeitemExampleConditionSql(changeitemQueryCondition);
		this.operatesLogSimpleAdd("CHANGEITEM", "条件删除", "conditionSql", kvalue, changeitemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Changeitem到数据库中
	 * <param name="changeitem">需要更新的Changeitem</param>
	 */
	public int changeitemUpdate(ChangeitemWithBLOBs changeitem) throws CacheException {
		int ret = this.getDao().changeitemUpdate(changeitem);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + changeitem.getId());
		this.operatesLogSimpleAdd("CHANGEITEM", "更新", "ID", kvalue, changeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Changeitem到数据库中
	 * <param name="changeitem">需要更新的Changeitem</param>
	 */
	public int changeitemUpdateSelective(ChangeitemWithBLOBs changeitem) throws CacheException {
		int ret = this.getDao().changeitemUpdateSelective(changeitem);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + changeitem.getId());
		this.operatesLogSimpleAdd("CHANGEITEM", "部分更新", "ID", kvalue, changeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Changeitem到数据库中
	 * <param name="changeitem">需要更新的Changeitem</param>
	 */
	public int changeitemUpdateWithBlobs(ChangeitemWithBLOBs changeitem) throws CacheException {
		int ret = this.getDao().changeitemUpdateWithBlobs(changeitem);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + changeitem.getId());
		this.operatesLogSimpleAdd("CHANGEITEM", "更新含Blob", "ID", kvalue, changeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Changeitem到数据库中
	 * <param name="changeitemQueryCondition">附加的条件</param>
	 * <param name="changeitem">需要更新的Changeitem</param>
	 */
	public int changeitemUpdateByCondition(ChangeitemWithBLOBs changeitem, ChangeitemExample changeitemQueryCondition) throws CacheException {
		int ret = this.getDao().changeitemUpdateByCondition(changeitem, changeitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = this.getChangeitemExampleConditionSql(changeitemQueryCondition);
		this.operatesLogSimpleAdd("CHANGEITEM", "条件更新", "conditionSql", kvalue, changeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Changeitem到数据库中
	 * <param name="changeitemQueryCondition">附加的条件</param>
	 * <param name="changeitem">需要更新的Changeitem</param>
	 */
	public int changeitemUpdateSelectiveByCondition(ChangeitemWithBLOBs changeitem, ChangeitemExample changeitemQueryCondition) throws CacheException {
		int ret = this.getDao().changeitemUpdateSelectiveByCondition(changeitem, changeitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CHANGEITEM")) {
				this.getCache().clear("CHANGEITEM");
			}
		}
		String kvalue = this.getChangeitemExampleConditionSql(changeitemQueryCondition);
		this.operatesLogSimpleAdd("CHANGEITEM", "批量部分更新", "conditionSql", kvalue, changeitem, ret);
		return ret;
	}
	
	public String getChangeitemExampleConditionSql(ChangeitemExample changeitemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < changeitemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ChangeitemExample.Criteria item = changeitemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ChangeitemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="changeitem">从数据库中查询一个对象Changeitem</param>
	 * <param name="AId"></param>
	 */
	public Changeitem changeitemSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CHANGEITEM")) {
			String key = ("CHANGEITEM_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Changeitem obj = ((Changeitem)(this.getCache().get("CHANGEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().changeitemSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CHANGEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changeitemSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="changeitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Changeitem> changeitemSelectObjects(ChangeitemExample changeitemQueryCondition) throws CacheException {
		if (this.needCache("CHANGEITEM")) {
			String key = ("CHANGEITEM_" 
						+ ("queryObject_" + this.getChangeitemExampleConditionSql(changeitemQueryCondition)));
			List<Changeitem> obj = ((List<Changeitem>)(this.getCache().get("CHANGEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().changeitemSelectObjects(changeitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CHANGEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changeitemSelectObjects(changeitemQueryCondition);
		}
	}
	
	/**
	 * <param name="changeitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<ChangeitemWithBLOBs> changeitemSelectObjectsWithBLOBs(ChangeitemExample changeitemQueryCondition) throws CacheException {
		if (this.needCache("CHANGEITEM")) {
			String key = ("CHANGEITEM_" 
						+ ("queryObject_" + this.getChangeitemExampleConditionSql(changeitemQueryCondition)));
			List<ChangeitemWithBLOBs> obj = ((List<ChangeitemWithBLOBs>)(this.getCache().get("CHANGEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().changeitemSelectObjectsWithBLOBs(changeitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CHANGEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changeitemSelectObjectsWithBLOBs(changeitemQueryCondition);
		}
	}
	
	/**
	 * <param name="changeitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int changeitemQuerySelectObjectsCount(ChangeitemExample changeitemQueryCondition) throws CacheException {
		if (this.needCache("CHANGEITEM")) {
			String key = ("CHANGEITEM_" 
						+ ("queryCount_" + this.getChangeitemExampleConditionSql(changeitemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CHANGEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().changeitemQuerySelectObjectsCount(changeitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CHANGEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().changeitemQuerySelectObjectsCount(changeitemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Columnlayout到数据库中
	 * <param name="columnlayout">需要插入的新对象</param>
	 */
	public int columnlayoutInsert(Columnlayout columnlayout) throws CacheException {
		int ret = this.getDao().columnlayoutInsert(columnlayout);
		if (this.needCache("COLUMNLAYOUT")) {
			this.getCache().clear("COLUMNLAYOUT");
		}
		String kvalue = "";
		kvalue = (kvalue + columnlayout.getId());
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "插入", "ID", kvalue, columnlayout, ret);
		return ret;
	}
	
	/**
	 * <param name="columnlayout">从数据库中删除一个对象Columnlayout</param>
	 * <param name="AId"></param>
	 */
	public int columnlayoutDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().columnlayoutDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUT")) {
				this.getCache().clear("COLUMNLAYOUT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="columnlayout">从数据库中删除一个对象Columnlayout</param>
	 */
	public int columnlayoutDeleteByCondition(ColumnlayoutExample columnlayoutQueryCondition) throws CacheException {
		int ret = this.getDao().columnlayoutDeleteByCondition(columnlayoutQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUT")) {
				this.getCache().clear("COLUMNLAYOUT");
			}
		}
		String kvalue = this.getColumnlayoutExampleConditionSql(columnlayoutQueryCondition);
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "条件删除", "conditionSql", kvalue, columnlayoutQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Columnlayout到数据库中
	 * <param name="columnlayout">需要更新的Columnlayout</param>
	 */
	public int columnlayoutUpdate(Columnlayout columnlayout) throws CacheException {
		int ret = this.getDao().columnlayoutUpdate(columnlayout);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUT")) {
				this.getCache().clear("COLUMNLAYOUT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + columnlayout.getId());
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "更新", "ID", kvalue, columnlayout, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Columnlayout到数据库中
	 * <param name="columnlayout">需要更新的Columnlayout</param>
	 */
	public int columnlayoutUpdateSelective(Columnlayout columnlayout) throws CacheException {
		int ret = this.getDao().columnlayoutUpdateSelective(columnlayout);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUT")) {
				this.getCache().clear("COLUMNLAYOUT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + columnlayout.getId());
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "部分更新", "ID", kvalue, columnlayout, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Columnlayout到数据库中
	 * <param name="columnlayoutQueryCondition">附加的条件</param>
	 * <param name="columnlayout">需要更新的Columnlayout</param>
	 */
	public int columnlayoutUpdateByCondition(Columnlayout columnlayout, ColumnlayoutExample columnlayoutQueryCondition) throws CacheException {
		int ret = this.getDao().columnlayoutUpdateByCondition(columnlayout, columnlayoutQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUT")) {
				this.getCache().clear("COLUMNLAYOUT");
			}
		}
		String kvalue = this.getColumnlayoutExampleConditionSql(columnlayoutQueryCondition);
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "条件更新", "conditionSql", kvalue, columnlayout, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Columnlayout到数据库中
	 * <param name="columnlayoutQueryCondition">附加的条件</param>
	 * <param name="columnlayout">需要更新的Columnlayout</param>
	 */
	public int columnlayoutUpdateSelectiveByCondition(Columnlayout columnlayout, ColumnlayoutExample columnlayoutQueryCondition) throws CacheException {
		int ret = this.getDao().columnlayoutUpdateSelectiveByCondition(columnlayout, columnlayoutQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUT")) {
				this.getCache().clear("COLUMNLAYOUT");
			}
		}
		String kvalue = this.getColumnlayoutExampleConditionSql(columnlayoutQueryCondition);
		this.operatesLogSimpleAdd("COLUMNLAYOUT", "批量部分更新", "conditionSql", kvalue, columnlayout, ret);
		return ret;
	}
	
	public String getColumnlayoutExampleConditionSql(ColumnlayoutExample columnlayoutQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < columnlayoutQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ColumnlayoutExample.Criteria item = columnlayoutQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ColumnlayoutExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="columnlayout">从数据库中查询一个对象Columnlayout</param>
	 * <param name="AId"></param>
	 */
	public Columnlayout columnlayoutSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("COLUMNLAYOUT")) {
			String key = ("COLUMNLAYOUT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Columnlayout obj = ((Columnlayout)(this.getCache().get("COLUMNLAYOUT", key)));
			if ((obj == null)) {
				obj = this.getDao().columnlayoutSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("COLUMNLAYOUT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().columnlayoutSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="columnlayoutQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Columnlayout> columnlayoutSelectObjects(ColumnlayoutExample columnlayoutQueryCondition) throws CacheException {
		if (this.needCache("COLUMNLAYOUT")) {
			String key = ("COLUMNLAYOUT_" 
						+ ("queryObject_" + this.getColumnlayoutExampleConditionSql(columnlayoutQueryCondition)));
			List<Columnlayout> obj = ((List<Columnlayout>)(this.getCache().get("COLUMNLAYOUT", key)));
			if ((obj == null)) {
				obj = this.getDao().columnlayoutSelectObjects(columnlayoutQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COLUMNLAYOUT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().columnlayoutSelectObjects(columnlayoutQueryCondition);
		}
	}
	
	/**
	 * <param name="columnlayoutQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int columnlayoutQuerySelectObjectsCount(ColumnlayoutExample columnlayoutQueryCondition) throws CacheException {
		if (this.needCache("COLUMNLAYOUT")) {
			String key = ("COLUMNLAYOUT_" 
						+ ("queryCount_" + this.getColumnlayoutExampleConditionSql(columnlayoutQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("COLUMNLAYOUT", key)));
			if ((obj == null)) {
				obj = this.getDao().columnlayoutQuerySelectObjectsCount(columnlayoutQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COLUMNLAYOUT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().columnlayoutQuerySelectObjectsCount(columnlayoutQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Columnlayoutitem到数据库中
	 * <param name="columnlayoutitem">需要插入的新对象</param>
	 */
	public int columnlayoutitemInsert(Columnlayoutitem columnlayoutitem) throws CacheException {
		int ret = this.getDao().columnlayoutitemInsert(columnlayoutitem);
		if (this.needCache("COLUMNLAYOUTITEM")) {
			this.getCache().clear("COLUMNLAYOUTITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + columnlayoutitem.getId());
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "插入", "ID", kvalue, columnlayoutitem, ret);
		return ret;
	}
	
	/**
	 * <param name="columnlayoutitem">从数据库中删除一个对象Columnlayoutitem</param>
	 * <param name="AId"></param>
	 */
	public int columnlayoutitemDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().columnlayoutitemDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUTITEM")) {
				this.getCache().clear("COLUMNLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="columnlayoutitem">从数据库中删除一个对象Columnlayoutitem</param>
	 */
	public int columnlayoutitemDeleteByCondition(ColumnlayoutitemExample columnlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().columnlayoutitemDeleteByCondition(columnlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUTITEM")) {
				this.getCache().clear("COLUMNLAYOUTITEM");
			}
		}
		String kvalue = this.getColumnlayoutitemExampleConditionSql(columnlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "条件删除", "conditionSql", kvalue, columnlayoutitemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Columnlayoutitem到数据库中
	 * <param name="columnlayoutitem">需要更新的Columnlayoutitem</param>
	 */
	public int columnlayoutitemUpdate(Columnlayoutitem columnlayoutitem) throws CacheException {
		int ret = this.getDao().columnlayoutitemUpdate(columnlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUTITEM")) {
				this.getCache().clear("COLUMNLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + columnlayoutitem.getId());
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "更新", "ID", kvalue, columnlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Columnlayoutitem到数据库中
	 * <param name="columnlayoutitem">需要更新的Columnlayoutitem</param>
	 */
	public int columnlayoutitemUpdateSelective(Columnlayoutitem columnlayoutitem) throws CacheException {
		int ret = this.getDao().columnlayoutitemUpdateSelective(columnlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUTITEM")) {
				this.getCache().clear("COLUMNLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + columnlayoutitem.getId());
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "部分更新", "ID", kvalue, columnlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Columnlayoutitem到数据库中
	 * <param name="columnlayoutitemQueryCondition">附加的条件</param>
	 * <param name="columnlayoutitem">需要更新的Columnlayoutitem</param>
	 */
	public int columnlayoutitemUpdateByCondition(Columnlayoutitem columnlayoutitem, ColumnlayoutitemExample columnlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().columnlayoutitemUpdateByCondition(columnlayoutitem, columnlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUTITEM")) {
				this.getCache().clear("COLUMNLAYOUTITEM");
			}
		}
		String kvalue = this.getColumnlayoutitemExampleConditionSql(columnlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "条件更新", "conditionSql", kvalue, columnlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Columnlayoutitem到数据库中
	 * <param name="columnlayoutitemQueryCondition">附加的条件</param>
	 * <param name="columnlayoutitem">需要更新的Columnlayoutitem</param>
	 */
	public int columnlayoutitemUpdateSelectiveByCondition(Columnlayoutitem columnlayoutitem, ColumnlayoutitemExample columnlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().columnlayoutitemUpdateSelectiveByCondition(columnlayoutitem, columnlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COLUMNLAYOUTITEM")) {
				this.getCache().clear("COLUMNLAYOUTITEM");
			}
		}
		String kvalue = this.getColumnlayoutitemExampleConditionSql(columnlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("COLUMNLAYOUTITEM", "批量部分更新", "conditionSql", kvalue, columnlayoutitem, ret);
		return ret;
	}
	
	public String getColumnlayoutitemExampleConditionSql(ColumnlayoutitemExample columnlayoutitemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < columnlayoutitemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ColumnlayoutitemExample.Criteria item = columnlayoutitemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ColumnlayoutitemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="columnlayoutitem">从数据库中查询一个对象Columnlayoutitem</param>
	 * <param name="AId"></param>
	 */
	public Columnlayoutitem columnlayoutitemSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("COLUMNLAYOUTITEM")) {
			String key = ("COLUMNLAYOUTITEM_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Columnlayoutitem obj = ((Columnlayoutitem)(this.getCache().get("COLUMNLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().columnlayoutitemSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("COLUMNLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().columnlayoutitemSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="columnlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Columnlayoutitem> columnlayoutitemSelectObjects(ColumnlayoutitemExample columnlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("COLUMNLAYOUTITEM")) {
			String key = ("COLUMNLAYOUTITEM_" 
						+ ("queryObject_" + this.getColumnlayoutitemExampleConditionSql(columnlayoutitemQueryCondition)));
			List<Columnlayoutitem> obj = ((List<Columnlayoutitem>)(this.getCache().get("COLUMNLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().columnlayoutitemSelectObjects(columnlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COLUMNLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().columnlayoutitemSelectObjects(columnlayoutitemQueryCondition);
		}
	}
	
	/**
	 * <param name="columnlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int columnlayoutitemQuerySelectObjectsCount(ColumnlayoutitemExample columnlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("COLUMNLAYOUTITEM")) {
			String key = ("COLUMNLAYOUTITEM_" 
						+ ("queryCount_" + this.getColumnlayoutitemExampleConditionSql(columnlayoutitemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("COLUMNLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().columnlayoutitemQuerySelectObjectsCount(columnlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COLUMNLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().columnlayoutitemQuerySelectObjectsCount(columnlayoutitemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Component到数据库中
	 * <param name="component">需要插入的新对象</param>
	 */
	public int componentInsert(Component component) throws CacheException {
		int ret = this.getDao().componentInsert(component);
		if (this.needCache("COMPONENT")) {
			this.getCache().clear("COMPONENT");
		}
		String kvalue = "";
		kvalue = (kvalue + component.getId());
		this.operatesLogSimpleAdd("COMPONENT", "插入", "ID", kvalue, component, ret);
		return ret;
	}
	
	/**
	 * <param name="component">从数据库中删除一个对象Component</param>
	 * <param name="AId"></param>
	 */
	public int componentDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().componentDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("COMPONENT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="component">从数据库中删除一个对象Component</param>
	 */
	public int componentDeleteByCondition(ComponentExample componentQueryCondition) throws CacheException {
		int ret = this.getDao().componentDeleteByCondition(componentQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = this.getComponentExampleConditionSql(componentQueryCondition);
		this.operatesLogSimpleAdd("COMPONENT", "条件删除", "conditionSql", kvalue, componentQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Component到数据库中
	 * <param name="component">需要更新的Component</param>
	 */
	public int componentUpdate(Component component) throws CacheException {
		int ret = this.getDao().componentUpdate(component);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + component.getId());
		this.operatesLogSimpleAdd("COMPONENT", "更新", "ID", kvalue, component, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Component到数据库中
	 * <param name="component">需要更新的Component</param>
	 */
	public int componentUpdateSelective(Component component) throws CacheException {
		int ret = this.getDao().componentUpdateSelective(component);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + component.getId());
		this.operatesLogSimpleAdd("COMPONENT", "部分更新", "ID", kvalue, component, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Component到数据库中
	 * <param name="component">需要更新的Component</param>
	 */
	public int componentUpdateWithBlobs(Component component) throws CacheException {
		int ret = this.getDao().componentUpdateWithBlobs(component);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + component.getId());
		this.operatesLogSimpleAdd("COMPONENT", "更新含Blob", "ID", kvalue, component, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Component到数据库中
	 * <param name="componentQueryCondition">附加的条件</param>
	 * <param name="component">需要更新的Component</param>
	 */
	public int componentUpdateByCondition(Component component, ComponentExample componentQueryCondition) throws CacheException {
		int ret = this.getDao().componentUpdateByCondition(component, componentQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = this.getComponentExampleConditionSql(componentQueryCondition);
		this.operatesLogSimpleAdd("COMPONENT", "条件更新", "conditionSql", kvalue, component, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Component到数据库中
	 * <param name="componentQueryCondition">附加的条件</param>
	 * <param name="component">需要更新的Component</param>
	 */
	public int componentUpdateSelectiveByCondition(Component component, ComponentExample componentQueryCondition) throws CacheException {
		int ret = this.getDao().componentUpdateSelectiveByCondition(component, componentQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("COMPONENT")) {
				this.getCache().clear("COMPONENT");
			}
		}
		String kvalue = this.getComponentExampleConditionSql(componentQueryCondition);
		this.operatesLogSimpleAdd("COMPONENT", "批量部分更新", "conditionSql", kvalue, component, ret);
		return ret;
	}
	
	public String getComponentExampleConditionSql(ComponentExample componentQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < componentQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ComponentExample.Criteria item = componentQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ComponentExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="component">从数据库中查询一个对象Component</param>
	 * <param name="AId"></param>
	 */
	public Component componentSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("COMPONENT")) {
			String key = ("COMPONENT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Component obj = ((Component)(this.getCache().get("COMPONENT", key)));
			if ((obj == null)) {
				obj = this.getDao().componentSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("COMPONENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().componentSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="componentQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Component> componentSelectObjects(ComponentExample componentQueryCondition) throws CacheException {
		if (this.needCache("COMPONENT")) {
			String key = ("COMPONENT_" 
						+ ("queryObject_" + this.getComponentExampleConditionSql(componentQueryCondition)));
			List<Component> obj = ((List<Component>)(this.getCache().get("COMPONENT", key)));
			if ((obj == null)) {
				obj = this.getDao().componentSelectObjects(componentQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COMPONENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().componentSelectObjects(componentQueryCondition);
		}
	}
	
	/**
	 * <param name="componentQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Component> componentSelectObjectsWithBLOBs(ComponentExample componentQueryCondition) throws CacheException {
		if (this.needCache("COMPONENT")) {
			String key = ("COMPONENT_" 
						+ ("queryObject_" + this.getComponentExampleConditionSql(componentQueryCondition)));
			List<Component> obj = ((List<Component>)(this.getCache().get("COMPONENT", key)));
			if ((obj == null)) {
				obj = this.getDao().componentSelectObjectsWithBLOBs(componentQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COMPONENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().componentSelectObjectsWithBLOBs(componentQueryCondition);
		}
	}
	
	/**
	 * <param name="componentQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int componentQuerySelectObjectsCount(ComponentExample componentQueryCondition) throws CacheException {
		if (this.needCache("COMPONENT")) {
			String key = ("COMPONENT_" 
						+ ("queryCount_" + this.getComponentExampleConditionSql(componentQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("COMPONENT", key)));
			if ((obj == null)) {
				obj = this.getDao().componentQuerySelectObjectsCount(componentQueryCondition);
				if ((obj != null)) {
					this.getCache().put("COMPONENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().componentQuerySelectObjectsCount(componentQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Configurationcontext到数据库中
	 * <param name="configurationcontext">需要插入的新对象</param>
	 */
	public int configurationcontextInsert(Configurationcontext configurationcontext) throws CacheException {
		int ret = this.getDao().configurationcontextInsert(configurationcontext);
		if (this.needCache("CONFIGURATIONCONTEXT")) {
			this.getCache().clear("CONFIGURATIONCONTEXT");
		}
		String kvalue = "";
		kvalue = (kvalue + configurationcontext.getId());
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "插入", "ID", kvalue, configurationcontext, ret);
		return ret;
	}
	
	/**
	 * <param name="configurationcontext">从数据库中删除一个对象Configurationcontext</param>
	 * <param name="AId"></param>
	 */
	public int configurationcontextDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().configurationcontextDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CONFIGURATIONCONTEXT")) {
				this.getCache().clear("CONFIGURATIONCONTEXT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="configurationcontext">从数据库中删除一个对象Configurationcontext</param>
	 */
	public int configurationcontextDeleteByCondition(ConfigurationcontextExample configurationcontextQueryCondition) throws CacheException {
		int ret = this.getDao().configurationcontextDeleteByCondition(configurationcontextQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CONFIGURATIONCONTEXT")) {
				this.getCache().clear("CONFIGURATIONCONTEXT");
			}
		}
		String kvalue = this.getConfigurationcontextExampleConditionSql(configurationcontextQueryCondition);
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "条件删除", "conditionSql", kvalue, configurationcontextQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Configurationcontext到数据库中
	 * <param name="configurationcontext">需要更新的Configurationcontext</param>
	 */
	public int configurationcontextUpdate(Configurationcontext configurationcontext) throws CacheException {
		int ret = this.getDao().configurationcontextUpdate(configurationcontext);
		if ((ret > 0)) {
			if (this.needCache("CONFIGURATIONCONTEXT")) {
				this.getCache().clear("CONFIGURATIONCONTEXT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + configurationcontext.getId());
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "更新", "ID", kvalue, configurationcontext, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Configurationcontext到数据库中
	 * <param name="configurationcontext">需要更新的Configurationcontext</param>
	 */
	public int configurationcontextUpdateSelective(Configurationcontext configurationcontext) throws CacheException {
		int ret = this.getDao().configurationcontextUpdateSelective(configurationcontext);
		if ((ret > 0)) {
			if (this.needCache("CONFIGURATIONCONTEXT")) {
				this.getCache().clear("CONFIGURATIONCONTEXT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + configurationcontext.getId());
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "部分更新", "ID", kvalue, configurationcontext, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Configurationcontext到数据库中
	 * <param name="configurationcontextQueryCondition">附加的条件</param>
	 * <param name="configurationcontext">需要更新的Configurationcontext</param>
	 */
	public int configurationcontextUpdateByCondition(Configurationcontext configurationcontext, ConfigurationcontextExample configurationcontextQueryCondition) throws CacheException {
		int ret = this.getDao().configurationcontextUpdateByCondition(configurationcontext, configurationcontextQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CONFIGURATIONCONTEXT")) {
				this.getCache().clear("CONFIGURATIONCONTEXT");
			}
		}
		String kvalue = this.getConfigurationcontextExampleConditionSql(configurationcontextQueryCondition);
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "条件更新", "conditionSql", kvalue, configurationcontext, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Configurationcontext到数据库中
	 * <param name="configurationcontextQueryCondition">附加的条件</param>
	 * <param name="configurationcontext">需要更新的Configurationcontext</param>
	 */
	public int configurationcontextUpdateSelectiveByCondition(Configurationcontext configurationcontext, ConfigurationcontextExample configurationcontextQueryCondition) throws CacheException {
		int ret = this.getDao().configurationcontextUpdateSelectiveByCondition(configurationcontext, configurationcontextQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CONFIGURATIONCONTEXT")) {
				this.getCache().clear("CONFIGURATIONCONTEXT");
			}
		}
		String kvalue = this.getConfigurationcontextExampleConditionSql(configurationcontextQueryCondition);
		this.operatesLogSimpleAdd("CONFIGURATIONCONTEXT", "批量部分更新", "conditionSql", kvalue, configurationcontext, ret);
		return ret;
	}
	
	public String getConfigurationcontextExampleConditionSql(ConfigurationcontextExample configurationcontextQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < configurationcontextQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ConfigurationcontextExample.Criteria item = configurationcontextQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ConfigurationcontextExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="configurationcontext">从数据库中查询一个对象Configurationcontext</param>
	 * <param name="AId"></param>
	 */
	public Configurationcontext configurationcontextSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CONFIGURATIONCONTEXT")) {
			String key = ("CONFIGURATIONCONTEXT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Configurationcontext obj = ((Configurationcontext)(this.getCache().get("CONFIGURATIONCONTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().configurationcontextSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CONFIGURATIONCONTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().configurationcontextSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="configurationcontextQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Configurationcontext> configurationcontextSelectObjects(ConfigurationcontextExample configurationcontextQueryCondition) throws CacheException {
		if (this.needCache("CONFIGURATIONCONTEXT")) {
			String key = ("CONFIGURATIONCONTEXT_" 
						+ ("queryObject_" + this.getConfigurationcontextExampleConditionSql(configurationcontextQueryCondition)));
			List<Configurationcontext> obj = ((List<Configurationcontext>)(this.getCache().get("CONFIGURATIONCONTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().configurationcontextSelectObjects(configurationcontextQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CONFIGURATIONCONTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().configurationcontextSelectObjects(configurationcontextQueryCondition);
		}
	}
	
	/**
	 * <param name="configurationcontextQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int configurationcontextQuerySelectObjectsCount(ConfigurationcontextExample configurationcontextQueryCondition) throws CacheException {
		if (this.needCache("CONFIGURATIONCONTEXT")) {
			String key = ("CONFIGURATIONCONTEXT_" 
						+ ("queryCount_" + this.getConfigurationcontextExampleConditionSql(configurationcontextQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CONFIGURATIONCONTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().configurationcontextQuerySelectObjectsCount(configurationcontextQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CONFIGURATIONCONTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().configurationcontextQuerySelectObjectsCount(configurationcontextQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Customfield到数据库中
	 * <param name="customfield">需要插入的新对象</param>
	 */
	public int customfieldInsert(Customfield customfield) throws CacheException {
		int ret = this.getDao().customfieldInsert(customfield);
		if (this.needCache("CUSTOMFIELD")) {
			this.getCache().clear("CUSTOMFIELD");
		}
		String kvalue = "";
		kvalue = (kvalue + customfield.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELD", "插入", "ID", kvalue, customfield, ret);
		return ret;
	}
	
	/**
	 * <param name="customfield">从数据库中删除一个对象Customfield</param>
	 * <param name="AId"></param>
	 */
	public int customfieldDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().customfieldDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CUSTOMFIELD", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="customfield">从数据库中删除一个对象Customfield</param>
	 */
	public int customfieldDeleteByCondition(CustomfieldExample customfieldQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldDeleteByCondition(customfieldQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = this.getCustomfieldExampleConditionSql(customfieldQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELD", "条件删除", "conditionSql", kvalue, customfieldQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Customfield到数据库中
	 * <param name="customfield">需要更新的Customfield</param>
	 */
	public int customfieldUpdate(Customfield customfield) throws CacheException {
		int ret = this.getDao().customfieldUpdate(customfield);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfield.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELD", "更新", "ID", kvalue, customfield, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Customfield到数据库中
	 * <param name="customfield">需要更新的Customfield</param>
	 */
	public int customfieldUpdateSelective(Customfield customfield) throws CacheException {
		int ret = this.getDao().customfieldUpdateSelective(customfield);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfield.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELD", "部分更新", "ID", kvalue, customfield, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Customfield到数据库中
	 * <param name="customfield">需要更新的Customfield</param>
	 */
	public int customfieldUpdateWithBlobs(Customfield customfield) throws CacheException {
		int ret = this.getDao().customfieldUpdateWithBlobs(customfield);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfield.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELD", "更新含Blob", "ID", kvalue, customfield, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Customfield到数据库中
	 * <param name="customfieldQueryCondition">附加的条件</param>
	 * <param name="customfield">需要更新的Customfield</param>
	 */
	public int customfieldUpdateByCondition(Customfield customfield, CustomfieldExample customfieldQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldUpdateByCondition(customfield, customfieldQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = this.getCustomfieldExampleConditionSql(customfieldQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELD", "条件更新", "conditionSql", kvalue, customfield, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Customfield到数据库中
	 * <param name="customfieldQueryCondition">附加的条件</param>
	 * <param name="customfield">需要更新的Customfield</param>
	 */
	public int customfieldUpdateSelectiveByCondition(Customfield customfield, CustomfieldExample customfieldQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldUpdateSelectiveByCondition(customfield, customfieldQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELD")) {
				this.getCache().clear("CUSTOMFIELD");
			}
		}
		String kvalue = this.getCustomfieldExampleConditionSql(customfieldQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELD", "批量部分更新", "conditionSql", kvalue, customfield, ret);
		return ret;
	}
	
	public String getCustomfieldExampleConditionSql(CustomfieldExample customfieldQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < customfieldQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CustomfieldExample.Criteria item = customfieldQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CustomfieldExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="customfield">从数据库中查询一个对象Customfield</param>
	 * <param name="AId"></param>
	 */
	public Customfield customfieldSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CUSTOMFIELD")) {
			String key = ("CUSTOMFIELD_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Customfield obj = ((Customfield)(this.getCache().get("CUSTOMFIELD", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="customfieldQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Customfield> customfieldSelectObjects(CustomfieldExample customfieldQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELD")) {
			String key = ("CUSTOMFIELD_" 
						+ ("queryObject_" + this.getCustomfieldExampleConditionSql(customfieldQueryCondition)));
			List<Customfield> obj = ((List<Customfield>)(this.getCache().get("CUSTOMFIELD", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldSelectObjects(customfieldQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldSelectObjects(customfieldQueryCondition);
		}
	}
	
	/**
	 * <param name="customfieldQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Customfield> customfieldSelectObjectsWithBLOBs(CustomfieldExample customfieldQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELD")) {
			String key = ("CUSTOMFIELD_" 
						+ ("queryObject_" + this.getCustomfieldExampleConditionSql(customfieldQueryCondition)));
			List<Customfield> obj = ((List<Customfield>)(this.getCache().get("CUSTOMFIELD", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldSelectObjectsWithBLOBs(customfieldQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldSelectObjectsWithBLOBs(customfieldQueryCondition);
		}
	}
	
	/**
	 * <param name="customfieldQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int customfieldQuerySelectObjectsCount(CustomfieldExample customfieldQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELD")) {
			String key = ("CUSTOMFIELD_" 
						+ ("queryCount_" + this.getCustomfieldExampleConditionSql(customfieldQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CUSTOMFIELD", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldQuerySelectObjectsCount(customfieldQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELD", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldQuerySelectObjectsCount(customfieldQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Customfieldoption到数据库中
	 * <param name="customfieldoption">需要插入的新对象</param>
	 */
	public int customfieldoptionInsert(Customfieldoption customfieldoption) throws CacheException {
		int ret = this.getDao().customfieldoptionInsert(customfieldoption);
		if (this.needCache("CUSTOMFIELDOPTION")) {
			this.getCache().clear("CUSTOMFIELDOPTION");
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldoption.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "插入", "ID", kvalue, customfieldoption, ret);
		return ret;
	}
	
	/**
	 * <param name="customfieldoption">从数据库中删除一个对象Customfieldoption</param>
	 * <param name="AId"></param>
	 */
	public int customfieldoptionDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().customfieldoptionDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDOPTION")) {
				this.getCache().clear("CUSTOMFIELDOPTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="customfieldoption">从数据库中删除一个对象Customfieldoption</param>
	 */
	public int customfieldoptionDeleteByCondition(CustomfieldoptionExample customfieldoptionQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldoptionDeleteByCondition(customfieldoptionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDOPTION")) {
				this.getCache().clear("CUSTOMFIELDOPTION");
			}
		}
		String kvalue = this.getCustomfieldoptionExampleConditionSql(customfieldoptionQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "条件删除", "conditionSql", kvalue, customfieldoptionQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Customfieldoption到数据库中
	 * <param name="customfieldoption">需要更新的Customfieldoption</param>
	 */
	public int customfieldoptionUpdate(Customfieldoption customfieldoption) throws CacheException {
		int ret = this.getDao().customfieldoptionUpdate(customfieldoption);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDOPTION")) {
				this.getCache().clear("CUSTOMFIELDOPTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldoption.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "更新", "ID", kvalue, customfieldoption, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Customfieldoption到数据库中
	 * <param name="customfieldoption">需要更新的Customfieldoption</param>
	 */
	public int customfieldoptionUpdateSelective(Customfieldoption customfieldoption) throws CacheException {
		int ret = this.getDao().customfieldoptionUpdateSelective(customfieldoption);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDOPTION")) {
				this.getCache().clear("CUSTOMFIELDOPTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldoption.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "部分更新", "ID", kvalue, customfieldoption, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Customfieldoption到数据库中
	 * <param name="customfieldoptionQueryCondition">附加的条件</param>
	 * <param name="customfieldoption">需要更新的Customfieldoption</param>
	 */
	public int customfieldoptionUpdateByCondition(Customfieldoption customfieldoption, CustomfieldoptionExample customfieldoptionQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldoptionUpdateByCondition(customfieldoption, customfieldoptionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDOPTION")) {
				this.getCache().clear("CUSTOMFIELDOPTION");
			}
		}
		String kvalue = this.getCustomfieldoptionExampleConditionSql(customfieldoptionQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "条件更新", "conditionSql", kvalue, customfieldoption, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Customfieldoption到数据库中
	 * <param name="customfieldoptionQueryCondition">附加的条件</param>
	 * <param name="customfieldoption">需要更新的Customfieldoption</param>
	 */
	public int customfieldoptionUpdateSelectiveByCondition(Customfieldoption customfieldoption, CustomfieldoptionExample customfieldoptionQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldoptionUpdateSelectiveByCondition(customfieldoption, customfieldoptionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDOPTION")) {
				this.getCache().clear("CUSTOMFIELDOPTION");
			}
		}
		String kvalue = this.getCustomfieldoptionExampleConditionSql(customfieldoptionQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELDOPTION", "批量部分更新", "conditionSql", kvalue, customfieldoption, ret);
		return ret;
	}
	
	public String getCustomfieldoptionExampleConditionSql(CustomfieldoptionExample customfieldoptionQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < customfieldoptionQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CustomfieldoptionExample.Criteria item = customfieldoptionQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CustomfieldoptionExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="customfieldoption">从数据库中查询一个对象Customfieldoption</param>
	 * <param name="AId"></param>
	 */
	public Customfieldoption customfieldoptionSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CUSTOMFIELDOPTION")) {
			String key = ("CUSTOMFIELDOPTION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Customfieldoption obj = ((Customfieldoption)(this.getCache().get("CUSTOMFIELDOPTION", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldoptionSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDOPTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldoptionSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="customfieldoptionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Customfieldoption> customfieldoptionSelectObjects(CustomfieldoptionExample customfieldoptionQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELDOPTION")) {
			String key = ("CUSTOMFIELDOPTION_" 
						+ ("queryObject_" + this.getCustomfieldoptionExampleConditionSql(customfieldoptionQueryCondition)));
			List<Customfieldoption> obj = ((List<Customfieldoption>)(this.getCache().get("CUSTOMFIELDOPTION", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldoptionSelectObjects(customfieldoptionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDOPTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldoptionSelectObjects(customfieldoptionQueryCondition);
		}
	}
	
	/**
	 * <param name="customfieldoptionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int customfieldoptionQuerySelectObjectsCount(CustomfieldoptionExample customfieldoptionQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELDOPTION")) {
			String key = ("CUSTOMFIELDOPTION_" 
						+ ("queryCount_" + this.getCustomfieldoptionExampleConditionSql(customfieldoptionQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CUSTOMFIELDOPTION", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldoptionQuerySelectObjectsCount(customfieldoptionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDOPTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldoptionQuerySelectObjectsCount(customfieldoptionQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Customfieldvalue到数据库中
	 * <param name="customfieldvalue">需要插入的新对象</param>
	 */
	public int customfieldvalueInsert(Customfieldvalue customfieldvalue) throws CacheException {
		int ret = this.getDao().customfieldvalueInsert(customfieldvalue);
		if (this.needCache("CUSTOMFIELDVALUE")) {
			this.getCache().clear("CUSTOMFIELDVALUE");
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldvalue.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "插入", "ID", kvalue, customfieldvalue, ret);
		return ret;
	}
	
	/**
	 * <param name="customfieldvalue">从数据库中删除一个对象Customfieldvalue</param>
	 * <param name="AId"></param>
	 */
	public int customfieldvalueDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().customfieldvalueDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="customfieldvalue">从数据库中删除一个对象Customfieldvalue</param>
	 */
	public int customfieldvalueDeleteByCondition(CustomfieldvalueExample customfieldvalueQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldvalueDeleteByCondition(customfieldvalueQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = this.getCustomfieldvalueExampleConditionSql(customfieldvalueQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "条件删除", "conditionSql", kvalue, customfieldvalueQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Customfieldvalue到数据库中
	 * <param name="customfieldvalue">需要更新的Customfieldvalue</param>
	 */
	public int customfieldvalueUpdate(Customfieldvalue customfieldvalue) throws CacheException {
		int ret = this.getDao().customfieldvalueUpdate(customfieldvalue);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldvalue.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "更新", "ID", kvalue, customfieldvalue, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Customfieldvalue到数据库中
	 * <param name="customfieldvalue">需要更新的Customfieldvalue</param>
	 */
	public int customfieldvalueUpdateSelective(Customfieldvalue customfieldvalue) throws CacheException {
		int ret = this.getDao().customfieldvalueUpdateSelective(customfieldvalue);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldvalue.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "部分更新", "ID", kvalue, customfieldvalue, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Customfieldvalue到数据库中
	 * <param name="customfieldvalue">需要更新的Customfieldvalue</param>
	 */
	public int customfieldvalueUpdateWithBlobs(Customfieldvalue customfieldvalue) throws CacheException {
		int ret = this.getDao().customfieldvalueUpdateWithBlobs(customfieldvalue);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + customfieldvalue.getId());
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "更新含Blob", "ID", kvalue, customfieldvalue, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Customfieldvalue到数据库中
	 * <param name="customfieldvalueQueryCondition">附加的条件</param>
	 * <param name="customfieldvalue">需要更新的Customfieldvalue</param>
	 */
	public int customfieldvalueUpdateByCondition(Customfieldvalue customfieldvalue, CustomfieldvalueExample customfieldvalueQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldvalueUpdateByCondition(customfieldvalue, customfieldvalueQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = this.getCustomfieldvalueExampleConditionSql(customfieldvalueQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "条件更新", "conditionSql", kvalue, customfieldvalue, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Customfieldvalue到数据库中
	 * <param name="customfieldvalueQueryCondition">附加的条件</param>
	 * <param name="customfieldvalue">需要更新的Customfieldvalue</param>
	 */
	public int customfieldvalueUpdateSelectiveByCondition(Customfieldvalue customfieldvalue, CustomfieldvalueExample customfieldvalueQueryCondition) throws CacheException {
		int ret = this.getDao().customfieldvalueUpdateSelectiveByCondition(customfieldvalue, customfieldvalueQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CUSTOMFIELDVALUE")) {
				this.getCache().clear("CUSTOMFIELDVALUE");
			}
		}
		String kvalue = this.getCustomfieldvalueExampleConditionSql(customfieldvalueQueryCondition);
		this.operatesLogSimpleAdd("CUSTOMFIELDVALUE", "批量部分更新", "conditionSql", kvalue, customfieldvalue, ret);
		return ret;
	}
	
	public String getCustomfieldvalueExampleConditionSql(CustomfieldvalueExample customfieldvalueQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < customfieldvalueQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CustomfieldvalueExample.Criteria item = customfieldvalueQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CustomfieldvalueExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="customfieldvalue">从数据库中查询一个对象Customfieldvalue</param>
	 * <param name="AId"></param>
	 */
	public Customfieldvalue customfieldvalueSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CUSTOMFIELDVALUE")) {
			String key = ("CUSTOMFIELDVALUE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Customfieldvalue obj = ((Customfieldvalue)(this.getCache().get("CUSTOMFIELDVALUE", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldvalueSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDVALUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldvalueSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="customfieldvalueQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Customfieldvalue> customfieldvalueSelectObjects(CustomfieldvalueExample customfieldvalueQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELDVALUE")) {
			String key = ("CUSTOMFIELDVALUE_" 
						+ ("queryObject_" + this.getCustomfieldvalueExampleConditionSql(customfieldvalueQueryCondition)));
			List<Customfieldvalue> obj = ((List<Customfieldvalue>)(this.getCache().get("CUSTOMFIELDVALUE", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldvalueSelectObjects(customfieldvalueQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDVALUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldvalueSelectObjects(customfieldvalueQueryCondition);
		}
	}
	
	/**
	 * <param name="customfieldvalueQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Customfieldvalue> customfieldvalueSelectObjectsWithBLOBs(CustomfieldvalueExample customfieldvalueQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELDVALUE")) {
			String key = ("CUSTOMFIELDVALUE_" 
						+ ("queryObject_" + this.getCustomfieldvalueExampleConditionSql(customfieldvalueQueryCondition)));
			List<Customfieldvalue> obj = ((List<Customfieldvalue>)(this.getCache().get("CUSTOMFIELDVALUE", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldvalueSelectObjectsWithBLOBs(customfieldvalueQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDVALUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldvalueSelectObjectsWithBLOBs(customfieldvalueQueryCondition);
		}
	}
	
	/**
	 * <param name="customfieldvalueQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int customfieldvalueQuerySelectObjectsCount(CustomfieldvalueExample customfieldvalueQueryCondition) throws CacheException {
		if (this.needCache("CUSTOMFIELDVALUE")) {
			String key = ("CUSTOMFIELDVALUE_" 
						+ ("queryCount_" + this.getCustomfieldvalueExampleConditionSql(customfieldvalueQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CUSTOMFIELDVALUE", key)));
			if ((obj == null)) {
				obj = this.getDao().customfieldvalueQuerySelectObjectsCount(customfieldvalueQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CUSTOMFIELDVALUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().customfieldvalueQuerySelectObjectsCount(customfieldvalueQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdApplication到数据库中
	 * <param name="cwdApplication">需要插入的新对象</param>
	 */
	public int cwdApplicationInsert(CwdApplication cwdApplication) throws CacheException {
		int ret = this.getDao().cwdApplicationInsert(cwdApplication);
		if (this.needCache("CWD_APPLICATION")) {
			this.getCache().clear("CWD_APPLICATION");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdApplication.getId());
		this.operatesLogSimpleAdd("CWD_APPLICATION", "插入", "ID", kvalue, cwdApplication, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdApplication">从数据库中删除一个对象CwdApplication</param>
	 * <param name="AId"></param>
	 */
	public int cwdApplicationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdApplicationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION")) {
				this.getCache().clear("CWD_APPLICATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_APPLICATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdApplication">从数据库中删除一个对象CwdApplication</param>
	 */
	public int cwdApplicationDeleteByCondition(CwdApplicationExample cwdApplicationQueryCondition) throws CacheException {
		int ret = this.getDao().cwdApplicationDeleteByCondition(cwdApplicationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION")) {
				this.getCache().clear("CWD_APPLICATION");
			}
		}
		String kvalue = this.getCwdApplicationExampleConditionSql(cwdApplicationQueryCondition);
		this.operatesLogSimpleAdd("CWD_APPLICATION", "条件删除", "conditionSql", kvalue, cwdApplicationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdApplication到数据库中
	 * <param name="cwdApplication">需要更新的CwdApplication</param>
	 */
	public int cwdApplicationUpdate(CwdApplication cwdApplication) throws CacheException {
		int ret = this.getDao().cwdApplicationUpdate(cwdApplication);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION")) {
				this.getCache().clear("CWD_APPLICATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdApplication.getId());
		this.operatesLogSimpleAdd("CWD_APPLICATION", "更新", "ID", kvalue, cwdApplication, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdApplication到数据库中
	 * <param name="cwdApplication">需要更新的CwdApplication</param>
	 */
	public int cwdApplicationUpdateSelective(CwdApplication cwdApplication) throws CacheException {
		int ret = this.getDao().cwdApplicationUpdateSelective(cwdApplication);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION")) {
				this.getCache().clear("CWD_APPLICATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdApplication.getId());
		this.operatesLogSimpleAdd("CWD_APPLICATION", "部分更新", "ID", kvalue, cwdApplication, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdApplication到数据库中
	 * <param name="cwdApplicationQueryCondition">附加的条件</param>
	 * <param name="cwdApplication">需要更新的CwdApplication</param>
	 */
	public int cwdApplicationUpdateByCondition(CwdApplication cwdApplication, CwdApplicationExample cwdApplicationQueryCondition) throws CacheException {
		int ret = this.getDao().cwdApplicationUpdateByCondition(cwdApplication, cwdApplicationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION")) {
				this.getCache().clear("CWD_APPLICATION");
			}
		}
		String kvalue = this.getCwdApplicationExampleConditionSql(cwdApplicationQueryCondition);
		this.operatesLogSimpleAdd("CWD_APPLICATION", "条件更新", "conditionSql", kvalue, cwdApplication, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdApplication到数据库中
	 * <param name="cwdApplicationQueryCondition">附加的条件</param>
	 * <param name="cwdApplication">需要更新的CwdApplication</param>
	 */
	public int cwdApplicationUpdateSelectiveByCondition(CwdApplication cwdApplication, CwdApplicationExample cwdApplicationQueryCondition) throws CacheException {
		int ret = this.getDao().cwdApplicationUpdateSelectiveByCondition(cwdApplication, cwdApplicationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION")) {
				this.getCache().clear("CWD_APPLICATION");
			}
		}
		String kvalue = this.getCwdApplicationExampleConditionSql(cwdApplicationQueryCondition);
		this.operatesLogSimpleAdd("CWD_APPLICATION", "批量部分更新", "conditionSql", kvalue, cwdApplication, ret);
		return ret;
	}
	
	public String getCwdApplicationExampleConditionSql(CwdApplicationExample cwdApplicationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdApplicationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdApplicationExample.Criteria item = cwdApplicationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdApplicationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdApplication">从数据库中查询一个对象CwdApplication</param>
	 * <param name="AId"></param>
	 */
	public CwdApplication cwdApplicationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_APPLICATION")) {
			String key = ("CWD_APPLICATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdApplication obj = ((CwdApplication)(this.getCache().get("CWD_APPLICATION", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdApplicationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_APPLICATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdApplicationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdApplicationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdApplication> cwdApplicationSelectObjects(CwdApplicationExample cwdApplicationQueryCondition) throws CacheException {
		if (this.needCache("CWD_APPLICATION")) {
			String key = ("CWD_APPLICATION_" 
						+ ("queryObject_" + this.getCwdApplicationExampleConditionSql(cwdApplicationQueryCondition)));
			List<CwdApplication> obj = ((List<CwdApplication>)(this.getCache().get("CWD_APPLICATION", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdApplicationSelectObjects(cwdApplicationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_APPLICATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdApplicationSelectObjects(cwdApplicationQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdApplicationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdApplicationQuerySelectObjectsCount(CwdApplicationExample cwdApplicationQueryCondition) throws CacheException {
		if (this.needCache("CWD_APPLICATION")) {
			String key = ("CWD_APPLICATION_" 
						+ ("queryCount_" + this.getCwdApplicationExampleConditionSql(cwdApplicationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_APPLICATION", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdApplicationQuerySelectObjectsCount(cwdApplicationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_APPLICATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdApplicationQuerySelectObjectsCount(cwdApplicationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdApplicationAddress到数据库中
	 * <param name="cwdApplicationAddress">需要插入的新对象</param>
	 */
	public int cwdApplicationAddressInsert(CwdApplicationAddress cwdApplicationAddress) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressInsert(cwdApplicationAddress);
		if (this.needCache("CWD_APPLICATION_ADDRESS")) {
			this.getCache().clear("CWD_APPLICATION_ADDRESS");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdApplicationAddress.getApplicationId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdApplicationAddress.getRemoteAddress());
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "插入", "APPLICATION_ID,REMOTE_ADDRESS", kvalue, cwdApplicationAddress, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdApplicationAddress">从数据库中删除一个对象CwdApplicationAddress</param>
	 * <param name="ACwdApplicationAddressKey"> 主键类</param>
	 */
	public int cwdApplicationAddressDeleteByPrimaryKey(CwdApplicationAddressKey ACwdApplicationAddressKey) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressDeleteByPrimaryKey(ACwdApplicationAddressKey);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION_ADDRESS")) {
				this.getCache().clear("CWD_APPLICATION_ADDRESS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ACwdApplicationAddressKey.getApplicationId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ACwdApplicationAddressKey.getRemoteAddress());
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "删除", "APPLICATION_ID,REMOTE_ADDRESS", kvalue, ACwdApplicationAddressKey, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdApplicationAddress">从数据库中删除一个对象CwdApplicationAddress</param>
	 */
	public int cwdApplicationAddressDeleteByCondition(CwdApplicationAddressExample cwdApplicationAddressQueryCondition) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressDeleteByCondition(cwdApplicationAddressQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION_ADDRESS")) {
				this.getCache().clear("CWD_APPLICATION_ADDRESS");
			}
		}
		String kvalue = this.getCwdApplicationAddressExampleConditionSql(cwdApplicationAddressQueryCondition);
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "条件删除", "conditionSql", kvalue, cwdApplicationAddressQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdApplicationAddress到数据库中
	 * <param name="cwdApplicationAddress">需要更新的CwdApplicationAddress</param>
	 */
	public int cwdApplicationAddressUpdate(CwdApplicationAddress cwdApplicationAddress) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressUpdate(cwdApplicationAddress);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION_ADDRESS")) {
				this.getCache().clear("CWD_APPLICATION_ADDRESS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdApplicationAddress.getApplicationId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdApplicationAddress.getRemoteAddress());
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "更新", "APPLICATION_ID,REMOTE_ADDRESS", kvalue, cwdApplicationAddress, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdApplicationAddress到数据库中
	 * <param name="cwdApplicationAddress">需要更新的CwdApplicationAddress</param>
	 */
	public int cwdApplicationAddressUpdateSelective(CwdApplicationAddress cwdApplicationAddress) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressUpdateSelective(cwdApplicationAddress);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION_ADDRESS")) {
				this.getCache().clear("CWD_APPLICATION_ADDRESS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdApplicationAddress.getApplicationId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdApplicationAddress.getRemoteAddress());
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "部分更新", "APPLICATION_ID,REMOTE_ADDRESS", kvalue, cwdApplicationAddress, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdApplicationAddress到数据库中
	 * <param name="cwdApplicationAddressQueryCondition">附加的条件</param>
	 * <param name="cwdApplicationAddress">需要更新的CwdApplicationAddress</param>
	 */
	public int cwdApplicationAddressUpdateByCondition(CwdApplicationAddress cwdApplicationAddress, CwdApplicationAddressExample cwdApplicationAddressQueryCondition) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressUpdateByCondition(cwdApplicationAddress, cwdApplicationAddressQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION_ADDRESS")) {
				this.getCache().clear("CWD_APPLICATION_ADDRESS");
			}
		}
		String kvalue = this.getCwdApplicationAddressExampleConditionSql(cwdApplicationAddressQueryCondition);
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "条件更新", "conditionSql", kvalue, cwdApplicationAddress, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdApplicationAddress到数据库中
	 * <param name="cwdApplicationAddressQueryCondition">附加的条件</param>
	 * <param name="cwdApplicationAddress">需要更新的CwdApplicationAddress</param>
	 */
	public int cwdApplicationAddressUpdateSelectiveByCondition(CwdApplicationAddress cwdApplicationAddress, CwdApplicationAddressExample cwdApplicationAddressQueryCondition) throws CacheException {
		int ret = this.getDao().cwdApplicationAddressUpdateSelectiveByCondition(cwdApplicationAddress, cwdApplicationAddressQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_APPLICATION_ADDRESS")) {
				this.getCache().clear("CWD_APPLICATION_ADDRESS");
			}
		}
		String kvalue = this.getCwdApplicationAddressExampleConditionSql(cwdApplicationAddressQueryCondition);
		this.operatesLogSimpleAdd("CWD_APPLICATION_ADDRESS", "批量部分更新", "conditionSql", kvalue, cwdApplicationAddress, ret);
		return ret;
	}
	
	public String getCwdApplicationAddressExampleConditionSql(CwdApplicationAddressExample cwdApplicationAddressQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdApplicationAddressQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdApplicationAddressExample.Criteria item = cwdApplicationAddressQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdApplicationAddressExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdApplicationAddress">从数据库中查询一个对象CwdApplicationAddress</param>
	 * <param name="ACwdApplicationAddressKey"> 主键类</param>
	 */
	public CwdApplicationAddress cwdApplicationAddressSelectByPrimaryKey(CwdApplicationAddressKey ACwdApplicationAddressKey) throws CacheException {
		if (this.needCache("CWD_APPLICATION_ADDRESS")) {
			String key = ("CWD_APPLICATION_ADDRESS_" + "_BYUNIINDEX_");
			CwdApplicationAddress obj = ((CwdApplicationAddress)(this.getCache().get("CWD_APPLICATION_ADDRESS", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdApplicationAddressSelectByPrimaryKey(ACwdApplicationAddressKey);
				if ((obj != null)) {
					this.getCache().put("CWD_APPLICATION_ADDRESS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdApplicationAddressSelectByPrimaryKey(ACwdApplicationAddressKey);
		}
	}
	
	/**
	 * <param name="cwdApplicationAddressQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdApplicationAddress> cwdApplicationAddressSelectObjects(CwdApplicationAddressExample cwdApplicationAddressQueryCondition) throws CacheException {
		if (this.needCache("CWD_APPLICATION_ADDRESS")) {
			String key = ("CWD_APPLICATION_ADDRESS_" 
						+ ("queryObject_" + this.getCwdApplicationAddressExampleConditionSql(cwdApplicationAddressQueryCondition)));
			List<CwdApplicationAddress> obj = ((List<CwdApplicationAddress>)(this.getCache().get("CWD_APPLICATION_ADDRESS", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdApplicationAddressSelectObjects(cwdApplicationAddressQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_APPLICATION_ADDRESS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdApplicationAddressSelectObjects(cwdApplicationAddressQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdApplicationAddressQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdApplicationAddressQuerySelectObjectsCount(CwdApplicationAddressExample cwdApplicationAddressQueryCondition) throws CacheException {
		if (this.needCache("CWD_APPLICATION_ADDRESS")) {
			String key = ("CWD_APPLICATION_ADDRESS_" 
						+ ("queryCount_" + this.getCwdApplicationAddressExampleConditionSql(cwdApplicationAddressQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_APPLICATION_ADDRESS", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdApplicationAddressQuerySelectObjectsCount(cwdApplicationAddressQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_APPLICATION_ADDRESS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdApplicationAddressQuerySelectObjectsCount(cwdApplicationAddressQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdDirectory到数据库中
	 * <param name="cwdDirectory">需要插入的新对象</param>
	 */
	public int cwdDirectoryInsert(CwdDirectory cwdDirectory) throws CacheException {
		int ret = this.getDao().cwdDirectoryInsert(cwdDirectory);
		if (this.needCache("CWD_DIRECTORY")) {
			this.getCache().clear("CWD_DIRECTORY");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectory.getId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "插入", "ID", kvalue, cwdDirectory, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdDirectory">从数据库中删除一个对象CwdDirectory</param>
	 * <param name="AId"></param>
	 */
	public int cwdDirectoryDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdDirectoryDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY")) {
				this.getCache().clear("CWD_DIRECTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdDirectory">从数据库中删除一个对象CwdDirectory</param>
	 */
	public int cwdDirectoryDeleteByCondition(CwdDirectoryExample cwdDirectoryQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryDeleteByCondition(cwdDirectoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY")) {
				this.getCache().clear("CWD_DIRECTORY");
			}
		}
		String kvalue = this.getCwdDirectoryExampleConditionSql(cwdDirectoryQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "条件删除", "conditionSql", kvalue, cwdDirectoryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdDirectory到数据库中
	 * <param name="cwdDirectory">需要更新的CwdDirectory</param>
	 */
	public int cwdDirectoryUpdate(CwdDirectory cwdDirectory) throws CacheException {
		int ret = this.getDao().cwdDirectoryUpdate(cwdDirectory);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY")) {
				this.getCache().clear("CWD_DIRECTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectory.getId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "更新", "ID", kvalue, cwdDirectory, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdDirectory到数据库中
	 * <param name="cwdDirectory">需要更新的CwdDirectory</param>
	 */
	public int cwdDirectoryUpdateSelective(CwdDirectory cwdDirectory) throws CacheException {
		int ret = this.getDao().cwdDirectoryUpdateSelective(cwdDirectory);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY")) {
				this.getCache().clear("CWD_DIRECTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectory.getId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "部分更新", "ID", kvalue, cwdDirectory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdDirectory到数据库中
	 * <param name="cwdDirectoryQueryCondition">附加的条件</param>
	 * <param name="cwdDirectory">需要更新的CwdDirectory</param>
	 */
	public int cwdDirectoryUpdateByCondition(CwdDirectory cwdDirectory, CwdDirectoryExample cwdDirectoryQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryUpdateByCondition(cwdDirectory, cwdDirectoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY")) {
				this.getCache().clear("CWD_DIRECTORY");
			}
		}
		String kvalue = this.getCwdDirectoryExampleConditionSql(cwdDirectoryQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "条件更新", "conditionSql", kvalue, cwdDirectory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdDirectory到数据库中
	 * <param name="cwdDirectoryQueryCondition">附加的条件</param>
	 * <param name="cwdDirectory">需要更新的CwdDirectory</param>
	 */
	public int cwdDirectoryUpdateSelectiveByCondition(CwdDirectory cwdDirectory, CwdDirectoryExample cwdDirectoryQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryUpdateSelectiveByCondition(cwdDirectory, cwdDirectoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY")) {
				this.getCache().clear("CWD_DIRECTORY");
			}
		}
		String kvalue = this.getCwdDirectoryExampleConditionSql(cwdDirectoryQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY", "批量部分更新", "conditionSql", kvalue, cwdDirectory, ret);
		return ret;
	}
	
	public String getCwdDirectoryExampleConditionSql(CwdDirectoryExample cwdDirectoryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdDirectoryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdDirectoryExample.Criteria item = cwdDirectoryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdDirectoryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdDirectory">从数据库中查询一个对象CwdDirectory</param>
	 * <param name="AId"></param>
	 */
	public CwdDirectory cwdDirectorySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_DIRECTORY")) {
			String key = ("CWD_DIRECTORY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdDirectory obj = ((CwdDirectory)(this.getCache().get("CWD_DIRECTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectorySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectorySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdDirectoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdDirectory> cwdDirectorySelectObjects(CwdDirectoryExample cwdDirectoryQueryCondition) throws CacheException {
		if (this.needCache("CWD_DIRECTORY")) {
			String key = ("CWD_DIRECTORY_" 
						+ ("queryObject_" + this.getCwdDirectoryExampleConditionSql(cwdDirectoryQueryCondition)));
			List<CwdDirectory> obj = ((List<CwdDirectory>)(this.getCache().get("CWD_DIRECTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectorySelectObjects(cwdDirectoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectorySelectObjects(cwdDirectoryQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdDirectoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdDirectoryQuerySelectObjectsCount(CwdDirectoryExample cwdDirectoryQueryCondition) throws CacheException {
		if (this.needCache("CWD_DIRECTORY")) {
			String key = ("CWD_DIRECTORY_" 
						+ ("queryCount_" + this.getCwdDirectoryExampleConditionSql(cwdDirectoryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_DIRECTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectoryQuerySelectObjectsCount(cwdDirectoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectoryQuerySelectObjectsCount(cwdDirectoryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdDirectoryAttribute到数据库中
	 * <param name="cwdDirectoryAttribute">需要插入的新对象</param>
	 */
	public int cwdDirectoryAttributeInsert(CwdDirectoryAttribute cwdDirectoryAttribute) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeInsert(cwdDirectoryAttribute);
		if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
			this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectoryAttribute.getAttributeName());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdDirectoryAttribute.getDirectoryId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "插入", "ATTRIBUTE_NAME,DIRECTORY_ID", kvalue, cwdDirectoryAttribute, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdDirectoryAttribute">从数据库中删除一个对象CwdDirectoryAttribute</param>
	 * <param name="ACwdDirectoryAttributeKey"> 主键类</param>
	 */
	public int cwdDirectoryAttributeDeleteByPrimaryKey(CwdDirectoryAttributeKey ACwdDirectoryAttributeKey) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeDeleteByPrimaryKey(ACwdDirectoryAttributeKey);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
				this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ACwdDirectoryAttributeKey.getAttributeName());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ACwdDirectoryAttributeKey.getDirectoryId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "删除", "ATTRIBUTE_NAME,DIRECTORY_ID", kvalue, ACwdDirectoryAttributeKey, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdDirectoryAttribute">从数据库中删除一个对象CwdDirectoryAttribute</param>
	 */
	public int cwdDirectoryAttributeDeleteByCondition(CwdDirectoryAttributeExample cwdDirectoryAttributeQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeDeleteByCondition(cwdDirectoryAttributeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
				this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
			}
		}
		String kvalue = this.getCwdDirectoryAttributeExampleConditionSql(cwdDirectoryAttributeQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "条件删除", "conditionSql", kvalue, cwdDirectoryAttributeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdDirectoryAttribute到数据库中
	 * <param name="cwdDirectoryAttribute">需要更新的CwdDirectoryAttribute</param>
	 */
	public int cwdDirectoryAttributeUpdate(CwdDirectoryAttribute cwdDirectoryAttribute) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeUpdate(cwdDirectoryAttribute);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
				this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectoryAttribute.getAttributeName());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdDirectoryAttribute.getDirectoryId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "更新", "ATTRIBUTE_NAME,DIRECTORY_ID", kvalue, cwdDirectoryAttribute, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdDirectoryAttribute到数据库中
	 * <param name="cwdDirectoryAttribute">需要更新的CwdDirectoryAttribute</param>
	 */
	public int cwdDirectoryAttributeUpdateSelective(CwdDirectoryAttribute cwdDirectoryAttribute) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeUpdateSelective(cwdDirectoryAttribute);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
				this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectoryAttribute.getAttributeName());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdDirectoryAttribute.getDirectoryId());
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "部分更新", "ATTRIBUTE_NAME,DIRECTORY_ID", kvalue, cwdDirectoryAttribute, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdDirectoryAttribute到数据库中
	 * <param name="cwdDirectoryAttributeQueryCondition">附加的条件</param>
	 * <param name="cwdDirectoryAttribute">需要更新的CwdDirectoryAttribute</param>
	 */
	public int cwdDirectoryAttributeUpdateByCondition(CwdDirectoryAttribute cwdDirectoryAttribute, CwdDirectoryAttributeExample cwdDirectoryAttributeQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeUpdateByCondition(cwdDirectoryAttribute, cwdDirectoryAttributeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
				this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
			}
		}
		String kvalue = this.getCwdDirectoryAttributeExampleConditionSql(cwdDirectoryAttributeQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "条件更新", "conditionSql", kvalue, cwdDirectoryAttribute, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdDirectoryAttribute到数据库中
	 * <param name="cwdDirectoryAttributeQueryCondition">附加的条件</param>
	 * <param name="cwdDirectoryAttribute">需要更新的CwdDirectoryAttribute</param>
	 */
	public int cwdDirectoryAttributeUpdateSelectiveByCondition(CwdDirectoryAttribute cwdDirectoryAttribute, CwdDirectoryAttributeExample cwdDirectoryAttributeQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryAttributeUpdateSelectiveByCondition(cwdDirectoryAttribute, cwdDirectoryAttributeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
				this.getCache().clear("CWD_DIRECTORY_ATTRIBUTE");
			}
		}
		String kvalue = this.getCwdDirectoryAttributeExampleConditionSql(cwdDirectoryAttributeQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY_ATTRIBUTE", "批量部分更新", "conditionSql", kvalue, cwdDirectoryAttribute, ret);
		return ret;
	}
	
	public String getCwdDirectoryAttributeExampleConditionSql(CwdDirectoryAttributeExample cwdDirectoryAttributeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdDirectoryAttributeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdDirectoryAttributeExample.Criteria item = cwdDirectoryAttributeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdDirectoryAttributeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdDirectoryAttribute">从数据库中查询一个对象CwdDirectoryAttribute</param>
	 * <param name="ACwdDirectoryAttributeKey"> 主键类</param>
	 */
	public CwdDirectoryAttribute cwdDirectoryAttributeSelectByPrimaryKey(CwdDirectoryAttributeKey ACwdDirectoryAttributeKey) throws CacheException {
		if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
			String key = ("CWD_DIRECTORY_ATTRIBUTE_" + "_BYUNIINDEX_");
			CwdDirectoryAttribute obj = ((CwdDirectoryAttribute)(this.getCache().get("CWD_DIRECTORY_ATTRIBUTE", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectoryAttributeSelectByPrimaryKey(ACwdDirectoryAttributeKey);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY_ATTRIBUTE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectoryAttributeSelectByPrimaryKey(ACwdDirectoryAttributeKey);
		}
	}
	
	/**
	 * <param name="cwdDirectoryAttributeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdDirectoryAttribute> cwdDirectoryAttributeSelectObjects(CwdDirectoryAttributeExample cwdDirectoryAttributeQueryCondition) throws CacheException {
		if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
			String key = ("CWD_DIRECTORY_ATTRIBUTE_" 
						+ ("queryObject_" + this.getCwdDirectoryAttributeExampleConditionSql(cwdDirectoryAttributeQueryCondition)));
			List<CwdDirectoryAttribute> obj = ((List<CwdDirectoryAttribute>)(this.getCache().get("CWD_DIRECTORY_ATTRIBUTE", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectoryAttributeSelectObjects(cwdDirectoryAttributeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY_ATTRIBUTE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectoryAttributeSelectObjects(cwdDirectoryAttributeQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdDirectoryAttributeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdDirectoryAttributeQuerySelectObjectsCount(CwdDirectoryAttributeExample cwdDirectoryAttributeQueryCondition) throws CacheException {
		if (this.needCache("CWD_DIRECTORY_ATTRIBUTE")) {
			String key = ("CWD_DIRECTORY_ATTRIBUTE_" 
						+ ("queryCount_" + this.getCwdDirectoryAttributeExampleConditionSql(cwdDirectoryAttributeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_DIRECTORY_ATTRIBUTE", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectoryAttributeQuerySelectObjectsCount(cwdDirectoryAttributeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY_ATTRIBUTE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectoryAttributeQuerySelectObjectsCount(cwdDirectoryAttributeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdDirectoryOperation到数据库中
	 * <param name="cwdDirectoryOperation">需要插入的新对象</param>
	 */
	public int cwdDirectoryOperationInsert(CwdDirectoryOperationKey cwdDirectoryOperation) throws CacheException {
		int ret = this.getDao().cwdDirectoryOperationInsert(cwdDirectoryOperation);
		if (this.needCache("CWD_DIRECTORY_OPERATION")) {
			this.getCache().clear("CWD_DIRECTORY_OPERATION");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdDirectoryOperation.getDirectoryId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + cwdDirectoryOperation.getOperationType());
		this.operatesLogSimpleAdd("CWD_DIRECTORY_OPERATION", "插入", "DIRECTORY_ID,OPERATION_TYPE", kvalue, cwdDirectoryOperation, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdDirectoryOperation">从数据库中删除一个对象CwdDirectoryOperation</param>
	 * <param name="ACwdDirectoryOperationKey"> 主键类</param>
	 */
	public int cwdDirectoryOperationDeleteByPrimaryKey(CwdDirectoryOperationKey ACwdDirectoryOperationKey) throws CacheException {
		int ret = this.getDao().cwdDirectoryOperationDeleteByPrimaryKey(ACwdDirectoryOperationKey);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_OPERATION")) {
				this.getCache().clear("CWD_DIRECTORY_OPERATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ACwdDirectoryOperationKey.getDirectoryId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ACwdDirectoryOperationKey.getOperationType());
		this.operatesLogSimpleAdd("CWD_DIRECTORY_OPERATION", "删除", "DIRECTORY_ID,OPERATION_TYPE", kvalue, ACwdDirectoryOperationKey, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdDirectoryOperation">从数据库中删除一个对象CwdDirectoryOperation</param>
	 */
	public int cwdDirectoryOperationDeleteByCondition(CwdDirectoryOperationExample cwdDirectoryOperationQueryCondition) throws CacheException {
		int ret = this.getDao().cwdDirectoryOperationDeleteByCondition(cwdDirectoryOperationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_DIRECTORY_OPERATION")) {
				this.getCache().clear("CWD_DIRECTORY_OPERATION");
			}
		}
		String kvalue = this.getCwdDirectoryOperationExampleConditionSql(cwdDirectoryOperationQueryCondition);
		this.operatesLogSimpleAdd("CWD_DIRECTORY_OPERATION", "条件删除", "conditionSql", kvalue, cwdDirectoryOperationQueryCondition, ret);
		return ret;
	}
	
	public String getCwdDirectoryOperationExampleConditionSql(CwdDirectoryOperationExample cwdDirectoryOperationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdDirectoryOperationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdDirectoryOperationExample.Criteria item = cwdDirectoryOperationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdDirectoryOperationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdDirectoryOperationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdDirectoryOperationKey> cwdDirectoryOperationSelectObjects(CwdDirectoryOperationExample cwdDirectoryOperationQueryCondition) throws CacheException {
		if (this.needCache("CWD_DIRECTORY_OPERATION")) {
			String key = ("CWD_DIRECTORY_OPERATION_" 
						+ ("queryObject_" + this.getCwdDirectoryOperationExampleConditionSql(cwdDirectoryOperationQueryCondition)));
			List<CwdDirectoryOperationKey> obj = ((List<CwdDirectoryOperationKey>)(this.getCache().get("CWD_DIRECTORY_OPERATION", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectoryOperationSelectObjects(cwdDirectoryOperationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY_OPERATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectoryOperationSelectObjects(cwdDirectoryOperationQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdDirectoryOperationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdDirectoryOperationQuerySelectObjectsCount(CwdDirectoryOperationExample cwdDirectoryOperationQueryCondition) throws CacheException {
		if (this.needCache("CWD_DIRECTORY_OPERATION")) {
			String key = ("CWD_DIRECTORY_OPERATION_" 
						+ ("queryCount_" + this.getCwdDirectoryOperationExampleConditionSql(cwdDirectoryOperationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_DIRECTORY_OPERATION", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdDirectoryOperationQuerySelectObjectsCount(cwdDirectoryOperationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_DIRECTORY_OPERATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdDirectoryOperationQuerySelectObjectsCount(cwdDirectoryOperationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdGroup到数据库中
	 * <param name="cwdGroup">需要插入的新对象</param>
	 */
	public int cwdGroupInsert(CwdGroup cwdGroup) throws CacheException {
		int ret = this.getDao().cwdGroupInsert(cwdGroup);
		if (this.needCache("CWD_GROUP")) {
			this.getCache().clear("CWD_GROUP");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdGroup.getId());
		this.operatesLogSimpleAdd("CWD_GROUP", "插入", "ID", kvalue, cwdGroup, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdGroup">从数据库中删除一个对象CwdGroup</param>
	 * <param name="AId"></param>
	 */
	public int cwdGroupDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdGroupDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP")) {
				this.getCache().clear("CWD_GROUP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_GROUP", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdGroup">从数据库中删除一个对象CwdGroup</param>
	 */
	public int cwdGroupDeleteByCondition(CwdGroupExample cwdGroupQueryCondition) throws CacheException {
		int ret = this.getDao().cwdGroupDeleteByCondition(cwdGroupQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP")) {
				this.getCache().clear("CWD_GROUP");
			}
		}
		String kvalue = this.getCwdGroupExampleConditionSql(cwdGroupQueryCondition);
		this.operatesLogSimpleAdd("CWD_GROUP", "条件删除", "conditionSql", kvalue, cwdGroupQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdGroup到数据库中
	 * <param name="cwdGroup">需要更新的CwdGroup</param>
	 */
	public int cwdGroupUpdate(CwdGroup cwdGroup) throws CacheException {
		int ret = this.getDao().cwdGroupUpdate(cwdGroup);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP")) {
				this.getCache().clear("CWD_GROUP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdGroup.getId());
		this.operatesLogSimpleAdd("CWD_GROUP", "更新", "ID", kvalue, cwdGroup, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdGroup到数据库中
	 * <param name="cwdGroup">需要更新的CwdGroup</param>
	 */
	public int cwdGroupUpdateSelective(CwdGroup cwdGroup) throws CacheException {
		int ret = this.getDao().cwdGroupUpdateSelective(cwdGroup);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP")) {
				this.getCache().clear("CWD_GROUP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdGroup.getId());
		this.operatesLogSimpleAdd("CWD_GROUP", "部分更新", "ID", kvalue, cwdGroup, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdGroup到数据库中
	 * <param name="cwdGroupQueryCondition">附加的条件</param>
	 * <param name="cwdGroup">需要更新的CwdGroup</param>
	 */
	public int cwdGroupUpdateByCondition(CwdGroup cwdGroup, CwdGroupExample cwdGroupQueryCondition) throws CacheException {
		int ret = this.getDao().cwdGroupUpdateByCondition(cwdGroup, cwdGroupQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP")) {
				this.getCache().clear("CWD_GROUP");
			}
		}
		String kvalue = this.getCwdGroupExampleConditionSql(cwdGroupQueryCondition);
		this.operatesLogSimpleAdd("CWD_GROUP", "条件更新", "conditionSql", kvalue, cwdGroup, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdGroup到数据库中
	 * <param name="cwdGroupQueryCondition">附加的条件</param>
	 * <param name="cwdGroup">需要更新的CwdGroup</param>
	 */
	public int cwdGroupUpdateSelectiveByCondition(CwdGroup cwdGroup, CwdGroupExample cwdGroupQueryCondition) throws CacheException {
		int ret = this.getDao().cwdGroupUpdateSelectiveByCondition(cwdGroup, cwdGroupQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP")) {
				this.getCache().clear("CWD_GROUP");
			}
		}
		String kvalue = this.getCwdGroupExampleConditionSql(cwdGroupQueryCondition);
		this.operatesLogSimpleAdd("CWD_GROUP", "批量部分更新", "conditionSql", kvalue, cwdGroup, ret);
		return ret;
	}
	
	public String getCwdGroupExampleConditionSql(CwdGroupExample cwdGroupQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdGroupQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdGroupExample.Criteria item = cwdGroupQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdGroupExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdGroup">从数据库中查询一个对象CwdGroup</param>
	 * <param name="AId"></param>
	 */
	public CwdGroup cwdGroupSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_GROUP")) {
			String key = ("CWD_GROUP_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdGroup obj = ((CwdGroup)(this.getCache().get("CWD_GROUP", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdGroupSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_GROUP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdGroupSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdGroupQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdGroup> cwdGroupSelectObjects(CwdGroupExample cwdGroupQueryCondition) throws CacheException {
		if (this.needCache("CWD_GROUP")) {
			String key = ("CWD_GROUP_" 
						+ ("queryObject_" + this.getCwdGroupExampleConditionSql(cwdGroupQueryCondition)));
			List<CwdGroup> obj = ((List<CwdGroup>)(this.getCache().get("CWD_GROUP", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdGroupSelectObjects(cwdGroupQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_GROUP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdGroupSelectObjects(cwdGroupQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdGroupQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdGroupQuerySelectObjectsCount(CwdGroupExample cwdGroupQueryCondition) throws CacheException {
		if (this.needCache("CWD_GROUP")) {
			String key = ("CWD_GROUP_" 
						+ ("queryCount_" + this.getCwdGroupExampleConditionSql(cwdGroupQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_GROUP", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdGroupQuerySelectObjectsCount(cwdGroupQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_GROUP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdGroupQuerySelectObjectsCount(cwdGroupQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdGroupAttributes到数据库中
	 * <param name="cwdGroupAttributes">需要插入的新对象</param>
	 */
	public int cwdGroupAttributesInsert(CwdGroupAttributes cwdGroupAttributes) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesInsert(cwdGroupAttributes);
		if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
			this.getCache().clear("CWD_GROUP_ATTRIBUTES");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdGroupAttributes.getId());
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "插入", "ID", kvalue, cwdGroupAttributes, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdGroupAttributes">从数据库中删除一个对象CwdGroupAttributes</param>
	 * <param name="AId"></param>
	 */
	public int cwdGroupAttributesDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
				this.getCache().clear("CWD_GROUP_ATTRIBUTES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdGroupAttributes">从数据库中删除一个对象CwdGroupAttributes</param>
	 */
	public int cwdGroupAttributesDeleteByCondition(CwdGroupAttributesExample cwdGroupAttributesQueryCondition) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesDeleteByCondition(cwdGroupAttributesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
				this.getCache().clear("CWD_GROUP_ATTRIBUTES");
			}
		}
		String kvalue = this.getCwdGroupAttributesExampleConditionSql(cwdGroupAttributesQueryCondition);
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "条件删除", "conditionSql", kvalue, cwdGroupAttributesQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdGroupAttributes到数据库中
	 * <param name="cwdGroupAttributes">需要更新的CwdGroupAttributes</param>
	 */
	public int cwdGroupAttributesUpdate(CwdGroupAttributes cwdGroupAttributes) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesUpdate(cwdGroupAttributes);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
				this.getCache().clear("CWD_GROUP_ATTRIBUTES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdGroupAttributes.getId());
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "更新", "ID", kvalue, cwdGroupAttributes, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdGroupAttributes到数据库中
	 * <param name="cwdGroupAttributes">需要更新的CwdGroupAttributes</param>
	 */
	public int cwdGroupAttributesUpdateSelective(CwdGroupAttributes cwdGroupAttributes) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesUpdateSelective(cwdGroupAttributes);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
				this.getCache().clear("CWD_GROUP_ATTRIBUTES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdGroupAttributes.getId());
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "部分更新", "ID", kvalue, cwdGroupAttributes, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdGroupAttributes到数据库中
	 * <param name="cwdGroupAttributesQueryCondition">附加的条件</param>
	 * <param name="cwdGroupAttributes">需要更新的CwdGroupAttributes</param>
	 */
	public int cwdGroupAttributesUpdateByCondition(CwdGroupAttributes cwdGroupAttributes, CwdGroupAttributesExample cwdGroupAttributesQueryCondition) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesUpdateByCondition(cwdGroupAttributes, cwdGroupAttributesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
				this.getCache().clear("CWD_GROUP_ATTRIBUTES");
			}
		}
		String kvalue = this.getCwdGroupAttributesExampleConditionSql(cwdGroupAttributesQueryCondition);
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "条件更新", "conditionSql", kvalue, cwdGroupAttributes, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdGroupAttributes到数据库中
	 * <param name="cwdGroupAttributesQueryCondition">附加的条件</param>
	 * <param name="cwdGroupAttributes">需要更新的CwdGroupAttributes</param>
	 */
	public int cwdGroupAttributesUpdateSelectiveByCondition(CwdGroupAttributes cwdGroupAttributes, CwdGroupAttributesExample cwdGroupAttributesQueryCondition) throws CacheException {
		int ret = this.getDao().cwdGroupAttributesUpdateSelectiveByCondition(cwdGroupAttributes, cwdGroupAttributesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
				this.getCache().clear("CWD_GROUP_ATTRIBUTES");
			}
		}
		String kvalue = this.getCwdGroupAttributesExampleConditionSql(cwdGroupAttributesQueryCondition);
		this.operatesLogSimpleAdd("CWD_GROUP_ATTRIBUTES", "批量部分更新", "conditionSql", kvalue, cwdGroupAttributes, ret);
		return ret;
	}
	
	public String getCwdGroupAttributesExampleConditionSql(CwdGroupAttributesExample cwdGroupAttributesQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdGroupAttributesQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdGroupAttributesExample.Criteria item = cwdGroupAttributesQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdGroupAttributesExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdGroupAttributes">从数据库中查询一个对象CwdGroupAttributes</param>
	 * <param name="AId"></param>
	 */
	public CwdGroupAttributes cwdGroupAttributesSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
			String key = ("CWD_GROUP_ATTRIBUTES_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdGroupAttributes obj = ((CwdGroupAttributes)(this.getCache().get("CWD_GROUP_ATTRIBUTES", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdGroupAttributesSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_GROUP_ATTRIBUTES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdGroupAttributesSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdGroupAttributesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdGroupAttributes> cwdGroupAttributesSelectObjects(CwdGroupAttributesExample cwdGroupAttributesQueryCondition) throws CacheException {
		if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
			String key = ("CWD_GROUP_ATTRIBUTES_" 
						+ ("queryObject_" + this.getCwdGroupAttributesExampleConditionSql(cwdGroupAttributesQueryCondition)));
			List<CwdGroupAttributes> obj = ((List<CwdGroupAttributes>)(this.getCache().get("CWD_GROUP_ATTRIBUTES", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdGroupAttributesSelectObjects(cwdGroupAttributesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_GROUP_ATTRIBUTES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdGroupAttributesSelectObjects(cwdGroupAttributesQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdGroupAttributesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdGroupAttributesQuerySelectObjectsCount(CwdGroupAttributesExample cwdGroupAttributesQueryCondition) throws CacheException {
		if (this.needCache("CWD_GROUP_ATTRIBUTES")) {
			String key = ("CWD_GROUP_ATTRIBUTES_" 
						+ ("queryCount_" + this.getCwdGroupAttributesExampleConditionSql(cwdGroupAttributesQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_GROUP_ATTRIBUTES", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdGroupAttributesQuerySelectObjectsCount(cwdGroupAttributesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_GROUP_ATTRIBUTES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdGroupAttributesQuerySelectObjectsCount(cwdGroupAttributesQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdMembership到数据库中
	 * <param name="cwdMembership">需要插入的新对象</param>
	 */
	public int cwdMembershipInsert(CwdMembership cwdMembership) throws CacheException {
		int ret = this.getDao().cwdMembershipInsert(cwdMembership);
		if (this.needCache("CWD_MEMBERSHIP")) {
			this.getCache().clear("CWD_MEMBERSHIP");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdMembership.getId());
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "插入", "ID", kvalue, cwdMembership, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdMembership">从数据库中删除一个对象CwdMembership</param>
	 * <param name="AId"></param>
	 */
	public int cwdMembershipDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdMembershipDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_MEMBERSHIP")) {
				this.getCache().clear("CWD_MEMBERSHIP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdMembership">从数据库中删除一个对象CwdMembership</param>
	 */
	public int cwdMembershipDeleteByCondition(CwdMembershipExample cwdMembershipQueryCondition) throws CacheException {
		int ret = this.getDao().cwdMembershipDeleteByCondition(cwdMembershipQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_MEMBERSHIP")) {
				this.getCache().clear("CWD_MEMBERSHIP");
			}
		}
		String kvalue = this.getCwdMembershipExampleConditionSql(cwdMembershipQueryCondition);
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "条件删除", "conditionSql", kvalue, cwdMembershipQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdMembership到数据库中
	 * <param name="cwdMembership">需要更新的CwdMembership</param>
	 */
	public int cwdMembershipUpdate(CwdMembership cwdMembership) throws CacheException {
		int ret = this.getDao().cwdMembershipUpdate(cwdMembership);
		if ((ret > 0)) {
			if (this.needCache("CWD_MEMBERSHIP")) {
				this.getCache().clear("CWD_MEMBERSHIP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdMembership.getId());
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "更新", "ID", kvalue, cwdMembership, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdMembership到数据库中
	 * <param name="cwdMembership">需要更新的CwdMembership</param>
	 */
	public int cwdMembershipUpdateSelective(CwdMembership cwdMembership) throws CacheException {
		int ret = this.getDao().cwdMembershipUpdateSelective(cwdMembership);
		if ((ret > 0)) {
			if (this.needCache("CWD_MEMBERSHIP")) {
				this.getCache().clear("CWD_MEMBERSHIP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdMembership.getId());
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "部分更新", "ID", kvalue, cwdMembership, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdMembership到数据库中
	 * <param name="cwdMembershipQueryCondition">附加的条件</param>
	 * <param name="cwdMembership">需要更新的CwdMembership</param>
	 */
	public int cwdMembershipUpdateByCondition(CwdMembership cwdMembership, CwdMembershipExample cwdMembershipQueryCondition) throws CacheException {
		int ret = this.getDao().cwdMembershipUpdateByCondition(cwdMembership, cwdMembershipQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_MEMBERSHIP")) {
				this.getCache().clear("CWD_MEMBERSHIP");
			}
		}
		String kvalue = this.getCwdMembershipExampleConditionSql(cwdMembershipQueryCondition);
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "条件更新", "conditionSql", kvalue, cwdMembership, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdMembership到数据库中
	 * <param name="cwdMembershipQueryCondition">附加的条件</param>
	 * <param name="cwdMembership">需要更新的CwdMembership</param>
	 */
	public int cwdMembershipUpdateSelectiveByCondition(CwdMembership cwdMembership, CwdMembershipExample cwdMembershipQueryCondition) throws CacheException {
		int ret = this.getDao().cwdMembershipUpdateSelectiveByCondition(cwdMembership, cwdMembershipQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_MEMBERSHIP")) {
				this.getCache().clear("CWD_MEMBERSHIP");
			}
		}
		String kvalue = this.getCwdMembershipExampleConditionSql(cwdMembershipQueryCondition);
		this.operatesLogSimpleAdd("CWD_MEMBERSHIP", "批量部分更新", "conditionSql", kvalue, cwdMembership, ret);
		return ret;
	}
	
	public String getCwdMembershipExampleConditionSql(CwdMembershipExample cwdMembershipQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdMembershipQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdMembershipExample.Criteria item = cwdMembershipQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdMembershipExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdMembership">从数据库中查询一个对象CwdMembership</param>
	 * <param name="AId"></param>
	 */
	public CwdMembership cwdMembershipSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_MEMBERSHIP")) {
			String key = ("CWD_MEMBERSHIP_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdMembership obj = ((CwdMembership)(this.getCache().get("CWD_MEMBERSHIP", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdMembershipSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_MEMBERSHIP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdMembershipSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdMembershipQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdMembership> cwdMembershipSelectObjects(CwdMembershipExample cwdMembershipQueryCondition) throws CacheException {
		if (this.needCache("CWD_MEMBERSHIP")) {
			String key = ("CWD_MEMBERSHIP_" 
						+ ("queryObject_" + this.getCwdMembershipExampleConditionSql(cwdMembershipQueryCondition)));
			List<CwdMembership> obj = ((List<CwdMembership>)(this.getCache().get("CWD_MEMBERSHIP", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdMembershipSelectObjects(cwdMembershipQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_MEMBERSHIP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdMembershipSelectObjects(cwdMembershipQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdMembershipQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdMembershipQuerySelectObjectsCount(CwdMembershipExample cwdMembershipQueryCondition) throws CacheException {
		if (this.needCache("CWD_MEMBERSHIP")) {
			String key = ("CWD_MEMBERSHIP_" 
						+ ("queryCount_" + this.getCwdMembershipExampleConditionSql(cwdMembershipQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_MEMBERSHIP", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdMembershipQuerySelectObjectsCount(cwdMembershipQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_MEMBERSHIP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdMembershipQuerySelectObjectsCount(cwdMembershipQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdUser到数据库中
	 * <param name="cwdUser">需要插入的新对象</param>
	 */
	public int cwdUserInsert(CwdUser cwdUser) throws CacheException {
		int ret = this.getDao().cwdUserInsert(cwdUser);
		if (this.needCache("CWD_USER")) {
			this.getCache().clear("CWD_USER");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdUser.getId());
		this.operatesLogSimpleAdd("CWD_USER", "插入", "ID", kvalue, cwdUser, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdUser">从数据库中删除一个对象CwdUser</param>
	 * <param name="AId"></param>
	 */
	public int cwdUserDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdUserDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER")) {
				this.getCache().clear("CWD_USER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_USER", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdUser">从数据库中删除一个对象CwdUser</param>
	 */
	public int cwdUserDeleteByCondition(CwdUserExample cwdUserQueryCondition) throws CacheException {
		int ret = this.getDao().cwdUserDeleteByCondition(cwdUserQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER")) {
				this.getCache().clear("CWD_USER");
			}
		}
		String kvalue = this.getCwdUserExampleConditionSql(cwdUserQueryCondition);
		this.operatesLogSimpleAdd("CWD_USER", "条件删除", "conditionSql", kvalue, cwdUserQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdUser到数据库中
	 * <param name="cwdUser">需要更新的CwdUser</param>
	 */
	public int cwdUserUpdate(CwdUser cwdUser) throws CacheException {
		int ret = this.getDao().cwdUserUpdate(cwdUser);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER")) {
				this.getCache().clear("CWD_USER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdUser.getId());
		this.operatesLogSimpleAdd("CWD_USER", "更新", "ID", kvalue, cwdUser, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdUser到数据库中
	 * <param name="cwdUser">需要更新的CwdUser</param>
	 */
	public int cwdUserUpdateSelective(CwdUser cwdUser) throws CacheException {
		int ret = this.getDao().cwdUserUpdateSelective(cwdUser);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER")) {
				this.getCache().clear("CWD_USER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdUser.getId());
		this.operatesLogSimpleAdd("CWD_USER", "部分更新", "ID", kvalue, cwdUser, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdUser到数据库中
	 * <param name="cwdUserQueryCondition">附加的条件</param>
	 * <param name="cwdUser">需要更新的CwdUser</param>
	 */
	public int cwdUserUpdateByCondition(CwdUser cwdUser, CwdUserExample cwdUserQueryCondition) throws CacheException {
		int ret = this.getDao().cwdUserUpdateByCondition(cwdUser, cwdUserQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER")) {
				this.getCache().clear("CWD_USER");
			}
		}
		String kvalue = this.getCwdUserExampleConditionSql(cwdUserQueryCondition);
		this.operatesLogSimpleAdd("CWD_USER", "条件更新", "conditionSql", kvalue, cwdUser, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdUser到数据库中
	 * <param name="cwdUserQueryCondition">附加的条件</param>
	 * <param name="cwdUser">需要更新的CwdUser</param>
	 */
	public int cwdUserUpdateSelectiveByCondition(CwdUser cwdUser, CwdUserExample cwdUserQueryCondition) throws CacheException {
		int ret = this.getDao().cwdUserUpdateSelectiveByCondition(cwdUser, cwdUserQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER")) {
				this.getCache().clear("CWD_USER");
			}
		}
		String kvalue = this.getCwdUserExampleConditionSql(cwdUserQueryCondition);
		this.operatesLogSimpleAdd("CWD_USER", "批量部分更新", "conditionSql", kvalue, cwdUser, ret);
		return ret;
	}
	
	public String getCwdUserExampleConditionSql(CwdUserExample cwdUserQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdUserQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdUserExample.Criteria item = cwdUserQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdUserExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdUser">从数据库中查询一个对象CwdUser</param>
	 * <param name="AId"></param>
	 */
	public CwdUser cwdUserSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_USER")) {
			String key = ("CWD_USER_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdUser obj = ((CwdUser)(this.getCache().get("CWD_USER", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdUserSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_USER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdUserSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdUserQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdUser> cwdUserSelectObjects(CwdUserExample cwdUserQueryCondition) throws CacheException {
		if (this.needCache("CWD_USER")) {
			String key = ("CWD_USER_" 
						+ ("queryObject_" + this.getCwdUserExampleConditionSql(cwdUserQueryCondition)));
			List<CwdUser> obj = ((List<CwdUser>)(this.getCache().get("CWD_USER", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdUserSelectObjects(cwdUserQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_USER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdUserSelectObjects(cwdUserQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdUserQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdUserQuerySelectObjectsCount(CwdUserExample cwdUserQueryCondition) throws CacheException {
		if (this.needCache("CWD_USER")) {
			String key = ("CWD_USER_" 
						+ ("queryCount_" + this.getCwdUserExampleConditionSql(cwdUserQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_USER", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdUserQuerySelectObjectsCount(cwdUserQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_USER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdUserQuerySelectObjectsCount(cwdUserQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象CwdUserAttributes到数据库中
	 * <param name="cwdUserAttributes">需要插入的新对象</param>
	 */
	public int cwdUserAttributesInsert(CwdUserAttributes cwdUserAttributes) throws CacheException {
		int ret = this.getDao().cwdUserAttributesInsert(cwdUserAttributes);
		if (this.needCache("CWD_USER_ATTRIBUTES")) {
			this.getCache().clear("CWD_USER_ATTRIBUTES");
		}
		String kvalue = "";
		kvalue = (kvalue + cwdUserAttributes.getId());
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "插入", "ID", kvalue, cwdUserAttributes, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdUserAttributes">从数据库中删除一个对象CwdUserAttributes</param>
	 * <param name="AId"></param>
	 */
	public int cwdUserAttributesDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().cwdUserAttributesDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER_ATTRIBUTES")) {
				this.getCache().clear("CWD_USER_ATTRIBUTES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="cwdUserAttributes">从数据库中删除一个对象CwdUserAttributes</param>
	 */
	public int cwdUserAttributesDeleteByCondition(CwdUserAttributesExample cwdUserAttributesQueryCondition) throws CacheException {
		int ret = this.getDao().cwdUserAttributesDeleteByCondition(cwdUserAttributesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER_ATTRIBUTES")) {
				this.getCache().clear("CWD_USER_ATTRIBUTES");
			}
		}
		String kvalue = this.getCwdUserAttributesExampleConditionSql(cwdUserAttributesQueryCondition);
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "条件删除", "conditionSql", kvalue, cwdUserAttributesQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象CwdUserAttributes到数据库中
	 * <param name="cwdUserAttributes">需要更新的CwdUserAttributes</param>
	 */
	public int cwdUserAttributesUpdate(CwdUserAttributes cwdUserAttributes) throws CacheException {
		int ret = this.getDao().cwdUserAttributesUpdate(cwdUserAttributes);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER_ATTRIBUTES")) {
				this.getCache().clear("CWD_USER_ATTRIBUTES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdUserAttributes.getId());
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "更新", "ID", kvalue, cwdUserAttributes, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性CwdUserAttributes到数据库中
	 * <param name="cwdUserAttributes">需要更新的CwdUserAttributes</param>
	 */
	public int cwdUserAttributesUpdateSelective(CwdUserAttributes cwdUserAttributes) throws CacheException {
		int ret = this.getDao().cwdUserAttributesUpdateSelective(cwdUserAttributes);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER_ATTRIBUTES")) {
				this.getCache().clear("CWD_USER_ATTRIBUTES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + cwdUserAttributes.getId());
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "部分更新", "ID", kvalue, cwdUserAttributes, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdUserAttributes到数据库中
	 * <param name="cwdUserAttributesQueryCondition">附加的条件</param>
	 * <param name="cwdUserAttributes">需要更新的CwdUserAttributes</param>
	 */
	public int cwdUserAttributesUpdateByCondition(CwdUserAttributes cwdUserAttributes, CwdUserAttributesExample cwdUserAttributesQueryCondition) throws CacheException {
		int ret = this.getDao().cwdUserAttributesUpdateByCondition(cwdUserAttributes, cwdUserAttributesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER_ATTRIBUTES")) {
				this.getCache().clear("CWD_USER_ATTRIBUTES");
			}
		}
		String kvalue = this.getCwdUserAttributesExampleConditionSql(cwdUserAttributesQueryCondition);
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "条件更新", "conditionSql", kvalue, cwdUserAttributes, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象CwdUserAttributes到数据库中
	 * <param name="cwdUserAttributesQueryCondition">附加的条件</param>
	 * <param name="cwdUserAttributes">需要更新的CwdUserAttributes</param>
	 */
	public int cwdUserAttributesUpdateSelectiveByCondition(CwdUserAttributes cwdUserAttributes, CwdUserAttributesExample cwdUserAttributesQueryCondition) throws CacheException {
		int ret = this.getDao().cwdUserAttributesUpdateSelectiveByCondition(cwdUserAttributes, cwdUserAttributesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("CWD_USER_ATTRIBUTES")) {
				this.getCache().clear("CWD_USER_ATTRIBUTES");
			}
		}
		String kvalue = this.getCwdUserAttributesExampleConditionSql(cwdUserAttributesQueryCondition);
		this.operatesLogSimpleAdd("CWD_USER_ATTRIBUTES", "批量部分更新", "conditionSql", kvalue, cwdUserAttributes, ret);
		return ret;
	}
	
	public String getCwdUserAttributesExampleConditionSql(CwdUserAttributesExample cwdUserAttributesQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < cwdUserAttributesQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			CwdUserAttributesExample.Criteria item = cwdUserAttributesQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					CwdUserAttributesExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="cwdUserAttributes">从数据库中查询一个对象CwdUserAttributes</param>
	 * <param name="AId"></param>
	 */
	public CwdUserAttributes cwdUserAttributesSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("CWD_USER_ATTRIBUTES")) {
			String key = ("CWD_USER_ATTRIBUTES_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			CwdUserAttributes obj = ((CwdUserAttributes)(this.getCache().get("CWD_USER_ATTRIBUTES", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdUserAttributesSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("CWD_USER_ATTRIBUTES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdUserAttributesSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="cwdUserAttributesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<CwdUserAttributes> cwdUserAttributesSelectObjects(CwdUserAttributesExample cwdUserAttributesQueryCondition) throws CacheException {
		if (this.needCache("CWD_USER_ATTRIBUTES")) {
			String key = ("CWD_USER_ATTRIBUTES_" 
						+ ("queryObject_" + this.getCwdUserAttributesExampleConditionSql(cwdUserAttributesQueryCondition)));
			List<CwdUserAttributes> obj = ((List<CwdUserAttributes>)(this.getCache().get("CWD_USER_ATTRIBUTES", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdUserAttributesSelectObjects(cwdUserAttributesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_USER_ATTRIBUTES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdUserAttributesSelectObjects(cwdUserAttributesQueryCondition);
		}
	}
	
	/**
	 * <param name="cwdUserAttributesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int cwdUserAttributesQuerySelectObjectsCount(CwdUserAttributesExample cwdUserAttributesQueryCondition) throws CacheException {
		if (this.needCache("CWD_USER_ATTRIBUTES")) {
			String key = ("CWD_USER_ATTRIBUTES_" 
						+ ("queryCount_" + this.getCwdUserAttributesExampleConditionSql(cwdUserAttributesQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("CWD_USER_ATTRIBUTES", key)));
			if ((obj == null)) {
				obj = this.getDao().cwdUserAttributesQuerySelectObjectsCount(cwdUserAttributesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("CWD_USER_ATTRIBUTES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().cwdUserAttributesQuerySelectObjectsCount(cwdUserAttributesQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象ExternalEntities到数据库中
	 * <param name="externalEntities">需要插入的新对象</param>
	 */
	public int externalEntitiesInsert(ExternalEntities externalEntities) throws CacheException {
		int ret = this.getDao().externalEntitiesInsert(externalEntities);
		if (this.needCache("EXTERNAL_ENTITIES")) {
			this.getCache().clear("EXTERNAL_ENTITIES");
		}
		String kvalue = "";
		kvalue = (kvalue + externalEntities.getId());
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "插入", "ID", kvalue, externalEntities, ret);
		return ret;
	}
	
	/**
	 * <param name="externalEntities">从数据库中删除一个对象ExternalEntities</param>
	 * <param name="AId"></param>
	 */
	public int externalEntitiesDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().externalEntitiesDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("EXTERNAL_ENTITIES")) {
				this.getCache().clear("EXTERNAL_ENTITIES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="externalEntities">从数据库中删除一个对象ExternalEntities</param>
	 */
	public int externalEntitiesDeleteByCondition(ExternalEntitiesExample externalEntitiesQueryCondition) throws CacheException {
		int ret = this.getDao().externalEntitiesDeleteByCondition(externalEntitiesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("EXTERNAL_ENTITIES")) {
				this.getCache().clear("EXTERNAL_ENTITIES");
			}
		}
		String kvalue = this.getExternalEntitiesExampleConditionSql(externalEntitiesQueryCondition);
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "条件删除", "conditionSql", kvalue, externalEntitiesQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象ExternalEntities到数据库中
	 * <param name="externalEntities">需要更新的ExternalEntities</param>
	 */
	public int externalEntitiesUpdate(ExternalEntities externalEntities) throws CacheException {
		int ret = this.getDao().externalEntitiesUpdate(externalEntities);
		if ((ret > 0)) {
			if (this.needCache("EXTERNAL_ENTITIES")) {
				this.getCache().clear("EXTERNAL_ENTITIES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + externalEntities.getId());
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "更新", "ID", kvalue, externalEntities, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性ExternalEntities到数据库中
	 * <param name="externalEntities">需要更新的ExternalEntities</param>
	 */
	public int externalEntitiesUpdateSelective(ExternalEntities externalEntities) throws CacheException {
		int ret = this.getDao().externalEntitiesUpdateSelective(externalEntities);
		if ((ret > 0)) {
			if (this.needCache("EXTERNAL_ENTITIES")) {
				this.getCache().clear("EXTERNAL_ENTITIES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + externalEntities.getId());
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "部分更新", "ID", kvalue, externalEntities, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象ExternalEntities到数据库中
	 * <param name="externalEntitiesQueryCondition">附加的条件</param>
	 * <param name="externalEntities">需要更新的ExternalEntities</param>
	 */
	public int externalEntitiesUpdateByCondition(ExternalEntities externalEntities, ExternalEntitiesExample externalEntitiesQueryCondition) throws CacheException {
		int ret = this.getDao().externalEntitiesUpdateByCondition(externalEntities, externalEntitiesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("EXTERNAL_ENTITIES")) {
				this.getCache().clear("EXTERNAL_ENTITIES");
			}
		}
		String kvalue = this.getExternalEntitiesExampleConditionSql(externalEntitiesQueryCondition);
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "条件更新", "conditionSql", kvalue, externalEntities, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象ExternalEntities到数据库中
	 * <param name="externalEntitiesQueryCondition">附加的条件</param>
	 * <param name="externalEntities">需要更新的ExternalEntities</param>
	 */
	public int externalEntitiesUpdateSelectiveByCondition(ExternalEntities externalEntities, ExternalEntitiesExample externalEntitiesQueryCondition) throws CacheException {
		int ret = this.getDao().externalEntitiesUpdateSelectiveByCondition(externalEntities, externalEntitiesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("EXTERNAL_ENTITIES")) {
				this.getCache().clear("EXTERNAL_ENTITIES");
			}
		}
		String kvalue = this.getExternalEntitiesExampleConditionSql(externalEntitiesQueryCondition);
		this.operatesLogSimpleAdd("EXTERNAL_ENTITIES", "批量部分更新", "conditionSql", kvalue, externalEntities, ret);
		return ret;
	}
	
	public String getExternalEntitiesExampleConditionSql(ExternalEntitiesExample externalEntitiesQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < externalEntitiesQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ExternalEntitiesExample.Criteria item = externalEntitiesQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ExternalEntitiesExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="externalEntities">从数据库中查询一个对象ExternalEntities</param>
	 * <param name="AId"></param>
	 */
	public ExternalEntities externalEntitiesSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("EXTERNAL_ENTITIES")) {
			String key = ("EXTERNAL_ENTITIES_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			ExternalEntities obj = ((ExternalEntities)(this.getCache().get("EXTERNAL_ENTITIES", key)));
			if ((obj == null)) {
				obj = this.getDao().externalEntitiesSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("EXTERNAL_ENTITIES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalEntitiesSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="externalEntitiesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<ExternalEntities> externalEntitiesSelectObjects(ExternalEntitiesExample externalEntitiesQueryCondition) throws CacheException {
		if (this.needCache("EXTERNAL_ENTITIES")) {
			String key = ("EXTERNAL_ENTITIES_" 
						+ ("queryObject_" + this.getExternalEntitiesExampleConditionSql(externalEntitiesQueryCondition)));
			List<ExternalEntities> obj = ((List<ExternalEntities>)(this.getCache().get("EXTERNAL_ENTITIES", key)));
			if ((obj == null)) {
				obj = this.getDao().externalEntitiesSelectObjects(externalEntitiesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("EXTERNAL_ENTITIES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalEntitiesSelectObjects(externalEntitiesQueryCondition);
		}
	}
	
	/**
	 * <param name="externalEntitiesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int externalEntitiesQuerySelectObjectsCount(ExternalEntitiesExample externalEntitiesQueryCondition) throws CacheException {
		if (this.needCache("EXTERNAL_ENTITIES")) {
			String key = ("EXTERNAL_ENTITIES_" 
						+ ("queryCount_" + this.getExternalEntitiesExampleConditionSql(externalEntitiesQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("EXTERNAL_ENTITIES", key)));
			if ((obj == null)) {
				obj = this.getDao().externalEntitiesQuerySelectObjectsCount(externalEntitiesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("EXTERNAL_ENTITIES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalEntitiesQuerySelectObjectsCount(externalEntitiesQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Externalgadget到数据库中
	 * <param name="externalgadget">需要插入的新对象</param>
	 */
	public int externalgadgetInsert(Externalgadget externalgadget) throws CacheException {
		int ret = this.getDao().externalgadgetInsert(externalgadget);
		if (this.needCache("EXTERNALGADGET")) {
			this.getCache().clear("EXTERNALGADGET");
		}
		String kvalue = "";
		kvalue = (kvalue + externalgadget.getId());
		this.operatesLogSimpleAdd("EXTERNALGADGET", "插入", "ID", kvalue, externalgadget, ret);
		return ret;
	}
	
	/**
	 * <param name="externalgadget">从数据库中删除一个对象Externalgadget</param>
	 * <param name="AId"></param>
	 */
	public int externalgadgetDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().externalgadgetDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("EXTERNALGADGET")) {
				this.getCache().clear("EXTERNALGADGET");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("EXTERNALGADGET", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="externalgadget">从数据库中删除一个对象Externalgadget</param>
	 */
	public int externalgadgetDeleteByCondition(ExternalgadgetExample externalgadgetQueryCondition) throws CacheException {
		int ret = this.getDao().externalgadgetDeleteByCondition(externalgadgetQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("EXTERNALGADGET")) {
				this.getCache().clear("EXTERNALGADGET");
			}
		}
		String kvalue = this.getExternalgadgetExampleConditionSql(externalgadgetQueryCondition);
		this.operatesLogSimpleAdd("EXTERNALGADGET", "条件删除", "conditionSql", kvalue, externalgadgetQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Externalgadget到数据库中
	 * <param name="externalgadget">需要更新的Externalgadget</param>
	 */
	public int externalgadgetUpdateWithBlobs(Externalgadget externalgadget) throws CacheException {
		int ret = this.getDao().externalgadgetUpdateWithBlobs(externalgadget);
		if ((ret > 0)) {
			if (this.needCache("EXTERNALGADGET")) {
				this.getCache().clear("EXTERNALGADGET");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + externalgadget.getId());
		this.operatesLogSimpleAdd("EXTERNALGADGET", "更新含Blob", "ID", kvalue, externalgadget, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Externalgadget到数据库中
	 * <param name="externalgadgetQueryCondition">附加的条件</param>
	 * <param name="externalgadget">需要更新的Externalgadget</param>
	 */
	public int externalgadgetUpdateByCondition(Externalgadget externalgadget, ExternalgadgetExample externalgadgetQueryCondition) throws CacheException {
		int ret = this.getDao().externalgadgetUpdateByCondition(externalgadget, externalgadgetQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("EXTERNALGADGET")) {
				this.getCache().clear("EXTERNALGADGET");
			}
		}
		String kvalue = this.getExternalgadgetExampleConditionSql(externalgadgetQueryCondition);
		this.operatesLogSimpleAdd("EXTERNALGADGET", "条件更新", "conditionSql", kvalue, externalgadget, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Externalgadget到数据库中
	 * <param name="externalgadgetQueryCondition">附加的条件</param>
	 * <param name="externalgadget">需要更新的Externalgadget</param>
	 */
	public int externalgadgetUpdateSelectiveByCondition(Externalgadget externalgadget, ExternalgadgetExample externalgadgetQueryCondition) throws CacheException {
		int ret = this.getDao().externalgadgetUpdateSelectiveByCondition(externalgadget, externalgadgetQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("EXTERNALGADGET")) {
				this.getCache().clear("EXTERNALGADGET");
			}
		}
		String kvalue = this.getExternalgadgetExampleConditionSql(externalgadgetQueryCondition);
		this.operatesLogSimpleAdd("EXTERNALGADGET", "批量部分更新", "conditionSql", kvalue, externalgadget, ret);
		return ret;
	}
	
	public String getExternalgadgetExampleConditionSql(ExternalgadgetExample externalgadgetQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < externalgadgetQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ExternalgadgetExample.Criteria item = externalgadgetQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ExternalgadgetExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="externalgadget">从数据库中查询一个对象Externalgadget</param>
	 * <param name="AId"></param>
	 */
	public Externalgadget externalgadgetSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("EXTERNALGADGET")) {
			String key = ("EXTERNALGADGET_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Externalgadget obj = ((Externalgadget)(this.getCache().get("EXTERNALGADGET", key)));
			if ((obj == null)) {
				obj = this.getDao().externalgadgetSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("EXTERNALGADGET", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalgadgetSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="externalgadgetQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Externalgadget> externalgadgetSelectObjects(ExternalgadgetExample externalgadgetQueryCondition) throws CacheException {
		if (this.needCache("EXTERNALGADGET")) {
			String key = ("EXTERNALGADGET_" 
						+ ("queryObject_" + this.getExternalgadgetExampleConditionSql(externalgadgetQueryCondition)));
			List<Externalgadget> obj = ((List<Externalgadget>)(this.getCache().get("EXTERNALGADGET", key)));
			if ((obj == null)) {
				obj = this.getDao().externalgadgetSelectObjects(externalgadgetQueryCondition);
				if ((obj != null)) {
					this.getCache().put("EXTERNALGADGET", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalgadgetSelectObjects(externalgadgetQueryCondition);
		}
	}
	
	/**
	 * <param name="externalgadgetQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Externalgadget> externalgadgetSelectObjectsWithBLOBs(ExternalgadgetExample externalgadgetQueryCondition) throws CacheException {
		if (this.needCache("EXTERNALGADGET")) {
			String key = ("EXTERNALGADGET_" 
						+ ("queryObject_" + this.getExternalgadgetExampleConditionSql(externalgadgetQueryCondition)));
			List<Externalgadget> obj = ((List<Externalgadget>)(this.getCache().get("EXTERNALGADGET", key)));
			if ((obj == null)) {
				obj = this.getDao().externalgadgetSelectObjectsWithBLOBs(externalgadgetQueryCondition);
				if ((obj != null)) {
					this.getCache().put("EXTERNALGADGET", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalgadgetSelectObjectsWithBLOBs(externalgadgetQueryCondition);
		}
	}
	
	/**
	 * <param name="externalgadgetQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int externalgadgetQuerySelectObjectsCount(ExternalgadgetExample externalgadgetQueryCondition) throws CacheException {
		if (this.needCache("EXTERNALGADGET")) {
			String key = ("EXTERNALGADGET_" 
						+ ("queryCount_" + this.getExternalgadgetExampleConditionSql(externalgadgetQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("EXTERNALGADGET", key)));
			if ((obj == null)) {
				obj = this.getDao().externalgadgetQuerySelectObjectsCount(externalgadgetQueryCondition);
				if ((obj != null)) {
					this.getCache().put("EXTERNALGADGET", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().externalgadgetQuerySelectObjectsCount(externalgadgetQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Favouriteassociations到数据库中
	 * <param name="favouriteassociations">需要插入的新对象</param>
	 */
	public int favouriteassociationsInsert(Favouriteassociations favouriteassociations) throws CacheException {
		int ret = this.getDao().favouriteassociationsInsert(favouriteassociations);
		if (this.needCache("FAVOURITEASSOCIATIONS")) {
			this.getCache().clear("FAVOURITEASSOCIATIONS");
		}
		String kvalue = "";
		kvalue = (kvalue + favouriteassociations.getId());
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "插入", "ID", kvalue, favouriteassociations, ret);
		return ret;
	}
	
	/**
	 * <param name="favouriteassociations">从数据库中删除一个对象Favouriteassociations</param>
	 * <param name="AId"></param>
	 */
	public int favouriteassociationsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().favouriteassociationsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FAVOURITEASSOCIATIONS")) {
				this.getCache().clear("FAVOURITEASSOCIATIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="favouriteassociations">从数据库中删除一个对象Favouriteassociations</param>
	 */
	public int favouriteassociationsDeleteByCondition(FavouriteassociationsExample favouriteassociationsQueryCondition) throws CacheException {
		int ret = this.getDao().favouriteassociationsDeleteByCondition(favouriteassociationsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FAVOURITEASSOCIATIONS")) {
				this.getCache().clear("FAVOURITEASSOCIATIONS");
			}
		}
		String kvalue = this.getFavouriteassociationsExampleConditionSql(favouriteassociationsQueryCondition);
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "条件删除", "conditionSql", kvalue, favouriteassociationsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Favouriteassociations到数据库中
	 * <param name="favouriteassociations">需要更新的Favouriteassociations</param>
	 */
	public int favouriteassociationsUpdate(Favouriteassociations favouriteassociations) throws CacheException {
		int ret = this.getDao().favouriteassociationsUpdate(favouriteassociations);
		if ((ret > 0)) {
			if (this.needCache("FAVOURITEASSOCIATIONS")) {
				this.getCache().clear("FAVOURITEASSOCIATIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + favouriteassociations.getId());
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "更新", "ID", kvalue, favouriteassociations, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Favouriteassociations到数据库中
	 * <param name="favouriteassociations">需要更新的Favouriteassociations</param>
	 */
	public int favouriteassociationsUpdateSelective(Favouriteassociations favouriteassociations) throws CacheException {
		int ret = this.getDao().favouriteassociationsUpdateSelective(favouriteassociations);
		if ((ret > 0)) {
			if (this.needCache("FAVOURITEASSOCIATIONS")) {
				this.getCache().clear("FAVOURITEASSOCIATIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + favouriteassociations.getId());
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "部分更新", "ID", kvalue, favouriteassociations, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Favouriteassociations到数据库中
	 * <param name="favouriteassociationsQueryCondition">附加的条件</param>
	 * <param name="favouriteassociations">需要更新的Favouriteassociations</param>
	 */
	public int favouriteassociationsUpdateByCondition(Favouriteassociations favouriteassociations, FavouriteassociationsExample favouriteassociationsQueryCondition) throws CacheException {
		int ret = this.getDao().favouriteassociationsUpdateByCondition(favouriteassociations, favouriteassociationsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FAVOURITEASSOCIATIONS")) {
				this.getCache().clear("FAVOURITEASSOCIATIONS");
			}
		}
		String kvalue = this.getFavouriteassociationsExampleConditionSql(favouriteassociationsQueryCondition);
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "条件更新", "conditionSql", kvalue, favouriteassociations, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Favouriteassociations到数据库中
	 * <param name="favouriteassociationsQueryCondition">附加的条件</param>
	 * <param name="favouriteassociations">需要更新的Favouriteassociations</param>
	 */
	public int favouriteassociationsUpdateSelectiveByCondition(Favouriteassociations favouriteassociations, FavouriteassociationsExample favouriteassociationsQueryCondition) throws CacheException {
		int ret = this.getDao().favouriteassociationsUpdateSelectiveByCondition(favouriteassociations, favouriteassociationsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FAVOURITEASSOCIATIONS")) {
				this.getCache().clear("FAVOURITEASSOCIATIONS");
			}
		}
		String kvalue = this.getFavouriteassociationsExampleConditionSql(favouriteassociationsQueryCondition);
		this.operatesLogSimpleAdd("FAVOURITEASSOCIATIONS", "批量部分更新", "conditionSql", kvalue, favouriteassociations, ret);
		return ret;
	}
	
	public String getFavouriteassociationsExampleConditionSql(FavouriteassociationsExample favouriteassociationsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < favouriteassociationsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FavouriteassociationsExample.Criteria item = favouriteassociationsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FavouriteassociationsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="favouriteassociations">从数据库中查询一个对象Favouriteassociations</param>
	 * <param name="AId"></param>
	 */
	public Favouriteassociations favouriteassociationsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FAVOURITEASSOCIATIONS")) {
			String key = ("FAVOURITEASSOCIATIONS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Favouriteassociations obj = ((Favouriteassociations)(this.getCache().get("FAVOURITEASSOCIATIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().favouriteassociationsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FAVOURITEASSOCIATIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().favouriteassociationsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="favouriteassociationsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Favouriteassociations> favouriteassociationsSelectObjects(FavouriteassociationsExample favouriteassociationsQueryCondition) throws CacheException {
		if (this.needCache("FAVOURITEASSOCIATIONS")) {
			String key = ("FAVOURITEASSOCIATIONS_" 
						+ ("queryObject_" + this.getFavouriteassociationsExampleConditionSql(favouriteassociationsQueryCondition)));
			List<Favouriteassociations> obj = ((List<Favouriteassociations>)(this.getCache().get("FAVOURITEASSOCIATIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().favouriteassociationsSelectObjects(favouriteassociationsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FAVOURITEASSOCIATIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().favouriteassociationsSelectObjects(favouriteassociationsQueryCondition);
		}
	}
	
	/**
	 * <param name="favouriteassociationsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int favouriteassociationsQuerySelectObjectsCount(FavouriteassociationsExample favouriteassociationsQueryCondition) throws CacheException {
		if (this.needCache("FAVOURITEASSOCIATIONS")) {
			String key = ("FAVOURITEASSOCIATIONS_" 
						+ ("queryCount_" + this.getFavouriteassociationsExampleConditionSql(favouriteassociationsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FAVOURITEASSOCIATIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().favouriteassociationsQuerySelectObjectsCount(favouriteassociationsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FAVOURITEASSOCIATIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().favouriteassociationsQuerySelectObjectsCount(favouriteassociationsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldconfigscheme到数据库中
	 * <param name="fieldconfigscheme">需要插入的新对象</param>
	 */
	public int fieldconfigschemeInsert(Fieldconfigscheme fieldconfigscheme) throws CacheException {
		int ret = this.getDao().fieldconfigschemeInsert(fieldconfigscheme);
		if (this.needCache("FIELDCONFIGSCHEME")) {
			this.getCache().clear("FIELDCONFIGSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigscheme.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "插入", "ID", kvalue, fieldconfigscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldconfigscheme">从数据库中删除一个对象Fieldconfigscheme</param>
	 * <param name="AId"></param>
	 */
	public int fieldconfigschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldconfigschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldconfigscheme">从数据库中删除一个对象Fieldconfigscheme</param>
	 */
	public int fieldconfigschemeDeleteByCondition(FieldconfigschemeExample fieldconfigschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigschemeDeleteByCondition(fieldconfigschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = this.getFieldconfigschemeExampleConditionSql(fieldconfigschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "条件删除", "conditionSql", kvalue, fieldconfigschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldconfigscheme到数据库中
	 * <param name="fieldconfigscheme">需要更新的Fieldconfigscheme</param>
	 */
	public int fieldconfigschemeUpdate(Fieldconfigscheme fieldconfigscheme) throws CacheException {
		int ret = this.getDao().fieldconfigschemeUpdate(fieldconfigscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigscheme.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "更新", "ID", kvalue, fieldconfigscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldconfigscheme到数据库中
	 * <param name="fieldconfigscheme">需要更新的Fieldconfigscheme</param>
	 */
	public int fieldconfigschemeUpdateSelective(Fieldconfigscheme fieldconfigscheme) throws CacheException {
		int ret = this.getDao().fieldconfigschemeUpdateSelective(fieldconfigscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigscheme.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "部分更新", "ID", kvalue, fieldconfigscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Fieldconfigscheme到数据库中
	 * <param name="fieldconfigscheme">需要更新的Fieldconfigscheme</param>
	 */
	public int fieldconfigschemeUpdateWithBlobs(Fieldconfigscheme fieldconfigscheme) throws CacheException {
		int ret = this.getDao().fieldconfigschemeUpdateWithBlobs(fieldconfigscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigscheme.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "更新含Blob", "ID", kvalue, fieldconfigscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldconfigscheme到数据库中
	 * <param name="fieldconfigschemeQueryCondition">附加的条件</param>
	 * <param name="fieldconfigscheme">需要更新的Fieldconfigscheme</param>
	 */
	public int fieldconfigschemeUpdateByCondition(Fieldconfigscheme fieldconfigscheme, FieldconfigschemeExample fieldconfigschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigschemeUpdateByCondition(fieldconfigscheme, fieldconfigschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = this.getFieldconfigschemeExampleConditionSql(fieldconfigschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "条件更新", "conditionSql", kvalue, fieldconfigscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldconfigscheme到数据库中
	 * <param name="fieldconfigschemeQueryCondition">附加的条件</param>
	 * <param name="fieldconfigscheme">需要更新的Fieldconfigscheme</param>
	 */
	public int fieldconfigschemeUpdateSelectiveByCondition(Fieldconfigscheme fieldconfigscheme, FieldconfigschemeExample fieldconfigschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigschemeUpdateSelectiveByCondition(fieldconfigscheme, fieldconfigschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEME")) {
				this.getCache().clear("FIELDCONFIGSCHEME");
			}
		}
		String kvalue = this.getFieldconfigschemeExampleConditionSql(fieldconfigschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEME", "批量部分更新", "conditionSql", kvalue, fieldconfigscheme, ret);
		return ret;
	}
	
	public String getFieldconfigschemeExampleConditionSql(FieldconfigschemeExample fieldconfigschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldconfigschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldconfigschemeExample.Criteria item = fieldconfigschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldconfigschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldconfigscheme">从数据库中查询一个对象Fieldconfigscheme</param>
	 * <param name="AId"></param>
	 */
	public Fieldconfigscheme fieldconfigschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEME")) {
			String key = ("FIELDCONFIGSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldconfigscheme obj = ((Fieldconfigscheme)(this.getCache().get("FIELDCONFIGSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldconfigschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldconfigscheme> fieldconfigschemeSelectObjects(FieldconfigschemeExample fieldconfigschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEME")) {
			String key = ("FIELDCONFIGSCHEME_" 
						+ ("queryObject_" + this.getFieldconfigschemeExampleConditionSql(fieldconfigschemeQueryCondition)));
			List<Fieldconfigscheme> obj = ((List<Fieldconfigscheme>)(this.getCache().get("FIELDCONFIGSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeSelectObjects(fieldconfigschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeSelectObjects(fieldconfigschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldconfigschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldconfigscheme> fieldconfigschemeSelectObjectsWithBLOBs(FieldconfigschemeExample fieldconfigschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEME")) {
			String key = ("FIELDCONFIGSCHEME_" 
						+ ("queryObject_" + this.getFieldconfigschemeExampleConditionSql(fieldconfigschemeQueryCondition)));
			List<Fieldconfigscheme> obj = ((List<Fieldconfigscheme>)(this.getCache().get("FIELDCONFIGSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeSelectObjectsWithBLOBs(fieldconfigschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeSelectObjectsWithBLOBs(fieldconfigschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldconfigschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldconfigschemeQuerySelectObjectsCount(FieldconfigschemeExample fieldconfigschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEME")) {
			String key = ("FIELDCONFIGSCHEME_" 
						+ ("queryCount_" + this.getFieldconfigschemeExampleConditionSql(fieldconfigschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDCONFIGSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeQuerySelectObjectsCount(fieldconfigschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeQuerySelectObjectsCount(fieldconfigschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldconfigschemeissuetype到数据库中
	 * <param name="fieldconfigschemeissuetype">需要插入的新对象</param>
	 */
	public int fieldconfigschemeissuetypeInsert(Fieldconfigschemeissuetype fieldconfigschemeissuetype) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeInsert(fieldconfigschemeissuetype);
		if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
			this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigschemeissuetype.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "插入", "ID", kvalue, fieldconfigschemeissuetype, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldconfigschemeissuetype">从数据库中删除一个对象Fieldconfigschemeissuetype</param>
	 * <param name="AId"></param>
	 */
	public int fieldconfigschemeissuetypeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
				this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldconfigschemeissuetype">从数据库中删除一个对象Fieldconfigschemeissuetype</param>
	 */
	public int fieldconfigschemeissuetypeDeleteByCondition(FieldconfigschemeissuetypeExample fieldconfigschemeissuetypeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeDeleteByCondition(fieldconfigschemeissuetypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
				this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
			}
		}
		String kvalue = this.getFieldconfigschemeissuetypeExampleConditionSql(fieldconfigschemeissuetypeQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "条件删除", "conditionSql", kvalue, fieldconfigschemeissuetypeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldconfigschemeissuetype到数据库中
	 * <param name="fieldconfigschemeissuetype">需要更新的Fieldconfigschemeissuetype</param>
	 */
	public int fieldconfigschemeissuetypeUpdate(Fieldconfigschemeissuetype fieldconfigschemeissuetype) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeUpdate(fieldconfigschemeissuetype);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
				this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigschemeissuetype.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "更新", "ID", kvalue, fieldconfigschemeissuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldconfigschemeissuetype到数据库中
	 * <param name="fieldconfigschemeissuetype">需要更新的Fieldconfigschemeissuetype</param>
	 */
	public int fieldconfigschemeissuetypeUpdateSelective(Fieldconfigschemeissuetype fieldconfigschemeissuetype) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeUpdateSelective(fieldconfigschemeissuetype);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
				this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfigschemeissuetype.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "部分更新", "ID", kvalue, fieldconfigschemeissuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldconfigschemeissuetype到数据库中
	 * <param name="fieldconfigschemeissuetypeQueryCondition">附加的条件</param>
	 * <param name="fieldconfigschemeissuetype">需要更新的Fieldconfigschemeissuetype</param>
	 */
	public int fieldconfigschemeissuetypeUpdateByCondition(Fieldconfigschemeissuetype fieldconfigschemeissuetype, FieldconfigschemeissuetypeExample fieldconfigschemeissuetypeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeUpdateByCondition(fieldconfigschemeissuetype, fieldconfigschemeissuetypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
				this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
			}
		}
		String kvalue = this.getFieldconfigschemeissuetypeExampleConditionSql(fieldconfigschemeissuetypeQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "条件更新", "conditionSql", kvalue, fieldconfigschemeissuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldconfigschemeissuetype到数据库中
	 * <param name="fieldconfigschemeissuetypeQueryCondition">附加的条件</param>
	 * <param name="fieldconfigschemeissuetype">需要更新的Fieldconfigschemeissuetype</param>
	 */
	public int fieldconfigschemeissuetypeUpdateSelectiveByCondition(Fieldconfigschemeissuetype fieldconfigschemeissuetype, FieldconfigschemeissuetypeExample fieldconfigschemeissuetypeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigschemeissuetypeUpdateSelectiveByCondition(fieldconfigschemeissuetype, fieldconfigschemeissuetypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
				this.getCache().clear("FIELDCONFIGSCHEMEISSUETYPE");
			}
		}
		String kvalue = this.getFieldconfigschemeissuetypeExampleConditionSql(fieldconfigschemeissuetypeQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGSCHEMEISSUETYPE", "批量部分更新", "conditionSql", kvalue, fieldconfigschemeissuetype, ret);
		return ret;
	}
	
	public String getFieldconfigschemeissuetypeExampleConditionSql(FieldconfigschemeissuetypeExample fieldconfigschemeissuetypeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldconfigschemeissuetypeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldconfigschemeissuetypeExample.Criteria item = fieldconfigschemeissuetypeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldconfigschemeissuetypeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldconfigschemeissuetype">从数据库中查询一个对象Fieldconfigschemeissuetype</param>
	 * <param name="AId"></param>
	 */
	public Fieldconfigschemeissuetype fieldconfigschemeissuetypeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
			String key = ("FIELDCONFIGSCHEMEISSUETYPE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldconfigschemeissuetype obj = ((Fieldconfigschemeissuetype)(this.getCache().get("FIELDCONFIGSCHEMEISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeissuetypeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEMEISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeissuetypeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldconfigschemeissuetypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldconfigschemeissuetype> fieldconfigschemeissuetypeSelectObjects(FieldconfigschemeissuetypeExample fieldconfigschemeissuetypeQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
			String key = ("FIELDCONFIGSCHEMEISSUETYPE_" 
						+ ("queryObject_" + this.getFieldconfigschemeissuetypeExampleConditionSql(fieldconfigschemeissuetypeQueryCondition)));
			List<Fieldconfigschemeissuetype> obj = ((List<Fieldconfigschemeissuetype>)(this.getCache().get("FIELDCONFIGSCHEMEISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeissuetypeSelectObjects(fieldconfigschemeissuetypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEMEISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeissuetypeSelectObjects(fieldconfigschemeissuetypeQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldconfigschemeissuetypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldconfigschemeissuetypeQuerySelectObjectsCount(FieldconfigschemeissuetypeExample fieldconfigschemeissuetypeQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGSCHEMEISSUETYPE")) {
			String key = ("FIELDCONFIGSCHEMEISSUETYPE_" 
						+ ("queryCount_" + this.getFieldconfigschemeissuetypeExampleConditionSql(fieldconfigschemeissuetypeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDCONFIGSCHEMEISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigschemeissuetypeQuerySelectObjectsCount(fieldconfigschemeissuetypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGSCHEMEISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigschemeissuetypeQuerySelectObjectsCount(fieldconfigschemeissuetypeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldconfiguration到数据库中
	 * <param name="fieldconfiguration">需要插入的新对象</param>
	 */
	public int fieldconfigurationInsert(Fieldconfiguration fieldconfiguration) throws CacheException {
		int ret = this.getDao().fieldconfigurationInsert(fieldconfiguration);
		if (this.needCache("FIELDCONFIGURATION")) {
			this.getCache().clear("FIELDCONFIGURATION");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfiguration.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "插入", "ID", kvalue, fieldconfiguration, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldconfiguration">从数据库中删除一个对象Fieldconfiguration</param>
	 * <param name="AId"></param>
	 */
	public int fieldconfigurationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldconfigurationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldconfiguration">从数据库中删除一个对象Fieldconfiguration</param>
	 */
	public int fieldconfigurationDeleteByCondition(FieldconfigurationExample fieldconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigurationDeleteByCondition(fieldconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = this.getFieldconfigurationExampleConditionSql(fieldconfigurationQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "条件删除", "conditionSql", kvalue, fieldconfigurationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldconfiguration到数据库中
	 * <param name="fieldconfiguration">需要更新的Fieldconfiguration</param>
	 */
	public int fieldconfigurationUpdate(Fieldconfiguration fieldconfiguration) throws CacheException {
		int ret = this.getDao().fieldconfigurationUpdate(fieldconfiguration);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfiguration.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "更新", "ID", kvalue, fieldconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldconfiguration到数据库中
	 * <param name="fieldconfiguration">需要更新的Fieldconfiguration</param>
	 */
	public int fieldconfigurationUpdateSelective(Fieldconfiguration fieldconfiguration) throws CacheException {
		int ret = this.getDao().fieldconfigurationUpdateSelective(fieldconfiguration);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfiguration.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "部分更新", "ID", kvalue, fieldconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Fieldconfiguration到数据库中
	 * <param name="fieldconfiguration">需要更新的Fieldconfiguration</param>
	 */
	public int fieldconfigurationUpdateWithBlobs(Fieldconfiguration fieldconfiguration) throws CacheException {
		int ret = this.getDao().fieldconfigurationUpdateWithBlobs(fieldconfiguration);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldconfiguration.getId());
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "更新含Blob", "ID", kvalue, fieldconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldconfiguration到数据库中
	 * <param name="fieldconfigurationQueryCondition">附加的条件</param>
	 * <param name="fieldconfiguration">需要更新的Fieldconfiguration</param>
	 */
	public int fieldconfigurationUpdateByCondition(Fieldconfiguration fieldconfiguration, FieldconfigurationExample fieldconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigurationUpdateByCondition(fieldconfiguration, fieldconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = this.getFieldconfigurationExampleConditionSql(fieldconfigurationQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "条件更新", "conditionSql", kvalue, fieldconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldconfiguration到数据库中
	 * <param name="fieldconfigurationQueryCondition">附加的条件</param>
	 * <param name="fieldconfiguration">需要更新的Fieldconfiguration</param>
	 */
	public int fieldconfigurationUpdateSelectiveByCondition(Fieldconfiguration fieldconfiguration, FieldconfigurationExample fieldconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().fieldconfigurationUpdateSelectiveByCondition(fieldconfiguration, fieldconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDCONFIGURATION")) {
				this.getCache().clear("FIELDCONFIGURATION");
			}
		}
		String kvalue = this.getFieldconfigurationExampleConditionSql(fieldconfigurationQueryCondition);
		this.operatesLogSimpleAdd("FIELDCONFIGURATION", "批量部分更新", "conditionSql", kvalue, fieldconfiguration, ret);
		return ret;
	}
	
	public String getFieldconfigurationExampleConditionSql(FieldconfigurationExample fieldconfigurationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldconfigurationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldconfigurationExample.Criteria item = fieldconfigurationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldconfigurationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldconfiguration">从数据库中查询一个对象Fieldconfiguration</param>
	 * <param name="AId"></param>
	 */
	public Fieldconfiguration fieldconfigurationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDCONFIGURATION")) {
			String key = ("FIELDCONFIGURATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldconfiguration obj = ((Fieldconfiguration)(this.getCache().get("FIELDCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigurationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigurationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldconfiguration> fieldconfigurationSelectObjects(FieldconfigurationExample fieldconfigurationQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGURATION")) {
			String key = ("FIELDCONFIGURATION_" 
						+ ("queryObject_" + this.getFieldconfigurationExampleConditionSql(fieldconfigurationQueryCondition)));
			List<Fieldconfiguration> obj = ((List<Fieldconfiguration>)(this.getCache().get("FIELDCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigurationSelectObjects(fieldconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigurationSelectObjects(fieldconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldconfiguration> fieldconfigurationSelectObjectsWithBLOBs(FieldconfigurationExample fieldconfigurationQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGURATION")) {
			String key = ("FIELDCONFIGURATION_" 
						+ ("queryObject_" + this.getFieldconfigurationExampleConditionSql(fieldconfigurationQueryCondition)));
			List<Fieldconfiguration> obj = ((List<Fieldconfiguration>)(this.getCache().get("FIELDCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigurationSelectObjectsWithBLOBs(fieldconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigurationSelectObjectsWithBLOBs(fieldconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldconfigurationQuerySelectObjectsCount(FieldconfigurationExample fieldconfigurationQueryCondition) throws CacheException {
		if (this.needCache("FIELDCONFIGURATION")) {
			String key = ("FIELDCONFIGURATION_" 
						+ ("queryCount_" + this.getFieldconfigurationExampleConditionSql(fieldconfigurationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldconfigurationQuerySelectObjectsCount(fieldconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldconfigurationQuerySelectObjectsCount(fieldconfigurationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldlayout到数据库中
	 * <param name="fieldlayout">需要插入的新对象</param>
	 */
	public int fieldlayoutInsert(Fieldlayout fieldlayout) throws CacheException {
		int ret = this.getDao().fieldlayoutInsert(fieldlayout);
		if (this.needCache("FIELDLAYOUT")) {
			this.getCache().clear("FIELDLAYOUT");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayout.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUT", "插入", "ID", kvalue, fieldlayout, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayout">从数据库中删除一个对象Fieldlayout</param>
	 * <param name="AId"></param>
	 */
	public int fieldlayoutDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldlayoutDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUT")) {
				this.getCache().clear("FIELDLAYOUT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDLAYOUT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayout">从数据库中删除一个对象Fieldlayout</param>
	 */
	public int fieldlayoutDeleteByCondition(FieldlayoutExample fieldlayoutQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutDeleteByCondition(fieldlayoutQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUT")) {
				this.getCache().clear("FIELDLAYOUT");
			}
		}
		String kvalue = this.getFieldlayoutExampleConditionSql(fieldlayoutQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUT", "条件删除", "conditionSql", kvalue, fieldlayoutQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldlayout到数据库中
	 * <param name="fieldlayout">需要更新的Fieldlayout</param>
	 */
	public int fieldlayoutUpdate(Fieldlayout fieldlayout) throws CacheException {
		int ret = this.getDao().fieldlayoutUpdate(fieldlayout);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUT")) {
				this.getCache().clear("FIELDLAYOUT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayout.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUT", "更新", "ID", kvalue, fieldlayout, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldlayout到数据库中
	 * <param name="fieldlayout">需要更新的Fieldlayout</param>
	 */
	public int fieldlayoutUpdateSelective(Fieldlayout fieldlayout) throws CacheException {
		int ret = this.getDao().fieldlayoutUpdateSelective(fieldlayout);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUT")) {
				this.getCache().clear("FIELDLAYOUT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayout.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUT", "部分更新", "ID", kvalue, fieldlayout, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayout到数据库中
	 * <param name="fieldlayoutQueryCondition">附加的条件</param>
	 * <param name="fieldlayout">需要更新的Fieldlayout</param>
	 */
	public int fieldlayoutUpdateByCondition(Fieldlayout fieldlayout, FieldlayoutExample fieldlayoutQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutUpdateByCondition(fieldlayout, fieldlayoutQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUT")) {
				this.getCache().clear("FIELDLAYOUT");
			}
		}
		String kvalue = this.getFieldlayoutExampleConditionSql(fieldlayoutQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUT", "条件更新", "conditionSql", kvalue, fieldlayout, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayout到数据库中
	 * <param name="fieldlayoutQueryCondition">附加的条件</param>
	 * <param name="fieldlayout">需要更新的Fieldlayout</param>
	 */
	public int fieldlayoutUpdateSelectiveByCondition(Fieldlayout fieldlayout, FieldlayoutExample fieldlayoutQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutUpdateSelectiveByCondition(fieldlayout, fieldlayoutQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUT")) {
				this.getCache().clear("FIELDLAYOUT");
			}
		}
		String kvalue = this.getFieldlayoutExampleConditionSql(fieldlayoutQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUT", "批量部分更新", "conditionSql", kvalue, fieldlayout, ret);
		return ret;
	}
	
	public String getFieldlayoutExampleConditionSql(FieldlayoutExample fieldlayoutQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldlayoutQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldlayoutExample.Criteria item = fieldlayoutQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldlayoutExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldlayout">从数据库中查询一个对象Fieldlayout</param>
	 * <param name="AId"></param>
	 */
	public Fieldlayout fieldlayoutSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDLAYOUT")) {
			String key = ("FIELDLAYOUT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldlayout obj = ((Fieldlayout)(this.getCache().get("FIELDLAYOUT", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldlayoutQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayout> fieldlayoutSelectObjects(FieldlayoutExample fieldlayoutQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUT")) {
			String key = ("FIELDLAYOUT_" 
						+ ("queryObject_" + this.getFieldlayoutExampleConditionSql(fieldlayoutQueryCondition)));
			List<Fieldlayout> obj = ((List<Fieldlayout>)(this.getCache().get("FIELDLAYOUT", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutSelectObjects(fieldlayoutQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutSelectObjects(fieldlayoutQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldlayoutQuerySelectObjectsCount(FieldlayoutExample fieldlayoutQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUT")) {
			String key = ("FIELDLAYOUT_" 
						+ ("queryCount_" + this.getFieldlayoutExampleConditionSql(fieldlayoutQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDLAYOUT", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutQuerySelectObjectsCount(fieldlayoutQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutQuerySelectObjectsCount(fieldlayoutQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldlayoutitem到数据库中
	 * <param name="fieldlayoutitem">需要插入的新对象</param>
	 */
	public int fieldlayoutitemInsert(Fieldlayoutitem fieldlayoutitem) throws CacheException {
		int ret = this.getDao().fieldlayoutitemInsert(fieldlayoutitem);
		if (this.needCache("FIELDLAYOUTITEM")) {
			this.getCache().clear("FIELDLAYOUTITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "插入", "ID", kvalue, fieldlayoutitem, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutitem">从数据库中删除一个对象Fieldlayoutitem</param>
	 * <param name="AId"></param>
	 */
	public int fieldlayoutitemDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldlayoutitemDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutitem">从数据库中删除一个对象Fieldlayoutitem</param>
	 */
	public int fieldlayoutitemDeleteByCondition(FieldlayoutitemExample fieldlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutitemDeleteByCondition(fieldlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = this.getFieldlayoutitemExampleConditionSql(fieldlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "条件删除", "conditionSql", kvalue, fieldlayoutitemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldlayoutitem到数据库中
	 * <param name="fieldlayoutitem">需要更新的Fieldlayoutitem</param>
	 */
	public int fieldlayoutitemUpdate(Fieldlayoutitem fieldlayoutitem) throws CacheException {
		int ret = this.getDao().fieldlayoutitemUpdate(fieldlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "更新", "ID", kvalue, fieldlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldlayoutitem到数据库中
	 * <param name="fieldlayoutitem">需要更新的Fieldlayoutitem</param>
	 */
	public int fieldlayoutitemUpdateSelective(Fieldlayoutitem fieldlayoutitem) throws CacheException {
		int ret = this.getDao().fieldlayoutitemUpdateSelective(fieldlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "部分更新", "ID", kvalue, fieldlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Fieldlayoutitem到数据库中
	 * <param name="fieldlayoutitem">需要更新的Fieldlayoutitem</param>
	 */
	public int fieldlayoutitemUpdateWithBlobs(Fieldlayoutitem fieldlayoutitem) throws CacheException {
		int ret = this.getDao().fieldlayoutitemUpdateWithBlobs(fieldlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "更新含Blob", "ID", kvalue, fieldlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutitem到数据库中
	 * <param name="fieldlayoutitemQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutitem">需要更新的Fieldlayoutitem</param>
	 */
	public int fieldlayoutitemUpdateByCondition(Fieldlayoutitem fieldlayoutitem, FieldlayoutitemExample fieldlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutitemUpdateByCondition(fieldlayoutitem, fieldlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = this.getFieldlayoutitemExampleConditionSql(fieldlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "条件更新", "conditionSql", kvalue, fieldlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutitem到数据库中
	 * <param name="fieldlayoutitemQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutitem">需要更新的Fieldlayoutitem</param>
	 */
	public int fieldlayoutitemUpdateSelectiveByCondition(Fieldlayoutitem fieldlayoutitem, FieldlayoutitemExample fieldlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutitemUpdateSelectiveByCondition(fieldlayoutitem, fieldlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTITEM")) {
				this.getCache().clear("FIELDLAYOUTITEM");
			}
		}
		String kvalue = this.getFieldlayoutitemExampleConditionSql(fieldlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTITEM", "批量部分更新", "conditionSql", kvalue, fieldlayoutitem, ret);
		return ret;
	}
	
	public String getFieldlayoutitemExampleConditionSql(FieldlayoutitemExample fieldlayoutitemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldlayoutitemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldlayoutitemExample.Criteria item = fieldlayoutitemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldlayoutitemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldlayoutitem">从数据库中查询一个对象Fieldlayoutitem</param>
	 * <param name="AId"></param>
	 */
	public Fieldlayoutitem fieldlayoutitemSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDLAYOUTITEM")) {
			String key = ("FIELDLAYOUTITEM_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldlayoutitem obj = ((Fieldlayoutitem)(this.getCache().get("FIELDLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutitemSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutitemSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayoutitem> fieldlayoutitemSelectObjects(FieldlayoutitemExample fieldlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTITEM")) {
			String key = ("FIELDLAYOUTITEM_" 
						+ ("queryObject_" + this.getFieldlayoutitemExampleConditionSql(fieldlayoutitemQueryCondition)));
			List<Fieldlayoutitem> obj = ((List<Fieldlayoutitem>)(this.getCache().get("FIELDLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutitemSelectObjects(fieldlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutitemSelectObjects(fieldlayoutitemQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayoutitem> fieldlayoutitemSelectObjectsWithBLOBs(FieldlayoutitemExample fieldlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTITEM")) {
			String key = ("FIELDLAYOUTITEM_" 
						+ ("queryObject_" + this.getFieldlayoutitemExampleConditionSql(fieldlayoutitemQueryCondition)));
			List<Fieldlayoutitem> obj = ((List<Fieldlayoutitem>)(this.getCache().get("FIELDLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutitemSelectObjectsWithBLOBs(fieldlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutitemSelectObjectsWithBLOBs(fieldlayoutitemQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldlayoutitemQuerySelectObjectsCount(FieldlayoutitemExample fieldlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTITEM")) {
			String key = ("FIELDLAYOUTITEM_" 
						+ ("queryCount_" + this.getFieldlayoutitemExampleConditionSql(fieldlayoutitemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutitemQuerySelectObjectsCount(fieldlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutitemQuerySelectObjectsCount(fieldlayoutitemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldlayoutscheme到数据库中
	 * <param name="fieldlayoutscheme">需要插入的新对象</param>
	 */
	public int fieldlayoutschemeInsert(Fieldlayoutscheme fieldlayoutscheme) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeInsert(fieldlayoutscheme);
		if (this.needCache("FIELDLAYOUTSCHEME")) {
			this.getCache().clear("FIELDLAYOUTSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutscheme.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "插入", "ID", kvalue, fieldlayoutscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutscheme">从数据库中删除一个对象Fieldlayoutscheme</param>
	 * <param name="AId"></param>
	 */
	public int fieldlayoutschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutscheme">从数据库中删除一个对象Fieldlayoutscheme</param>
	 */
	public int fieldlayoutschemeDeleteByCondition(FieldlayoutschemeExample fieldlayoutschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeDeleteByCondition(fieldlayoutschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = this.getFieldlayoutschemeExampleConditionSql(fieldlayoutschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "条件删除", "conditionSql", kvalue, fieldlayoutschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldlayoutscheme到数据库中
	 * <param name="fieldlayoutscheme">需要更新的Fieldlayoutscheme</param>
	 */
	public int fieldlayoutschemeUpdate(Fieldlayoutscheme fieldlayoutscheme) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeUpdate(fieldlayoutscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutscheme.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "更新", "ID", kvalue, fieldlayoutscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldlayoutscheme到数据库中
	 * <param name="fieldlayoutscheme">需要更新的Fieldlayoutscheme</param>
	 */
	public int fieldlayoutschemeUpdateSelective(Fieldlayoutscheme fieldlayoutscheme) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeUpdateSelective(fieldlayoutscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutscheme.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "部分更新", "ID", kvalue, fieldlayoutscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Fieldlayoutscheme到数据库中
	 * <param name="fieldlayoutscheme">需要更新的Fieldlayoutscheme</param>
	 */
	public int fieldlayoutschemeUpdateWithBlobs(Fieldlayoutscheme fieldlayoutscheme) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeUpdateWithBlobs(fieldlayoutscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutscheme.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "更新含Blob", "ID", kvalue, fieldlayoutscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutscheme到数据库中
	 * <param name="fieldlayoutschemeQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutscheme">需要更新的Fieldlayoutscheme</param>
	 */
	public int fieldlayoutschemeUpdateByCondition(Fieldlayoutscheme fieldlayoutscheme, FieldlayoutschemeExample fieldlayoutschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeUpdateByCondition(fieldlayoutscheme, fieldlayoutschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = this.getFieldlayoutschemeExampleConditionSql(fieldlayoutschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "条件更新", "conditionSql", kvalue, fieldlayoutscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutscheme到数据库中
	 * <param name="fieldlayoutschemeQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutscheme">需要更新的Fieldlayoutscheme</param>
	 */
	public int fieldlayoutschemeUpdateSelectiveByCondition(Fieldlayoutscheme fieldlayoutscheme, FieldlayoutschemeExample fieldlayoutschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeUpdateSelectiveByCondition(fieldlayoutscheme, fieldlayoutschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEME")) {
				this.getCache().clear("FIELDLAYOUTSCHEME");
			}
		}
		String kvalue = this.getFieldlayoutschemeExampleConditionSql(fieldlayoutschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEME", "批量部分更新", "conditionSql", kvalue, fieldlayoutscheme, ret);
		return ret;
	}
	
	public String getFieldlayoutschemeExampleConditionSql(FieldlayoutschemeExample fieldlayoutschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldlayoutschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldlayoutschemeExample.Criteria item = fieldlayoutschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldlayoutschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldlayoutscheme">从数据库中查询一个对象Fieldlayoutscheme</param>
	 * <param name="AId"></param>
	 */
	public Fieldlayoutscheme fieldlayoutschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEME")) {
			String key = ("FIELDLAYOUTSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldlayoutscheme obj = ((Fieldlayoutscheme)(this.getCache().get("FIELDLAYOUTSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayoutscheme> fieldlayoutschemeSelectObjects(FieldlayoutschemeExample fieldlayoutschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEME")) {
			String key = ("FIELDLAYOUTSCHEME_" 
						+ ("queryObject_" + this.getFieldlayoutschemeExampleConditionSql(fieldlayoutschemeQueryCondition)));
			List<Fieldlayoutscheme> obj = ((List<Fieldlayoutscheme>)(this.getCache().get("FIELDLAYOUTSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeSelectObjects(fieldlayoutschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeSelectObjects(fieldlayoutschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayoutscheme> fieldlayoutschemeSelectObjectsWithBLOBs(FieldlayoutschemeExample fieldlayoutschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEME")) {
			String key = ("FIELDLAYOUTSCHEME_" 
						+ ("queryObject_" + this.getFieldlayoutschemeExampleConditionSql(fieldlayoutschemeQueryCondition)));
			List<Fieldlayoutscheme> obj = ((List<Fieldlayoutscheme>)(this.getCache().get("FIELDLAYOUTSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeSelectObjectsWithBLOBs(fieldlayoutschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeSelectObjectsWithBLOBs(fieldlayoutschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldlayoutschemeQuerySelectObjectsCount(FieldlayoutschemeExample fieldlayoutschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEME")) {
			String key = ("FIELDLAYOUTSCHEME_" 
						+ ("queryCount_" + this.getFieldlayoutschemeExampleConditionSql(fieldlayoutschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDLAYOUTSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeQuerySelectObjectsCount(fieldlayoutschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeQuerySelectObjectsCount(fieldlayoutschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldlayoutschemeassociation到数据库中
	 * <param name="fieldlayoutschemeassociation">需要插入的新对象</param>
	 */
	public int fieldlayoutschemeassociationInsert(Fieldlayoutschemeassociation fieldlayoutschemeassociation) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationInsert(fieldlayoutschemeassociation);
		if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
			this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutschemeassociation.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "插入", "ID", kvalue, fieldlayoutschemeassociation, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutschemeassociation">从数据库中删除一个对象Fieldlayoutschemeassociation</param>
	 * <param name="AId"></param>
	 */
	public int fieldlayoutschemeassociationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutschemeassociation">从数据库中删除一个对象Fieldlayoutschemeassociation</param>
	 */
	public int fieldlayoutschemeassociationDeleteByCondition(FieldlayoutschemeassociationExample fieldlayoutschemeassociationQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationDeleteByCondition(fieldlayoutschemeassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
			}
		}
		String kvalue = this.getFieldlayoutschemeassociationExampleConditionSql(fieldlayoutschemeassociationQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "条件删除", "conditionSql", kvalue, fieldlayoutschemeassociationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldlayoutschemeassociation到数据库中
	 * <param name="fieldlayoutschemeassociation">需要更新的Fieldlayoutschemeassociation</param>
	 */
	public int fieldlayoutschemeassociationUpdate(Fieldlayoutschemeassociation fieldlayoutschemeassociation) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationUpdate(fieldlayoutschemeassociation);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutschemeassociation.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "更新", "ID", kvalue, fieldlayoutschemeassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldlayoutschemeassociation到数据库中
	 * <param name="fieldlayoutschemeassociation">需要更新的Fieldlayoutschemeassociation</param>
	 */
	public int fieldlayoutschemeassociationUpdateSelective(Fieldlayoutschemeassociation fieldlayoutschemeassociation) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationUpdateSelective(fieldlayoutschemeassociation);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutschemeassociation.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "部分更新", "ID", kvalue, fieldlayoutschemeassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutschemeassociation到数据库中
	 * <param name="fieldlayoutschemeassociationQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutschemeassociation">需要更新的Fieldlayoutschemeassociation</param>
	 */
	public int fieldlayoutschemeassociationUpdateByCondition(Fieldlayoutschemeassociation fieldlayoutschemeassociation, FieldlayoutschemeassociationExample fieldlayoutschemeassociationQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationUpdateByCondition(fieldlayoutschemeassociation, fieldlayoutschemeassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
			}
		}
		String kvalue = this.getFieldlayoutschemeassociationExampleConditionSql(fieldlayoutschemeassociationQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "条件更新", "conditionSql", kvalue, fieldlayoutschemeassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutschemeassociation到数据库中
	 * <param name="fieldlayoutschemeassociationQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutschemeassociation">需要更新的Fieldlayoutschemeassociation</param>
	 */
	public int fieldlayoutschemeassociationUpdateSelectiveByCondition(Fieldlayoutschemeassociation fieldlayoutschemeassociation, FieldlayoutschemeassociationExample fieldlayoutschemeassociationQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeassociationUpdateSelectiveByCondition(fieldlayoutschemeassociation, fieldlayoutschemeassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEASSOCIATION");
			}
		}
		String kvalue = this.getFieldlayoutschemeassociationExampleConditionSql(fieldlayoutschemeassociationQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEASSOCIATION", "批量部分更新", "conditionSql", kvalue, fieldlayoutschemeassociation, ret);
		return ret;
	}
	
	public String getFieldlayoutschemeassociationExampleConditionSql(FieldlayoutschemeassociationExample fieldlayoutschemeassociationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldlayoutschemeassociationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldlayoutschemeassociationExample.Criteria item = fieldlayoutschemeassociationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldlayoutschemeassociationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldlayoutschemeassociation">从数据库中查询一个对象Fieldlayoutschemeassociation</param>
	 * <param name="AId"></param>
	 */
	public Fieldlayoutschemeassociation fieldlayoutschemeassociationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
			String key = ("FIELDLAYOUTSCHEMEASSOCIATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldlayoutschemeassociation obj = ((Fieldlayoutschemeassociation)(this.getCache().get("FIELDLAYOUTSCHEMEASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeassociationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEMEASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeassociationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeassociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayoutschemeassociation> fieldlayoutschemeassociationSelectObjects(FieldlayoutschemeassociationExample fieldlayoutschemeassociationQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
			String key = ("FIELDLAYOUTSCHEMEASSOCIATION_" 
						+ ("queryObject_" + this.getFieldlayoutschemeassociationExampleConditionSql(fieldlayoutschemeassociationQueryCondition)));
			List<Fieldlayoutschemeassociation> obj = ((List<Fieldlayoutschemeassociation>)(this.getCache().get("FIELDLAYOUTSCHEMEASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeassociationSelectObjects(fieldlayoutschemeassociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEMEASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeassociationSelectObjects(fieldlayoutschemeassociationQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeassociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldlayoutschemeassociationQuerySelectObjectsCount(FieldlayoutschemeassociationExample fieldlayoutschemeassociationQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEMEASSOCIATION")) {
			String key = ("FIELDLAYOUTSCHEMEASSOCIATION_" 
						+ ("queryCount_" + this.getFieldlayoutschemeassociationExampleConditionSql(fieldlayoutschemeassociationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDLAYOUTSCHEMEASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeassociationQuerySelectObjectsCount(fieldlayoutschemeassociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEMEASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeassociationQuerySelectObjectsCount(fieldlayoutschemeassociationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldlayoutschemeentity到数据库中
	 * <param name="fieldlayoutschemeentity">需要插入的新对象</param>
	 */
	public int fieldlayoutschemeentityInsert(Fieldlayoutschemeentity fieldlayoutschemeentity) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityInsert(fieldlayoutschemeentity);
		if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
			this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutschemeentity.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "插入", "ID", kvalue, fieldlayoutschemeentity, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutschemeentity">从数据库中删除一个对象Fieldlayoutschemeentity</param>
	 * <param name="AId"></param>
	 */
	public int fieldlayoutschemeentityDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldlayoutschemeentity">从数据库中删除一个对象Fieldlayoutschemeentity</param>
	 */
	public int fieldlayoutschemeentityDeleteByCondition(FieldlayoutschemeentityExample fieldlayoutschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityDeleteByCondition(fieldlayoutschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
			}
		}
		String kvalue = this.getFieldlayoutschemeentityExampleConditionSql(fieldlayoutschemeentityQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "条件删除", "conditionSql", kvalue, fieldlayoutschemeentityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldlayoutschemeentity到数据库中
	 * <param name="fieldlayoutschemeentity">需要更新的Fieldlayoutschemeentity</param>
	 */
	public int fieldlayoutschemeentityUpdate(Fieldlayoutschemeentity fieldlayoutschemeentity) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityUpdate(fieldlayoutschemeentity);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutschemeentity.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "更新", "ID", kvalue, fieldlayoutschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldlayoutschemeentity到数据库中
	 * <param name="fieldlayoutschemeentity">需要更新的Fieldlayoutschemeentity</param>
	 */
	public int fieldlayoutschemeentityUpdateSelective(Fieldlayoutschemeentity fieldlayoutschemeentity) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityUpdateSelective(fieldlayoutschemeentity);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldlayoutschemeentity.getId());
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "部分更新", "ID", kvalue, fieldlayoutschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutschemeentity到数据库中
	 * <param name="fieldlayoutschemeentityQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutschemeentity">需要更新的Fieldlayoutschemeentity</param>
	 */
	public int fieldlayoutschemeentityUpdateByCondition(Fieldlayoutschemeentity fieldlayoutschemeentity, FieldlayoutschemeentityExample fieldlayoutschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityUpdateByCondition(fieldlayoutschemeentity, fieldlayoutschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
			}
		}
		String kvalue = this.getFieldlayoutschemeentityExampleConditionSql(fieldlayoutschemeentityQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "条件更新", "conditionSql", kvalue, fieldlayoutschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldlayoutschemeentity到数据库中
	 * <param name="fieldlayoutschemeentityQueryCondition">附加的条件</param>
	 * <param name="fieldlayoutschemeentity">需要更新的Fieldlayoutschemeentity</param>
	 */
	public int fieldlayoutschemeentityUpdateSelectiveByCondition(Fieldlayoutschemeentity fieldlayoutschemeentity, FieldlayoutschemeentityExample fieldlayoutschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().fieldlayoutschemeentityUpdateSelectiveByCondition(fieldlayoutschemeentity, fieldlayoutschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
				this.getCache().clear("FIELDLAYOUTSCHEMEENTITY");
			}
		}
		String kvalue = this.getFieldlayoutschemeentityExampleConditionSql(fieldlayoutschemeentityQueryCondition);
		this.operatesLogSimpleAdd("FIELDLAYOUTSCHEMEENTITY", "批量部分更新", "conditionSql", kvalue, fieldlayoutschemeentity, ret);
		return ret;
	}
	
	public String getFieldlayoutschemeentityExampleConditionSql(FieldlayoutschemeentityExample fieldlayoutschemeentityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldlayoutschemeentityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldlayoutschemeentityExample.Criteria item = fieldlayoutschemeentityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldlayoutschemeentityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldlayoutschemeentity">从数据库中查询一个对象Fieldlayoutschemeentity</param>
	 * <param name="AId"></param>
	 */
	public Fieldlayoutschemeentity fieldlayoutschemeentitySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
			String key = ("FIELDLAYOUTSCHEMEENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldlayoutschemeentity obj = ((Fieldlayoutschemeentity)(this.getCache().get("FIELDLAYOUTSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeentitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeentitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeentityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldlayoutschemeentity> fieldlayoutschemeentitySelectObjects(FieldlayoutschemeentityExample fieldlayoutschemeentityQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
			String key = ("FIELDLAYOUTSCHEMEENTITY_" 
						+ ("queryObject_" + this.getFieldlayoutschemeentityExampleConditionSql(fieldlayoutschemeentityQueryCondition)));
			List<Fieldlayoutschemeentity> obj = ((List<Fieldlayoutschemeentity>)(this.getCache().get("FIELDLAYOUTSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeentitySelectObjects(fieldlayoutschemeentityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeentitySelectObjects(fieldlayoutschemeentityQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldlayoutschemeentityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldlayoutschemeentityQuerySelectObjectsCount(FieldlayoutschemeentityExample fieldlayoutschemeentityQueryCondition) throws CacheException {
		if (this.needCache("FIELDLAYOUTSCHEMEENTITY")) {
			String key = ("FIELDLAYOUTSCHEMEENTITY_" 
						+ ("queryCount_" + this.getFieldlayoutschemeentityExampleConditionSql(fieldlayoutschemeentityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDLAYOUTSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldlayoutschemeentityQuerySelectObjectsCount(fieldlayoutschemeentityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDLAYOUTSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldlayoutschemeentityQuerySelectObjectsCount(fieldlayoutschemeentityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldscreen到数据库中
	 * <param name="fieldscreen">需要插入的新对象</param>
	 */
	public int fieldscreenInsert(Fieldscreen fieldscreen) throws CacheException {
		int ret = this.getDao().fieldscreenInsert(fieldscreen);
		if (this.needCache("FIELDSCREEN")) {
			this.getCache().clear("FIELDSCREEN");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreen.getId());
		this.operatesLogSimpleAdd("FIELDSCREEN", "插入", "ID", kvalue, fieldscreen, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreen">从数据库中删除一个对象Fieldscreen</param>
	 * <param name="AId"></param>
	 */
	public int fieldscreenDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldscreenDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREEN")) {
				this.getCache().clear("FIELDSCREEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDSCREEN", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreen">从数据库中删除一个对象Fieldscreen</param>
	 */
	public int fieldscreenDeleteByCondition(FieldscreenExample fieldscreenQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenDeleteByCondition(fieldscreenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREEN")) {
				this.getCache().clear("FIELDSCREEN");
			}
		}
		String kvalue = this.getFieldscreenExampleConditionSql(fieldscreenQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREEN", "条件删除", "conditionSql", kvalue, fieldscreenQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldscreen到数据库中
	 * <param name="fieldscreen">需要更新的Fieldscreen</param>
	 */
	public int fieldscreenUpdate(Fieldscreen fieldscreen) throws CacheException {
		int ret = this.getDao().fieldscreenUpdate(fieldscreen);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREEN")) {
				this.getCache().clear("FIELDSCREEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreen.getId());
		this.operatesLogSimpleAdd("FIELDSCREEN", "更新", "ID", kvalue, fieldscreen, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldscreen到数据库中
	 * <param name="fieldscreen">需要更新的Fieldscreen</param>
	 */
	public int fieldscreenUpdateSelective(Fieldscreen fieldscreen) throws CacheException {
		int ret = this.getDao().fieldscreenUpdateSelective(fieldscreen);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREEN")) {
				this.getCache().clear("FIELDSCREEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreen.getId());
		this.operatesLogSimpleAdd("FIELDSCREEN", "部分更新", "ID", kvalue, fieldscreen, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreen到数据库中
	 * <param name="fieldscreenQueryCondition">附加的条件</param>
	 * <param name="fieldscreen">需要更新的Fieldscreen</param>
	 */
	public int fieldscreenUpdateByCondition(Fieldscreen fieldscreen, FieldscreenExample fieldscreenQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenUpdateByCondition(fieldscreen, fieldscreenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREEN")) {
				this.getCache().clear("FIELDSCREEN");
			}
		}
		String kvalue = this.getFieldscreenExampleConditionSql(fieldscreenQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREEN", "条件更新", "conditionSql", kvalue, fieldscreen, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreen到数据库中
	 * <param name="fieldscreenQueryCondition">附加的条件</param>
	 * <param name="fieldscreen">需要更新的Fieldscreen</param>
	 */
	public int fieldscreenUpdateSelectiveByCondition(Fieldscreen fieldscreen, FieldscreenExample fieldscreenQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenUpdateSelectiveByCondition(fieldscreen, fieldscreenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREEN")) {
				this.getCache().clear("FIELDSCREEN");
			}
		}
		String kvalue = this.getFieldscreenExampleConditionSql(fieldscreenQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREEN", "批量部分更新", "conditionSql", kvalue, fieldscreen, ret);
		return ret;
	}
	
	public String getFieldscreenExampleConditionSql(FieldscreenExample fieldscreenQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldscreenQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldscreenExample.Criteria item = fieldscreenQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldscreenExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldscreen">从数据库中查询一个对象Fieldscreen</param>
	 * <param name="AId"></param>
	 */
	public Fieldscreen fieldscreenSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDSCREEN")) {
			String key = ("FIELDSCREEN_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldscreen obj = ((Fieldscreen)(this.getCache().get("FIELDSCREEN", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldscreenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldscreen> fieldscreenSelectObjects(FieldscreenExample fieldscreenQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREEN")) {
			String key = ("FIELDSCREEN_" 
						+ ("queryObject_" + this.getFieldscreenExampleConditionSql(fieldscreenQueryCondition)));
			List<Fieldscreen> obj = ((List<Fieldscreen>)(this.getCache().get("FIELDSCREEN", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenSelectObjects(fieldscreenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenSelectObjects(fieldscreenQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldscreenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldscreenQuerySelectObjectsCount(FieldscreenExample fieldscreenQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREEN")) {
			String key = ("FIELDSCREEN_" 
						+ ("queryCount_" + this.getFieldscreenExampleConditionSql(fieldscreenQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDSCREEN", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenQuerySelectObjectsCount(fieldscreenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenQuerySelectObjectsCount(fieldscreenQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldscreenlayoutitem到数据库中
	 * <param name="fieldscreenlayoutitem">需要插入的新对象</param>
	 */
	public int fieldscreenlayoutitemInsert(Fieldscreenlayoutitem fieldscreenlayoutitem) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemInsert(fieldscreenlayoutitem);
		if (this.needCache("FIELDSCREENLAYOUTITEM")) {
			this.getCache().clear("FIELDSCREENLAYOUTITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "插入", "ID", kvalue, fieldscreenlayoutitem, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreenlayoutitem">从数据库中删除一个对象Fieldscreenlayoutitem</param>
	 * <param name="AId"></param>
	 */
	public int fieldscreenlayoutitemDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENLAYOUTITEM")) {
				this.getCache().clear("FIELDSCREENLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreenlayoutitem">从数据库中删除一个对象Fieldscreenlayoutitem</param>
	 */
	public int fieldscreenlayoutitemDeleteByCondition(FieldscreenlayoutitemExample fieldscreenlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemDeleteByCondition(fieldscreenlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENLAYOUTITEM")) {
				this.getCache().clear("FIELDSCREENLAYOUTITEM");
			}
		}
		String kvalue = this.getFieldscreenlayoutitemExampleConditionSql(fieldscreenlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "条件删除", "conditionSql", kvalue, fieldscreenlayoutitemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldscreenlayoutitem到数据库中
	 * <param name="fieldscreenlayoutitem">需要更新的Fieldscreenlayoutitem</param>
	 */
	public int fieldscreenlayoutitemUpdate(Fieldscreenlayoutitem fieldscreenlayoutitem) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemUpdate(fieldscreenlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENLAYOUTITEM")) {
				this.getCache().clear("FIELDSCREENLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "更新", "ID", kvalue, fieldscreenlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldscreenlayoutitem到数据库中
	 * <param name="fieldscreenlayoutitem">需要更新的Fieldscreenlayoutitem</param>
	 */
	public int fieldscreenlayoutitemUpdateSelective(Fieldscreenlayoutitem fieldscreenlayoutitem) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemUpdateSelective(fieldscreenlayoutitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENLAYOUTITEM")) {
				this.getCache().clear("FIELDSCREENLAYOUTITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenlayoutitem.getId());
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "部分更新", "ID", kvalue, fieldscreenlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreenlayoutitem到数据库中
	 * <param name="fieldscreenlayoutitemQueryCondition">附加的条件</param>
	 * <param name="fieldscreenlayoutitem">需要更新的Fieldscreenlayoutitem</param>
	 */
	public int fieldscreenlayoutitemUpdateByCondition(Fieldscreenlayoutitem fieldscreenlayoutitem, FieldscreenlayoutitemExample fieldscreenlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemUpdateByCondition(fieldscreenlayoutitem, fieldscreenlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENLAYOUTITEM")) {
				this.getCache().clear("FIELDSCREENLAYOUTITEM");
			}
		}
		String kvalue = this.getFieldscreenlayoutitemExampleConditionSql(fieldscreenlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "条件更新", "conditionSql", kvalue, fieldscreenlayoutitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreenlayoutitem到数据库中
	 * <param name="fieldscreenlayoutitemQueryCondition">附加的条件</param>
	 * <param name="fieldscreenlayoutitem">需要更新的Fieldscreenlayoutitem</param>
	 */
	public int fieldscreenlayoutitemUpdateSelectiveByCondition(Fieldscreenlayoutitem fieldscreenlayoutitem, FieldscreenlayoutitemExample fieldscreenlayoutitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenlayoutitemUpdateSelectiveByCondition(fieldscreenlayoutitem, fieldscreenlayoutitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENLAYOUTITEM")) {
				this.getCache().clear("FIELDSCREENLAYOUTITEM");
			}
		}
		String kvalue = this.getFieldscreenlayoutitemExampleConditionSql(fieldscreenlayoutitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENLAYOUTITEM", "批量部分更新", "conditionSql", kvalue, fieldscreenlayoutitem, ret);
		return ret;
	}
	
	public String getFieldscreenlayoutitemExampleConditionSql(FieldscreenlayoutitemExample fieldscreenlayoutitemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldscreenlayoutitemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldscreenlayoutitemExample.Criteria item = fieldscreenlayoutitemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldscreenlayoutitemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldscreenlayoutitem">从数据库中查询一个对象Fieldscreenlayoutitem</param>
	 * <param name="AId"></param>
	 */
	public Fieldscreenlayoutitem fieldscreenlayoutitemSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDSCREENLAYOUTITEM")) {
			String key = ("FIELDSCREENLAYOUTITEM_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldscreenlayoutitem obj = ((Fieldscreenlayoutitem)(this.getCache().get("FIELDSCREENLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenlayoutitemSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenlayoutitemSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldscreenlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldscreenlayoutitem> fieldscreenlayoutitemSelectObjects(FieldscreenlayoutitemExample fieldscreenlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENLAYOUTITEM")) {
			String key = ("FIELDSCREENLAYOUTITEM_" 
						+ ("queryObject_" + this.getFieldscreenlayoutitemExampleConditionSql(fieldscreenlayoutitemQueryCondition)));
			List<Fieldscreenlayoutitem> obj = ((List<Fieldscreenlayoutitem>)(this.getCache().get("FIELDSCREENLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenlayoutitemSelectObjects(fieldscreenlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenlayoutitemSelectObjects(fieldscreenlayoutitemQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldscreenlayoutitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldscreenlayoutitemQuerySelectObjectsCount(FieldscreenlayoutitemExample fieldscreenlayoutitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENLAYOUTITEM")) {
			String key = ("FIELDSCREENLAYOUTITEM_" 
						+ ("queryCount_" + this.getFieldscreenlayoutitemExampleConditionSql(fieldscreenlayoutitemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDSCREENLAYOUTITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenlayoutitemQuerySelectObjectsCount(fieldscreenlayoutitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENLAYOUTITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenlayoutitemQuerySelectObjectsCount(fieldscreenlayoutitemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldscreenscheme到数据库中
	 * <param name="fieldscreenscheme">需要插入的新对象</param>
	 */
	public int fieldscreenschemeInsert(Fieldscreenscheme fieldscreenscheme) throws CacheException {
		int ret = this.getDao().fieldscreenschemeInsert(fieldscreenscheme);
		if (this.needCache("FIELDSCREENSCHEME")) {
			this.getCache().clear("FIELDSCREENSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenscheme.getId());
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "插入", "ID", kvalue, fieldscreenscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreenscheme">从数据库中删除一个对象Fieldscreenscheme</param>
	 * <param name="AId"></param>
	 */
	public int fieldscreenschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldscreenschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEME")) {
				this.getCache().clear("FIELDSCREENSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreenscheme">从数据库中删除一个对象Fieldscreenscheme</param>
	 */
	public int fieldscreenschemeDeleteByCondition(FieldscreenschemeExample fieldscreenschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenschemeDeleteByCondition(fieldscreenschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEME")) {
				this.getCache().clear("FIELDSCREENSCHEME");
			}
		}
		String kvalue = this.getFieldscreenschemeExampleConditionSql(fieldscreenschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "条件删除", "conditionSql", kvalue, fieldscreenschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldscreenscheme到数据库中
	 * <param name="fieldscreenscheme">需要更新的Fieldscreenscheme</param>
	 */
	public int fieldscreenschemeUpdate(Fieldscreenscheme fieldscreenscheme) throws CacheException {
		int ret = this.getDao().fieldscreenschemeUpdate(fieldscreenscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEME")) {
				this.getCache().clear("FIELDSCREENSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenscheme.getId());
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "更新", "ID", kvalue, fieldscreenscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldscreenscheme到数据库中
	 * <param name="fieldscreenscheme">需要更新的Fieldscreenscheme</param>
	 */
	public int fieldscreenschemeUpdateSelective(Fieldscreenscheme fieldscreenscheme) throws CacheException {
		int ret = this.getDao().fieldscreenschemeUpdateSelective(fieldscreenscheme);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEME")) {
				this.getCache().clear("FIELDSCREENSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenscheme.getId());
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "部分更新", "ID", kvalue, fieldscreenscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreenscheme到数据库中
	 * <param name="fieldscreenschemeQueryCondition">附加的条件</param>
	 * <param name="fieldscreenscheme">需要更新的Fieldscreenscheme</param>
	 */
	public int fieldscreenschemeUpdateByCondition(Fieldscreenscheme fieldscreenscheme, FieldscreenschemeExample fieldscreenschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenschemeUpdateByCondition(fieldscreenscheme, fieldscreenschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEME")) {
				this.getCache().clear("FIELDSCREENSCHEME");
			}
		}
		String kvalue = this.getFieldscreenschemeExampleConditionSql(fieldscreenschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "条件更新", "conditionSql", kvalue, fieldscreenscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreenscheme到数据库中
	 * <param name="fieldscreenschemeQueryCondition">附加的条件</param>
	 * <param name="fieldscreenscheme">需要更新的Fieldscreenscheme</param>
	 */
	public int fieldscreenschemeUpdateSelectiveByCondition(Fieldscreenscheme fieldscreenscheme, FieldscreenschemeExample fieldscreenschemeQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenschemeUpdateSelectiveByCondition(fieldscreenscheme, fieldscreenschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEME")) {
				this.getCache().clear("FIELDSCREENSCHEME");
			}
		}
		String kvalue = this.getFieldscreenschemeExampleConditionSql(fieldscreenschemeQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEME", "批量部分更新", "conditionSql", kvalue, fieldscreenscheme, ret);
		return ret;
	}
	
	public String getFieldscreenschemeExampleConditionSql(FieldscreenschemeExample fieldscreenschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldscreenschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldscreenschemeExample.Criteria item = fieldscreenschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldscreenschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldscreenscheme">从数据库中查询一个对象Fieldscreenscheme</param>
	 * <param name="AId"></param>
	 */
	public Fieldscreenscheme fieldscreenschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDSCREENSCHEME")) {
			String key = ("FIELDSCREENSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldscreenscheme obj = ((Fieldscreenscheme)(this.getCache().get("FIELDSCREENSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldscreenschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldscreenscheme> fieldscreenschemeSelectObjects(FieldscreenschemeExample fieldscreenschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENSCHEME")) {
			String key = ("FIELDSCREENSCHEME_" 
						+ ("queryObject_" + this.getFieldscreenschemeExampleConditionSql(fieldscreenschemeQueryCondition)));
			List<Fieldscreenscheme> obj = ((List<Fieldscreenscheme>)(this.getCache().get("FIELDSCREENSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenschemeSelectObjects(fieldscreenschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenschemeSelectObjects(fieldscreenschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldscreenschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldscreenschemeQuerySelectObjectsCount(FieldscreenschemeExample fieldscreenschemeQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENSCHEME")) {
			String key = ("FIELDSCREENSCHEME_" 
						+ ("queryCount_" + this.getFieldscreenschemeExampleConditionSql(fieldscreenschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDSCREENSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenschemeQuerySelectObjectsCount(fieldscreenschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenschemeQuerySelectObjectsCount(fieldscreenschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldscreenschemeitem到数据库中
	 * <param name="fieldscreenschemeitem">需要插入的新对象</param>
	 */
	public int fieldscreenschemeitemInsert(Fieldscreenschemeitem fieldscreenschemeitem) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemInsert(fieldscreenschemeitem);
		if (this.needCache("FIELDSCREENSCHEMEITEM")) {
			this.getCache().clear("FIELDSCREENSCHEMEITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenschemeitem.getId());
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "插入", "ID", kvalue, fieldscreenschemeitem, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreenschemeitem">从数据库中删除一个对象Fieldscreenschemeitem</param>
	 * <param name="AId"></param>
	 */
	public int fieldscreenschemeitemDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEMEITEM")) {
				this.getCache().clear("FIELDSCREENSCHEMEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreenschemeitem">从数据库中删除一个对象Fieldscreenschemeitem</param>
	 */
	public int fieldscreenschemeitemDeleteByCondition(FieldscreenschemeitemExample fieldscreenschemeitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemDeleteByCondition(fieldscreenschemeitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEMEITEM")) {
				this.getCache().clear("FIELDSCREENSCHEMEITEM");
			}
		}
		String kvalue = this.getFieldscreenschemeitemExampleConditionSql(fieldscreenschemeitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "条件删除", "conditionSql", kvalue, fieldscreenschemeitemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldscreenschemeitem到数据库中
	 * <param name="fieldscreenschemeitem">需要更新的Fieldscreenschemeitem</param>
	 */
	public int fieldscreenschemeitemUpdate(Fieldscreenschemeitem fieldscreenschemeitem) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemUpdate(fieldscreenschemeitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEMEITEM")) {
				this.getCache().clear("FIELDSCREENSCHEMEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenschemeitem.getId());
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "更新", "ID", kvalue, fieldscreenschemeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldscreenschemeitem到数据库中
	 * <param name="fieldscreenschemeitem">需要更新的Fieldscreenschemeitem</param>
	 */
	public int fieldscreenschemeitemUpdateSelective(Fieldscreenschemeitem fieldscreenschemeitem) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemUpdateSelective(fieldscreenschemeitem);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEMEITEM")) {
				this.getCache().clear("FIELDSCREENSCHEMEITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreenschemeitem.getId());
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "部分更新", "ID", kvalue, fieldscreenschemeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreenschemeitem到数据库中
	 * <param name="fieldscreenschemeitemQueryCondition">附加的条件</param>
	 * <param name="fieldscreenschemeitem">需要更新的Fieldscreenschemeitem</param>
	 */
	public int fieldscreenschemeitemUpdateByCondition(Fieldscreenschemeitem fieldscreenschemeitem, FieldscreenschemeitemExample fieldscreenschemeitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemUpdateByCondition(fieldscreenschemeitem, fieldscreenschemeitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEMEITEM")) {
				this.getCache().clear("FIELDSCREENSCHEMEITEM");
			}
		}
		String kvalue = this.getFieldscreenschemeitemExampleConditionSql(fieldscreenschemeitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "条件更新", "conditionSql", kvalue, fieldscreenschemeitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreenschemeitem到数据库中
	 * <param name="fieldscreenschemeitemQueryCondition">附加的条件</param>
	 * <param name="fieldscreenschemeitem">需要更新的Fieldscreenschemeitem</param>
	 */
	public int fieldscreenschemeitemUpdateSelectiveByCondition(Fieldscreenschemeitem fieldscreenschemeitem, FieldscreenschemeitemExample fieldscreenschemeitemQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreenschemeitemUpdateSelectiveByCondition(fieldscreenschemeitem, fieldscreenschemeitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENSCHEMEITEM")) {
				this.getCache().clear("FIELDSCREENSCHEMEITEM");
			}
		}
		String kvalue = this.getFieldscreenschemeitemExampleConditionSql(fieldscreenschemeitemQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENSCHEMEITEM", "批量部分更新", "conditionSql", kvalue, fieldscreenschemeitem, ret);
		return ret;
	}
	
	public String getFieldscreenschemeitemExampleConditionSql(FieldscreenschemeitemExample fieldscreenschemeitemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldscreenschemeitemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldscreenschemeitemExample.Criteria item = fieldscreenschemeitemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldscreenschemeitemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldscreenschemeitem">从数据库中查询一个对象Fieldscreenschemeitem</param>
	 * <param name="AId"></param>
	 */
	public Fieldscreenschemeitem fieldscreenschemeitemSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDSCREENSCHEMEITEM")) {
			String key = ("FIELDSCREENSCHEMEITEM_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldscreenschemeitem obj = ((Fieldscreenschemeitem)(this.getCache().get("FIELDSCREENSCHEMEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenschemeitemSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENSCHEMEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenschemeitemSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldscreenschemeitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldscreenschemeitem> fieldscreenschemeitemSelectObjects(FieldscreenschemeitemExample fieldscreenschemeitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENSCHEMEITEM")) {
			String key = ("FIELDSCREENSCHEMEITEM_" 
						+ ("queryObject_" + this.getFieldscreenschemeitemExampleConditionSql(fieldscreenschemeitemQueryCondition)));
			List<Fieldscreenschemeitem> obj = ((List<Fieldscreenschemeitem>)(this.getCache().get("FIELDSCREENSCHEMEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenschemeitemSelectObjects(fieldscreenschemeitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENSCHEMEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenschemeitemSelectObjects(fieldscreenschemeitemQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldscreenschemeitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldscreenschemeitemQuerySelectObjectsCount(FieldscreenschemeitemExample fieldscreenschemeitemQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENSCHEMEITEM")) {
			String key = ("FIELDSCREENSCHEMEITEM_" 
						+ ("queryCount_" + this.getFieldscreenschemeitemExampleConditionSql(fieldscreenschemeitemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDSCREENSCHEMEITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreenschemeitemQuerySelectObjectsCount(fieldscreenschemeitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENSCHEMEITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreenschemeitemQuerySelectObjectsCount(fieldscreenschemeitemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fieldscreentab到数据库中
	 * <param name="fieldscreentab">需要插入的新对象</param>
	 */
	public int fieldscreentabInsert(Fieldscreentab fieldscreentab) throws CacheException {
		int ret = this.getDao().fieldscreentabInsert(fieldscreentab);
		if (this.needCache("FIELDSCREENTAB")) {
			this.getCache().clear("FIELDSCREENTAB");
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreentab.getId());
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "插入", "ID", kvalue, fieldscreentab, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreentab">从数据库中删除一个对象Fieldscreentab</param>
	 * <param name="AId"></param>
	 */
	public int fieldscreentabDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fieldscreentabDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENTAB")) {
				this.getCache().clear("FIELDSCREENTAB");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fieldscreentab">从数据库中删除一个对象Fieldscreentab</param>
	 */
	public int fieldscreentabDeleteByCondition(FieldscreentabExample fieldscreentabQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreentabDeleteByCondition(fieldscreentabQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENTAB")) {
				this.getCache().clear("FIELDSCREENTAB");
			}
		}
		String kvalue = this.getFieldscreentabExampleConditionSql(fieldscreentabQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "条件删除", "conditionSql", kvalue, fieldscreentabQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fieldscreentab到数据库中
	 * <param name="fieldscreentab">需要更新的Fieldscreentab</param>
	 */
	public int fieldscreentabUpdate(Fieldscreentab fieldscreentab) throws CacheException {
		int ret = this.getDao().fieldscreentabUpdate(fieldscreentab);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENTAB")) {
				this.getCache().clear("FIELDSCREENTAB");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreentab.getId());
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "更新", "ID", kvalue, fieldscreentab, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fieldscreentab到数据库中
	 * <param name="fieldscreentab">需要更新的Fieldscreentab</param>
	 */
	public int fieldscreentabUpdateSelective(Fieldscreentab fieldscreentab) throws CacheException {
		int ret = this.getDao().fieldscreentabUpdateSelective(fieldscreentab);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENTAB")) {
				this.getCache().clear("FIELDSCREENTAB");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fieldscreentab.getId());
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "部分更新", "ID", kvalue, fieldscreentab, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreentab到数据库中
	 * <param name="fieldscreentabQueryCondition">附加的条件</param>
	 * <param name="fieldscreentab">需要更新的Fieldscreentab</param>
	 */
	public int fieldscreentabUpdateByCondition(Fieldscreentab fieldscreentab, FieldscreentabExample fieldscreentabQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreentabUpdateByCondition(fieldscreentab, fieldscreentabQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENTAB")) {
				this.getCache().clear("FIELDSCREENTAB");
			}
		}
		String kvalue = this.getFieldscreentabExampleConditionSql(fieldscreentabQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "条件更新", "conditionSql", kvalue, fieldscreentab, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fieldscreentab到数据库中
	 * <param name="fieldscreentabQueryCondition">附加的条件</param>
	 * <param name="fieldscreentab">需要更新的Fieldscreentab</param>
	 */
	public int fieldscreentabUpdateSelectiveByCondition(Fieldscreentab fieldscreentab, FieldscreentabExample fieldscreentabQueryCondition) throws CacheException {
		int ret = this.getDao().fieldscreentabUpdateSelectiveByCondition(fieldscreentab, fieldscreentabQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FIELDSCREENTAB")) {
				this.getCache().clear("FIELDSCREENTAB");
			}
		}
		String kvalue = this.getFieldscreentabExampleConditionSql(fieldscreentabQueryCondition);
		this.operatesLogSimpleAdd("FIELDSCREENTAB", "批量部分更新", "conditionSql", kvalue, fieldscreentab, ret);
		return ret;
	}
	
	public String getFieldscreentabExampleConditionSql(FieldscreentabExample fieldscreentabQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fieldscreentabQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FieldscreentabExample.Criteria item = fieldscreentabQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FieldscreentabExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fieldscreentab">从数据库中查询一个对象Fieldscreentab</param>
	 * <param name="AId"></param>
	 */
	public Fieldscreentab fieldscreentabSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FIELDSCREENTAB")) {
			String key = ("FIELDSCREENTAB_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fieldscreentab obj = ((Fieldscreentab)(this.getCache().get("FIELDSCREENTAB", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreentabSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENTAB", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreentabSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fieldscreentabQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fieldscreentab> fieldscreentabSelectObjects(FieldscreentabExample fieldscreentabQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENTAB")) {
			String key = ("FIELDSCREENTAB_" 
						+ ("queryObject_" + this.getFieldscreentabExampleConditionSql(fieldscreentabQueryCondition)));
			List<Fieldscreentab> obj = ((List<Fieldscreentab>)(this.getCache().get("FIELDSCREENTAB", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreentabSelectObjects(fieldscreentabQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENTAB", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreentabSelectObjects(fieldscreentabQueryCondition);
		}
	}
	
	/**
	 * <param name="fieldscreentabQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fieldscreentabQuerySelectObjectsCount(FieldscreentabExample fieldscreentabQueryCondition) throws CacheException {
		if (this.needCache("FIELDSCREENTAB")) {
			String key = ("FIELDSCREENTAB_" 
						+ ("queryCount_" + this.getFieldscreentabExampleConditionSql(fieldscreentabQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FIELDSCREENTAB", key)));
			if ((obj == null)) {
				obj = this.getDao().fieldscreentabQuerySelectObjectsCount(fieldscreentabQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FIELDSCREENTAB", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fieldscreentabQuerySelectObjectsCount(fieldscreentabQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Fileattachment到数据库中
	 * <param name="fileattachment">需要插入的新对象</param>
	 */
	public int fileattachmentInsert(Fileattachment fileattachment) throws CacheException {
		int ret = this.getDao().fileattachmentInsert(fileattachment);
		if (this.needCache("FILEATTACHMENT")) {
			this.getCache().clear("FILEATTACHMENT");
		}
		String kvalue = "";
		kvalue = (kvalue + fileattachment.getId());
		this.operatesLogSimpleAdd("FILEATTACHMENT", "插入", "ID", kvalue, fileattachment, ret);
		return ret;
	}
	
	/**
	 * <param name="fileattachment">从数据库中删除一个对象Fileattachment</param>
	 * <param name="AId"></param>
	 */
	public int fileattachmentDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().fileattachmentDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FILEATTACHMENT")) {
				this.getCache().clear("FILEATTACHMENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FILEATTACHMENT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="fileattachment">从数据库中删除一个对象Fileattachment</param>
	 */
	public int fileattachmentDeleteByCondition(FileattachmentExample fileattachmentQueryCondition) throws CacheException {
		int ret = this.getDao().fileattachmentDeleteByCondition(fileattachmentQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FILEATTACHMENT")) {
				this.getCache().clear("FILEATTACHMENT");
			}
		}
		String kvalue = this.getFileattachmentExampleConditionSql(fileattachmentQueryCondition);
		this.operatesLogSimpleAdd("FILEATTACHMENT", "条件删除", "conditionSql", kvalue, fileattachmentQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Fileattachment到数据库中
	 * <param name="fileattachment">需要更新的Fileattachment</param>
	 */
	public int fileattachmentUpdate(Fileattachment fileattachment) throws CacheException {
		int ret = this.getDao().fileattachmentUpdate(fileattachment);
		if ((ret > 0)) {
			if (this.needCache("FILEATTACHMENT")) {
				this.getCache().clear("FILEATTACHMENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fileattachment.getId());
		this.operatesLogSimpleAdd("FILEATTACHMENT", "更新", "ID", kvalue, fileattachment, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Fileattachment到数据库中
	 * <param name="fileattachment">需要更新的Fileattachment</param>
	 */
	public int fileattachmentUpdateSelective(Fileattachment fileattachment) throws CacheException {
		int ret = this.getDao().fileattachmentUpdateSelective(fileattachment);
		if ((ret > 0)) {
			if (this.needCache("FILEATTACHMENT")) {
				this.getCache().clear("FILEATTACHMENT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + fileattachment.getId());
		this.operatesLogSimpleAdd("FILEATTACHMENT", "部分更新", "ID", kvalue, fileattachment, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fileattachment到数据库中
	 * <param name="fileattachmentQueryCondition">附加的条件</param>
	 * <param name="fileattachment">需要更新的Fileattachment</param>
	 */
	public int fileattachmentUpdateByCondition(Fileattachment fileattachment, FileattachmentExample fileattachmentQueryCondition) throws CacheException {
		int ret = this.getDao().fileattachmentUpdateByCondition(fileattachment, fileattachmentQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FILEATTACHMENT")) {
				this.getCache().clear("FILEATTACHMENT");
			}
		}
		String kvalue = this.getFileattachmentExampleConditionSql(fileattachmentQueryCondition);
		this.operatesLogSimpleAdd("FILEATTACHMENT", "条件更新", "conditionSql", kvalue, fileattachment, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Fileattachment到数据库中
	 * <param name="fileattachmentQueryCondition">附加的条件</param>
	 * <param name="fileattachment">需要更新的Fileattachment</param>
	 */
	public int fileattachmentUpdateSelectiveByCondition(Fileattachment fileattachment, FileattachmentExample fileattachmentQueryCondition) throws CacheException {
		int ret = this.getDao().fileattachmentUpdateSelectiveByCondition(fileattachment, fileattachmentQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FILEATTACHMENT")) {
				this.getCache().clear("FILEATTACHMENT");
			}
		}
		String kvalue = this.getFileattachmentExampleConditionSql(fileattachmentQueryCondition);
		this.operatesLogSimpleAdd("FILEATTACHMENT", "批量部分更新", "conditionSql", kvalue, fileattachment, ret);
		return ret;
	}
	
	public String getFileattachmentExampleConditionSql(FileattachmentExample fileattachmentQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < fileattachmentQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FileattachmentExample.Criteria item = fileattachmentQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FileattachmentExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="fileattachment">从数据库中查询一个对象Fileattachment</param>
	 * <param name="AId"></param>
	 */
	public Fileattachment fileattachmentSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FILEATTACHMENT")) {
			String key = ("FILEATTACHMENT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Fileattachment obj = ((Fileattachment)(this.getCache().get("FILEATTACHMENT", key)));
			if ((obj == null)) {
				obj = this.getDao().fileattachmentSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FILEATTACHMENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fileattachmentSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="fileattachmentQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Fileattachment> fileattachmentSelectObjects(FileattachmentExample fileattachmentQueryCondition) throws CacheException {
		if (this.needCache("FILEATTACHMENT")) {
			String key = ("FILEATTACHMENT_" 
						+ ("queryObject_" + this.getFileattachmentExampleConditionSql(fileattachmentQueryCondition)));
			List<Fileattachment> obj = ((List<Fileattachment>)(this.getCache().get("FILEATTACHMENT", key)));
			if ((obj == null)) {
				obj = this.getDao().fileattachmentSelectObjects(fileattachmentQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FILEATTACHMENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fileattachmentSelectObjects(fileattachmentQueryCondition);
		}
	}
	
	/**
	 * <param name="fileattachmentQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int fileattachmentQuerySelectObjectsCount(FileattachmentExample fileattachmentQueryCondition) throws CacheException {
		if (this.needCache("FILEATTACHMENT")) {
			String key = ("FILEATTACHMENT_" 
						+ ("queryCount_" + this.getFileattachmentExampleConditionSql(fileattachmentQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FILEATTACHMENT", key)));
			if ((obj == null)) {
				obj = this.getDao().fileattachmentQuerySelectObjectsCount(fileattachmentQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FILEATTACHMENT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().fileattachmentQuerySelectObjectsCount(fileattachmentQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Filtersubscription到数据库中
	 * <param name="filtersubscription">需要插入的新对象</param>
	 */
	public int filtersubscriptionInsert(Filtersubscription filtersubscription) throws CacheException {
		int ret = this.getDao().filtersubscriptionInsert(filtersubscription);
		if (this.needCache("FILTERSUBSCRIPTION")) {
			this.getCache().clear("FILTERSUBSCRIPTION");
		}
		String kvalue = "";
		kvalue = (kvalue + filtersubscription.getId());
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "插入", "ID", kvalue, filtersubscription, ret);
		return ret;
	}
	
	/**
	 * <param name="filtersubscription">从数据库中删除一个对象Filtersubscription</param>
	 * <param name="AId"></param>
	 */
	public int filtersubscriptionDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().filtersubscriptionDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("FILTERSUBSCRIPTION")) {
				this.getCache().clear("FILTERSUBSCRIPTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="filtersubscription">从数据库中删除一个对象Filtersubscription</param>
	 */
	public int filtersubscriptionDeleteByCondition(FiltersubscriptionExample filtersubscriptionQueryCondition) throws CacheException {
		int ret = this.getDao().filtersubscriptionDeleteByCondition(filtersubscriptionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FILTERSUBSCRIPTION")) {
				this.getCache().clear("FILTERSUBSCRIPTION");
			}
		}
		String kvalue = this.getFiltersubscriptionExampleConditionSql(filtersubscriptionQueryCondition);
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "条件删除", "conditionSql", kvalue, filtersubscriptionQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Filtersubscription到数据库中
	 * <param name="filtersubscription">需要更新的Filtersubscription</param>
	 */
	public int filtersubscriptionUpdate(Filtersubscription filtersubscription) throws CacheException {
		int ret = this.getDao().filtersubscriptionUpdate(filtersubscription);
		if ((ret > 0)) {
			if (this.needCache("FILTERSUBSCRIPTION")) {
				this.getCache().clear("FILTERSUBSCRIPTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + filtersubscription.getId());
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "更新", "ID", kvalue, filtersubscription, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Filtersubscription到数据库中
	 * <param name="filtersubscription">需要更新的Filtersubscription</param>
	 */
	public int filtersubscriptionUpdateSelective(Filtersubscription filtersubscription) throws CacheException {
		int ret = this.getDao().filtersubscriptionUpdateSelective(filtersubscription);
		if ((ret > 0)) {
			if (this.needCache("FILTERSUBSCRIPTION")) {
				this.getCache().clear("FILTERSUBSCRIPTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + filtersubscription.getId());
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "部分更新", "ID", kvalue, filtersubscription, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Filtersubscription到数据库中
	 * <param name="filtersubscriptionQueryCondition">附加的条件</param>
	 * <param name="filtersubscription">需要更新的Filtersubscription</param>
	 */
	public int filtersubscriptionUpdateByCondition(Filtersubscription filtersubscription, FiltersubscriptionExample filtersubscriptionQueryCondition) throws CacheException {
		int ret = this.getDao().filtersubscriptionUpdateByCondition(filtersubscription, filtersubscriptionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FILTERSUBSCRIPTION")) {
				this.getCache().clear("FILTERSUBSCRIPTION");
			}
		}
		String kvalue = this.getFiltersubscriptionExampleConditionSql(filtersubscriptionQueryCondition);
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "条件更新", "conditionSql", kvalue, filtersubscription, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Filtersubscription到数据库中
	 * <param name="filtersubscriptionQueryCondition">附加的条件</param>
	 * <param name="filtersubscription">需要更新的Filtersubscription</param>
	 */
	public int filtersubscriptionUpdateSelectiveByCondition(Filtersubscription filtersubscription, FiltersubscriptionExample filtersubscriptionQueryCondition) throws CacheException {
		int ret = this.getDao().filtersubscriptionUpdateSelectiveByCondition(filtersubscription, filtersubscriptionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("FILTERSUBSCRIPTION")) {
				this.getCache().clear("FILTERSUBSCRIPTION");
			}
		}
		String kvalue = this.getFiltersubscriptionExampleConditionSql(filtersubscriptionQueryCondition);
		this.operatesLogSimpleAdd("FILTERSUBSCRIPTION", "批量部分更新", "conditionSql", kvalue, filtersubscription, ret);
		return ret;
	}
	
	public String getFiltersubscriptionExampleConditionSql(FiltersubscriptionExample filtersubscriptionQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < filtersubscriptionQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			FiltersubscriptionExample.Criteria item = filtersubscriptionQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					FiltersubscriptionExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="filtersubscription">从数据库中查询一个对象Filtersubscription</param>
	 * <param name="AId"></param>
	 */
	public Filtersubscription filtersubscriptionSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("FILTERSUBSCRIPTION")) {
			String key = ("FILTERSUBSCRIPTION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Filtersubscription obj = ((Filtersubscription)(this.getCache().get("FILTERSUBSCRIPTION", key)));
			if ((obj == null)) {
				obj = this.getDao().filtersubscriptionSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("FILTERSUBSCRIPTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().filtersubscriptionSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="filtersubscriptionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Filtersubscription> filtersubscriptionSelectObjects(FiltersubscriptionExample filtersubscriptionQueryCondition) throws CacheException {
		if (this.needCache("FILTERSUBSCRIPTION")) {
			String key = ("FILTERSUBSCRIPTION_" 
						+ ("queryObject_" + this.getFiltersubscriptionExampleConditionSql(filtersubscriptionQueryCondition)));
			List<Filtersubscription> obj = ((List<Filtersubscription>)(this.getCache().get("FILTERSUBSCRIPTION", key)));
			if ((obj == null)) {
				obj = this.getDao().filtersubscriptionSelectObjects(filtersubscriptionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FILTERSUBSCRIPTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().filtersubscriptionSelectObjects(filtersubscriptionQueryCondition);
		}
	}
	
	/**
	 * <param name="filtersubscriptionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int filtersubscriptionQuerySelectObjectsCount(FiltersubscriptionExample filtersubscriptionQueryCondition) throws CacheException {
		if (this.needCache("FILTERSUBSCRIPTION")) {
			String key = ("FILTERSUBSCRIPTION_" 
						+ ("queryCount_" + this.getFiltersubscriptionExampleConditionSql(filtersubscriptionQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("FILTERSUBSCRIPTION", key)));
			if ((obj == null)) {
				obj = this.getDao().filtersubscriptionQuerySelectObjectsCount(filtersubscriptionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("FILTERSUBSCRIPTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().filtersubscriptionQuerySelectObjectsCount(filtersubscriptionQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Gadgetuserpreference到数据库中
	 * <param name="gadgetuserpreference">需要插入的新对象</param>
	 */
	public int gadgetuserpreferenceInsert(Gadgetuserpreference gadgetuserpreference) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceInsert(gadgetuserpreference);
		if (this.needCache("GADGETUSERPREFERENCE")) {
			this.getCache().clear("GADGETUSERPREFERENCE");
		}
		String kvalue = "";
		kvalue = (kvalue + gadgetuserpreference.getId());
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "插入", "ID", kvalue, gadgetuserpreference, ret);
		return ret;
	}
	
	/**
	 * <param name="gadgetuserpreference">从数据库中删除一个对象Gadgetuserpreference</param>
	 * <param name="AId"></param>
	 */
	public int gadgetuserpreferenceDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="gadgetuserpreference">从数据库中删除一个对象Gadgetuserpreference</param>
	 */
	public int gadgetuserpreferenceDeleteByCondition(GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceDeleteByCondition(gadgetuserpreferenceQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = this.getGadgetuserpreferenceExampleConditionSql(gadgetuserpreferenceQueryCondition);
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "条件删除", "conditionSql", kvalue, gadgetuserpreferenceQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Gadgetuserpreference到数据库中
	 * <param name="gadgetuserpreference">需要更新的Gadgetuserpreference</param>
	 */
	public int gadgetuserpreferenceUpdate(Gadgetuserpreference gadgetuserpreference) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceUpdate(gadgetuserpreference);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + gadgetuserpreference.getId());
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "更新", "ID", kvalue, gadgetuserpreference, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Gadgetuserpreference到数据库中
	 * <param name="gadgetuserpreference">需要更新的Gadgetuserpreference</param>
	 */
	public int gadgetuserpreferenceUpdateSelective(Gadgetuserpreference gadgetuserpreference) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceUpdateSelective(gadgetuserpreference);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + gadgetuserpreference.getId());
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "部分更新", "ID", kvalue, gadgetuserpreference, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Gadgetuserpreference到数据库中
	 * <param name="gadgetuserpreference">需要更新的Gadgetuserpreference</param>
	 */
	public int gadgetuserpreferenceUpdateWithBlobs(Gadgetuserpreference gadgetuserpreference) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceUpdateWithBlobs(gadgetuserpreference);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + gadgetuserpreference.getId());
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "更新含Blob", "ID", kvalue, gadgetuserpreference, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Gadgetuserpreference到数据库中
	 * <param name="gadgetuserpreferenceQueryCondition">附加的条件</param>
	 * <param name="gadgetuserpreference">需要更新的Gadgetuserpreference</param>
	 */
	public int gadgetuserpreferenceUpdateByCondition(Gadgetuserpreference gadgetuserpreference, GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceUpdateByCondition(gadgetuserpreference, gadgetuserpreferenceQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = this.getGadgetuserpreferenceExampleConditionSql(gadgetuserpreferenceQueryCondition);
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "条件更新", "conditionSql", kvalue, gadgetuserpreference, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Gadgetuserpreference到数据库中
	 * <param name="gadgetuserpreferenceQueryCondition">附加的条件</param>
	 * <param name="gadgetuserpreference">需要更新的Gadgetuserpreference</param>
	 */
	public int gadgetuserpreferenceUpdateSelectiveByCondition(Gadgetuserpreference gadgetuserpreference, GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) throws CacheException {
		int ret = this.getDao().gadgetuserpreferenceUpdateSelectiveByCondition(gadgetuserpreference, gadgetuserpreferenceQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GADGETUSERPREFERENCE")) {
				this.getCache().clear("GADGETUSERPREFERENCE");
			}
		}
		String kvalue = this.getGadgetuserpreferenceExampleConditionSql(gadgetuserpreferenceQueryCondition);
		this.operatesLogSimpleAdd("GADGETUSERPREFERENCE", "批量部分更新", "conditionSql", kvalue, gadgetuserpreference, ret);
		return ret;
	}
	
	public String getGadgetuserpreferenceExampleConditionSql(GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < gadgetuserpreferenceQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			GadgetuserpreferenceExample.Criteria item = gadgetuserpreferenceQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					GadgetuserpreferenceExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="gadgetuserpreference">从数据库中查询一个对象Gadgetuserpreference</param>
	 * <param name="AId"></param>
	 */
	public Gadgetuserpreference gadgetuserpreferenceSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("GADGETUSERPREFERENCE")) {
			String key = ("GADGETUSERPREFERENCE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Gadgetuserpreference obj = ((Gadgetuserpreference)(this.getCache().get("GADGETUSERPREFERENCE", key)));
			if ((obj == null)) {
				obj = this.getDao().gadgetuserpreferenceSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("GADGETUSERPREFERENCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().gadgetuserpreferenceSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="gadgetuserpreferenceQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Gadgetuserpreference> gadgetuserpreferenceSelectObjects(GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) throws CacheException {
		if (this.needCache("GADGETUSERPREFERENCE")) {
			String key = ("GADGETUSERPREFERENCE_" 
						+ ("queryObject_" + this.getGadgetuserpreferenceExampleConditionSql(gadgetuserpreferenceQueryCondition)));
			List<Gadgetuserpreference> obj = ((List<Gadgetuserpreference>)(this.getCache().get("GADGETUSERPREFERENCE", key)));
			if ((obj == null)) {
				obj = this.getDao().gadgetuserpreferenceSelectObjects(gadgetuserpreferenceQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GADGETUSERPREFERENCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().gadgetuserpreferenceSelectObjects(gadgetuserpreferenceQueryCondition);
		}
	}
	
	/**
	 * <param name="gadgetuserpreferenceQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Gadgetuserpreference> gadgetuserpreferenceSelectObjectsWithBLOBs(GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) throws CacheException {
		if (this.needCache("GADGETUSERPREFERENCE")) {
			String key = ("GADGETUSERPREFERENCE_" 
						+ ("queryObject_" + this.getGadgetuserpreferenceExampleConditionSql(gadgetuserpreferenceQueryCondition)));
			List<Gadgetuserpreference> obj = ((List<Gadgetuserpreference>)(this.getCache().get("GADGETUSERPREFERENCE", key)));
			if ((obj == null)) {
				obj = this.getDao().gadgetuserpreferenceSelectObjectsWithBLOBs(gadgetuserpreferenceQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GADGETUSERPREFERENCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().gadgetuserpreferenceSelectObjectsWithBLOBs(gadgetuserpreferenceQueryCondition);
		}
	}
	
	/**
	 * <param name="gadgetuserpreferenceQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int gadgetuserpreferenceQuerySelectObjectsCount(GadgetuserpreferenceExample gadgetuserpreferenceQueryCondition) throws CacheException {
		if (this.needCache("GADGETUSERPREFERENCE")) {
			String key = ("GADGETUSERPREFERENCE_" 
						+ ("queryCount_" + this.getGadgetuserpreferenceExampleConditionSql(gadgetuserpreferenceQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("GADGETUSERPREFERENCE", key)));
			if ((obj == null)) {
				obj = this.getDao().gadgetuserpreferenceQuerySelectObjectsCount(gadgetuserpreferenceQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GADGETUSERPREFERENCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().gadgetuserpreferenceQuerySelectObjectsCount(gadgetuserpreferenceQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Genericconfiguration到数据库中
	 * <param name="genericconfiguration">需要插入的新对象</param>
	 */
	public int genericconfigurationInsert(Genericconfiguration genericconfiguration) throws CacheException {
		int ret = this.getDao().genericconfigurationInsert(genericconfiguration);
		if (this.needCache("GENERICCONFIGURATION")) {
			this.getCache().clear("GENERICCONFIGURATION");
		}
		String kvalue = "";
		kvalue = (kvalue + genericconfiguration.getId());
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "插入", "ID", kvalue, genericconfiguration, ret);
		return ret;
	}
	
	/**
	 * <param name="genericconfiguration">从数据库中删除一个对象Genericconfiguration</param>
	 * <param name="AId"></param>
	 */
	public int genericconfigurationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().genericconfigurationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="genericconfiguration">从数据库中删除一个对象Genericconfiguration</param>
	 */
	public int genericconfigurationDeleteByCondition(GenericconfigurationExample genericconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().genericconfigurationDeleteByCondition(genericconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = this.getGenericconfigurationExampleConditionSql(genericconfigurationQueryCondition);
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "条件删除", "conditionSql", kvalue, genericconfigurationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Genericconfiguration到数据库中
	 * <param name="genericconfiguration">需要更新的Genericconfiguration</param>
	 */
	public int genericconfigurationUpdate(Genericconfiguration genericconfiguration) throws CacheException {
		int ret = this.getDao().genericconfigurationUpdate(genericconfiguration);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + genericconfiguration.getId());
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "更新", "ID", kvalue, genericconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Genericconfiguration到数据库中
	 * <param name="genericconfiguration">需要更新的Genericconfiguration</param>
	 */
	public int genericconfigurationUpdateSelective(Genericconfiguration genericconfiguration) throws CacheException {
		int ret = this.getDao().genericconfigurationUpdateSelective(genericconfiguration);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + genericconfiguration.getId());
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "部分更新", "ID", kvalue, genericconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Genericconfiguration到数据库中
	 * <param name="genericconfiguration">需要更新的Genericconfiguration</param>
	 */
	public int genericconfigurationUpdateWithBlobs(Genericconfiguration genericconfiguration) throws CacheException {
		int ret = this.getDao().genericconfigurationUpdateWithBlobs(genericconfiguration);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + genericconfiguration.getId());
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "更新含Blob", "ID", kvalue, genericconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Genericconfiguration到数据库中
	 * <param name="genericconfigurationQueryCondition">附加的条件</param>
	 * <param name="genericconfiguration">需要更新的Genericconfiguration</param>
	 */
	public int genericconfigurationUpdateByCondition(Genericconfiguration genericconfiguration, GenericconfigurationExample genericconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().genericconfigurationUpdateByCondition(genericconfiguration, genericconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = this.getGenericconfigurationExampleConditionSql(genericconfigurationQueryCondition);
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "条件更新", "conditionSql", kvalue, genericconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Genericconfiguration到数据库中
	 * <param name="genericconfigurationQueryCondition">附加的条件</param>
	 * <param name="genericconfiguration">需要更新的Genericconfiguration</param>
	 */
	public int genericconfigurationUpdateSelectiveByCondition(Genericconfiguration genericconfiguration, GenericconfigurationExample genericconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().genericconfigurationUpdateSelectiveByCondition(genericconfiguration, genericconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GENERICCONFIGURATION")) {
				this.getCache().clear("GENERICCONFIGURATION");
			}
		}
		String kvalue = this.getGenericconfigurationExampleConditionSql(genericconfigurationQueryCondition);
		this.operatesLogSimpleAdd("GENERICCONFIGURATION", "批量部分更新", "conditionSql", kvalue, genericconfiguration, ret);
		return ret;
	}
	
	public String getGenericconfigurationExampleConditionSql(GenericconfigurationExample genericconfigurationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < genericconfigurationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			GenericconfigurationExample.Criteria item = genericconfigurationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					GenericconfigurationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="genericconfiguration">从数据库中查询一个对象Genericconfiguration</param>
	 * <param name="AId"></param>
	 */
	public Genericconfiguration genericconfigurationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("GENERICCONFIGURATION")) {
			String key = ("GENERICCONFIGURATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Genericconfiguration obj = ((Genericconfiguration)(this.getCache().get("GENERICCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().genericconfigurationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("GENERICCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().genericconfigurationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="genericconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Genericconfiguration> genericconfigurationSelectObjects(GenericconfigurationExample genericconfigurationQueryCondition) throws CacheException {
		if (this.needCache("GENERICCONFIGURATION")) {
			String key = ("GENERICCONFIGURATION_" 
						+ ("queryObject_" + this.getGenericconfigurationExampleConditionSql(genericconfigurationQueryCondition)));
			List<Genericconfiguration> obj = ((List<Genericconfiguration>)(this.getCache().get("GENERICCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().genericconfigurationSelectObjects(genericconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GENERICCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().genericconfigurationSelectObjects(genericconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="genericconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Genericconfiguration> genericconfigurationSelectObjectsWithBLOBs(GenericconfigurationExample genericconfigurationQueryCondition) throws CacheException {
		if (this.needCache("GENERICCONFIGURATION")) {
			String key = ("GENERICCONFIGURATION_" 
						+ ("queryObject_" + this.getGenericconfigurationExampleConditionSql(genericconfigurationQueryCondition)));
			List<Genericconfiguration> obj = ((List<Genericconfiguration>)(this.getCache().get("GENERICCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().genericconfigurationSelectObjectsWithBLOBs(genericconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GENERICCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().genericconfigurationSelectObjectsWithBLOBs(genericconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="genericconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int genericconfigurationQuerySelectObjectsCount(GenericconfigurationExample genericconfigurationQueryCondition) throws CacheException {
		if (this.needCache("GENERICCONFIGURATION")) {
			String key = ("GENERICCONFIGURATION_" 
						+ ("queryCount_" + this.getGenericconfigurationExampleConditionSql(genericconfigurationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("GENERICCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().genericconfigurationQuerySelectObjectsCount(genericconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GENERICCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().genericconfigurationQuerySelectObjectsCount(genericconfigurationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Groupbase到数据库中
	 * <param name="groupbase">需要插入的新对象</param>
	 */
	public int groupbaseInsert(Groupbase groupbase) throws CacheException {
		int ret = this.getDao().groupbaseInsert(groupbase);
		if (this.needCache("GROUPBASE")) {
			this.getCache().clear("GROUPBASE");
		}
		String kvalue = "";
		kvalue = (kvalue + groupbase.getId());
		this.operatesLogSimpleAdd("GROUPBASE", "插入", "ID", kvalue, groupbase, ret);
		return ret;
	}
	
	/**
	 * <param name="groupbase">从数据库中删除一个对象Groupbase</param>
	 * <param name="AId"></param>
	 */
	public int groupbaseDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().groupbaseDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("GROUPBASE")) {
				this.getCache().clear("GROUPBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("GROUPBASE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="groupbase">从数据库中删除一个对象Groupbase</param>
	 */
	public int groupbaseDeleteByCondition(GroupbaseExample groupbaseQueryCondition) throws CacheException {
		int ret = this.getDao().groupbaseDeleteByCondition(groupbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GROUPBASE")) {
				this.getCache().clear("GROUPBASE");
			}
		}
		String kvalue = this.getGroupbaseExampleConditionSql(groupbaseQueryCondition);
		this.operatesLogSimpleAdd("GROUPBASE", "条件删除", "conditionSql", kvalue, groupbaseQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Groupbase到数据库中
	 * <param name="groupbase">需要更新的Groupbase</param>
	 */
	public int groupbaseUpdate(Groupbase groupbase) throws CacheException {
		int ret = this.getDao().groupbaseUpdate(groupbase);
		if ((ret > 0)) {
			if (this.needCache("GROUPBASE")) {
				this.getCache().clear("GROUPBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + groupbase.getId());
		this.operatesLogSimpleAdd("GROUPBASE", "更新", "ID", kvalue, groupbase, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Groupbase到数据库中
	 * <param name="groupbase">需要更新的Groupbase</param>
	 */
	public int groupbaseUpdateSelective(Groupbase groupbase) throws CacheException {
		int ret = this.getDao().groupbaseUpdateSelective(groupbase);
		if ((ret > 0)) {
			if (this.needCache("GROUPBASE")) {
				this.getCache().clear("GROUPBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + groupbase.getId());
		this.operatesLogSimpleAdd("GROUPBASE", "部分更新", "ID", kvalue, groupbase, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Groupbase到数据库中
	 * <param name="groupbaseQueryCondition">附加的条件</param>
	 * <param name="groupbase">需要更新的Groupbase</param>
	 */
	public int groupbaseUpdateByCondition(Groupbase groupbase, GroupbaseExample groupbaseQueryCondition) throws CacheException {
		int ret = this.getDao().groupbaseUpdateByCondition(groupbase, groupbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GROUPBASE")) {
				this.getCache().clear("GROUPBASE");
			}
		}
		String kvalue = this.getGroupbaseExampleConditionSql(groupbaseQueryCondition);
		this.operatesLogSimpleAdd("GROUPBASE", "条件更新", "conditionSql", kvalue, groupbase, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Groupbase到数据库中
	 * <param name="groupbaseQueryCondition">附加的条件</param>
	 * <param name="groupbase">需要更新的Groupbase</param>
	 */
	public int groupbaseUpdateSelectiveByCondition(Groupbase groupbase, GroupbaseExample groupbaseQueryCondition) throws CacheException {
		int ret = this.getDao().groupbaseUpdateSelectiveByCondition(groupbase, groupbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("GROUPBASE")) {
				this.getCache().clear("GROUPBASE");
			}
		}
		String kvalue = this.getGroupbaseExampleConditionSql(groupbaseQueryCondition);
		this.operatesLogSimpleAdd("GROUPBASE", "批量部分更新", "conditionSql", kvalue, groupbase, ret);
		return ret;
	}
	
	public String getGroupbaseExampleConditionSql(GroupbaseExample groupbaseQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < groupbaseQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			GroupbaseExample.Criteria item = groupbaseQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					GroupbaseExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="groupbase">从数据库中查询一个对象Groupbase</param>
	 * <param name="AId"></param>
	 */
	public Groupbase groupbaseSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("GROUPBASE")) {
			String key = ("GROUPBASE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Groupbase obj = ((Groupbase)(this.getCache().get("GROUPBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().groupbaseSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("GROUPBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().groupbaseSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="groupbaseQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Groupbase> groupbaseSelectObjects(GroupbaseExample groupbaseQueryCondition) throws CacheException {
		if (this.needCache("GROUPBASE")) {
			String key = ("GROUPBASE_" 
						+ ("queryObject_" + this.getGroupbaseExampleConditionSql(groupbaseQueryCondition)));
			List<Groupbase> obj = ((List<Groupbase>)(this.getCache().get("GROUPBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().groupbaseSelectObjects(groupbaseQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GROUPBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().groupbaseSelectObjects(groupbaseQueryCondition);
		}
	}
	
	/**
	 * <param name="groupbaseQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int groupbaseQuerySelectObjectsCount(GroupbaseExample groupbaseQueryCondition) throws CacheException {
		if (this.needCache("GROUPBASE")) {
			String key = ("GROUPBASE_" 
						+ ("queryCount_" + this.getGroupbaseExampleConditionSql(groupbaseQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("GROUPBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().groupbaseQuerySelectObjectsCount(groupbaseQueryCondition);
				if ((obj != null)) {
					this.getCache().put("GROUPBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().groupbaseQuerySelectObjectsCount(groupbaseQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuelink到数据库中
	 * <param name="issuelink">需要插入的新对象</param>
	 */
	public int issuelinkInsert(Issuelink issuelink) throws CacheException {
		int ret = this.getDao().issuelinkInsert(issuelink);
		if (this.needCache("ISSUELINK")) {
			this.getCache().clear("ISSUELINK");
		}
		String kvalue = "";
		kvalue = (kvalue + issuelink.getId());
		this.operatesLogSimpleAdd("ISSUELINK", "插入", "ID", kvalue, issuelink, ret);
		return ret;
	}
	
	/**
	 * <param name="issuelink">从数据库中删除一个对象Issuelink</param>
	 * <param name="AId"></param>
	 */
	public int issuelinkDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().issuelinkDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINK")) {
				this.getCache().clear("ISSUELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUELINK", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuelink">从数据库中删除一个对象Issuelink</param>
	 */
	public int issuelinkDeleteByCondition(IssuelinkExample issuelinkQueryCondition) throws CacheException {
		int ret = this.getDao().issuelinkDeleteByCondition(issuelinkQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINK")) {
				this.getCache().clear("ISSUELINK");
			}
		}
		String kvalue = this.getIssuelinkExampleConditionSql(issuelinkQueryCondition);
		this.operatesLogSimpleAdd("ISSUELINK", "条件删除", "conditionSql", kvalue, issuelinkQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuelink到数据库中
	 * <param name="issuelink">需要更新的Issuelink</param>
	 */
	public int issuelinkUpdate(Issuelink issuelink) throws CacheException {
		int ret = this.getDao().issuelinkUpdate(issuelink);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINK")) {
				this.getCache().clear("ISSUELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuelink.getId());
		this.operatesLogSimpleAdd("ISSUELINK", "更新", "ID", kvalue, issuelink, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuelink到数据库中
	 * <param name="issuelink">需要更新的Issuelink</param>
	 */
	public int issuelinkUpdateSelective(Issuelink issuelink) throws CacheException {
		int ret = this.getDao().issuelinkUpdateSelective(issuelink);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINK")) {
				this.getCache().clear("ISSUELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuelink.getId());
		this.operatesLogSimpleAdd("ISSUELINK", "部分更新", "ID", kvalue, issuelink, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuelink到数据库中
	 * <param name="issuelinkQueryCondition">附加的条件</param>
	 * <param name="issuelink">需要更新的Issuelink</param>
	 */
	public int issuelinkUpdateByCondition(Issuelink issuelink, IssuelinkExample issuelinkQueryCondition) throws CacheException {
		int ret = this.getDao().issuelinkUpdateByCondition(issuelink, issuelinkQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINK")) {
				this.getCache().clear("ISSUELINK");
			}
		}
		String kvalue = this.getIssuelinkExampleConditionSql(issuelinkQueryCondition);
		this.operatesLogSimpleAdd("ISSUELINK", "条件更新", "conditionSql", kvalue, issuelink, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuelink到数据库中
	 * <param name="issuelinkQueryCondition">附加的条件</param>
	 * <param name="issuelink">需要更新的Issuelink</param>
	 */
	public int issuelinkUpdateSelectiveByCondition(Issuelink issuelink, IssuelinkExample issuelinkQueryCondition) throws CacheException {
		int ret = this.getDao().issuelinkUpdateSelectiveByCondition(issuelink, issuelinkQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINK")) {
				this.getCache().clear("ISSUELINK");
			}
		}
		String kvalue = this.getIssuelinkExampleConditionSql(issuelinkQueryCondition);
		this.operatesLogSimpleAdd("ISSUELINK", "批量部分更新", "conditionSql", kvalue, issuelink, ret);
		return ret;
	}
	
	public String getIssuelinkExampleConditionSql(IssuelinkExample issuelinkQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuelinkQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuelinkExample.Criteria item = issuelinkQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuelinkExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuelink">从数据库中查询一个对象Issuelink</param>
	 * <param name="AId"></param>
	 */
	public Issuelink issuelinkSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("ISSUELINK")) {
			String key = ("ISSUELINK_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuelink obj = ((Issuelink)(this.getCache().get("ISSUELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().issuelinkSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuelinkSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuelinkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuelink> issuelinkSelectObjects(IssuelinkExample issuelinkQueryCondition) throws CacheException {
		if (this.needCache("ISSUELINK")) {
			String key = ("ISSUELINK_" 
						+ ("queryObject_" + this.getIssuelinkExampleConditionSql(issuelinkQueryCondition)));
			List<Issuelink> obj = ((List<Issuelink>)(this.getCache().get("ISSUELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().issuelinkSelectObjects(issuelinkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuelinkSelectObjects(issuelinkQueryCondition);
		}
	}
	
	/**
	 * <param name="issuelinkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuelinkQuerySelectObjectsCount(IssuelinkExample issuelinkQueryCondition) throws CacheException {
		if (this.needCache("ISSUELINK")) {
			String key = ("ISSUELINK_" 
						+ ("queryCount_" + this.getIssuelinkExampleConditionSql(issuelinkQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().issuelinkQuerySelectObjectsCount(issuelinkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuelinkQuerySelectObjectsCount(issuelinkQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuelinktype到数据库中
	 * <param name="issuelinktype">需要插入的新对象</param>
	 */
	public int issuelinktypeInsert(Issuelinktype issuelinktype) throws CacheException {
		int ret = this.getDao().issuelinktypeInsert(issuelinktype);
		if (this.needCache("ISSUELINKTYPE")) {
			this.getCache().clear("ISSUELINKTYPE");
		}
		String kvalue = "";
		kvalue = (kvalue + issuelinktype.getId());
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "插入", "ID", kvalue, issuelinktype, ret);
		return ret;
	}
	
	/**
	 * <param name="issuelinktype">从数据库中删除一个对象Issuelinktype</param>
	 * <param name="AId"></param>
	 */
	public int issuelinktypeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().issuelinktypeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINKTYPE")) {
				this.getCache().clear("ISSUELINKTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuelinktype">从数据库中删除一个对象Issuelinktype</param>
	 */
	public int issuelinktypeDeleteByCondition(IssuelinktypeExample issuelinktypeQueryCondition) throws CacheException {
		int ret = this.getDao().issuelinktypeDeleteByCondition(issuelinktypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINKTYPE")) {
				this.getCache().clear("ISSUELINKTYPE");
			}
		}
		String kvalue = this.getIssuelinktypeExampleConditionSql(issuelinktypeQueryCondition);
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "条件删除", "conditionSql", kvalue, issuelinktypeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuelinktype到数据库中
	 * <param name="issuelinktype">需要更新的Issuelinktype</param>
	 */
	public int issuelinktypeUpdate(Issuelinktype issuelinktype) throws CacheException {
		int ret = this.getDao().issuelinktypeUpdate(issuelinktype);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINKTYPE")) {
				this.getCache().clear("ISSUELINKTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuelinktype.getId());
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "更新", "ID", kvalue, issuelinktype, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuelinktype到数据库中
	 * <param name="issuelinktype">需要更新的Issuelinktype</param>
	 */
	public int issuelinktypeUpdateSelective(Issuelinktype issuelinktype) throws CacheException {
		int ret = this.getDao().issuelinktypeUpdateSelective(issuelinktype);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINKTYPE")) {
				this.getCache().clear("ISSUELINKTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuelinktype.getId());
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "部分更新", "ID", kvalue, issuelinktype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuelinktype到数据库中
	 * <param name="issuelinktypeQueryCondition">附加的条件</param>
	 * <param name="issuelinktype">需要更新的Issuelinktype</param>
	 */
	public int issuelinktypeUpdateByCondition(Issuelinktype issuelinktype, IssuelinktypeExample issuelinktypeQueryCondition) throws CacheException {
		int ret = this.getDao().issuelinktypeUpdateByCondition(issuelinktype, issuelinktypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINKTYPE")) {
				this.getCache().clear("ISSUELINKTYPE");
			}
		}
		String kvalue = this.getIssuelinktypeExampleConditionSql(issuelinktypeQueryCondition);
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "条件更新", "conditionSql", kvalue, issuelinktype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuelinktype到数据库中
	 * <param name="issuelinktypeQueryCondition">附加的条件</param>
	 * <param name="issuelinktype">需要更新的Issuelinktype</param>
	 */
	public int issuelinktypeUpdateSelectiveByCondition(Issuelinktype issuelinktype, IssuelinktypeExample issuelinktypeQueryCondition) throws CacheException {
		int ret = this.getDao().issuelinktypeUpdateSelectiveByCondition(issuelinktype, issuelinktypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUELINKTYPE")) {
				this.getCache().clear("ISSUELINKTYPE");
			}
		}
		String kvalue = this.getIssuelinktypeExampleConditionSql(issuelinktypeQueryCondition);
		this.operatesLogSimpleAdd("ISSUELINKTYPE", "批量部分更新", "conditionSql", kvalue, issuelinktype, ret);
		return ret;
	}
	
	public String getIssuelinktypeExampleConditionSql(IssuelinktypeExample issuelinktypeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuelinktypeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuelinktypeExample.Criteria item = issuelinktypeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuelinktypeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuelinktype">从数据库中查询一个对象Issuelinktype</param>
	 * <param name="AId"></param>
	 */
	public Issuelinktype issuelinktypeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("ISSUELINKTYPE")) {
			String key = ("ISSUELINKTYPE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuelinktype obj = ((Issuelinktype)(this.getCache().get("ISSUELINKTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuelinktypeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUELINKTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuelinktypeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuelinktypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuelinktype> issuelinktypeSelectObjects(IssuelinktypeExample issuelinktypeQueryCondition) throws CacheException {
		if (this.needCache("ISSUELINKTYPE")) {
			String key = ("ISSUELINKTYPE_" 
						+ ("queryObject_" + this.getIssuelinktypeExampleConditionSql(issuelinktypeQueryCondition)));
			List<Issuelinktype> obj = ((List<Issuelinktype>)(this.getCache().get("ISSUELINKTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuelinktypeSelectObjects(issuelinktypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUELINKTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuelinktypeSelectObjects(issuelinktypeQueryCondition);
		}
	}
	
	/**
	 * <param name="issuelinktypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuelinktypeQuerySelectObjectsCount(IssuelinktypeExample issuelinktypeQueryCondition) throws CacheException {
		if (this.needCache("ISSUELINKTYPE")) {
			String key = ("ISSUELINKTYPE_" 
						+ ("queryCount_" + this.getIssuelinktypeExampleConditionSql(issuelinktypeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUELINKTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuelinktypeQuerySelectObjectsCount(issuelinktypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUELINKTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuelinktypeQuerySelectObjectsCount(issuelinktypeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuesecurityscheme到数据库中
	 * <param name="issuesecurityscheme">需要插入的新对象</param>
	 */
	public int issuesecurityschemeInsert(Issuesecurityscheme issuesecurityscheme) throws CacheException {
		int ret = this.getDao().issuesecurityschemeInsert(issuesecurityscheme);
		if (this.needCache("ISSUESECURITYSCHEME")) {
			this.getCache().clear("ISSUESECURITYSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + issuesecurityscheme.getId());
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "插入", "ID", kvalue, issuesecurityscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="issuesecurityscheme">从数据库中删除一个对象Issuesecurityscheme</param>
	 * <param name="AId"></param>
	 */
	public int issuesecurityschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().issuesecurityschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuesecurityscheme">从数据库中删除一个对象Issuesecurityscheme</param>
	 */
	public int issuesecurityschemeDeleteByCondition(IssuesecurityschemeExample issuesecurityschemeQueryCondition) throws CacheException {
		int ret = this.getDao().issuesecurityschemeDeleteByCondition(issuesecurityschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = this.getIssuesecurityschemeExampleConditionSql(issuesecurityschemeQueryCondition);
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "条件删除", "conditionSql", kvalue, issuesecurityschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuesecurityscheme到数据库中
	 * <param name="issuesecurityscheme">需要更新的Issuesecurityscheme</param>
	 */
	public int issuesecurityschemeUpdate(Issuesecurityscheme issuesecurityscheme) throws CacheException {
		int ret = this.getDao().issuesecurityschemeUpdate(issuesecurityscheme);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuesecurityscheme.getId());
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "更新", "ID", kvalue, issuesecurityscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuesecurityscheme到数据库中
	 * <param name="issuesecurityscheme">需要更新的Issuesecurityscheme</param>
	 */
	public int issuesecurityschemeUpdateSelective(Issuesecurityscheme issuesecurityscheme) throws CacheException {
		int ret = this.getDao().issuesecurityschemeUpdateSelective(issuesecurityscheme);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuesecurityscheme.getId());
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "部分更新", "ID", kvalue, issuesecurityscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Issuesecurityscheme到数据库中
	 * <param name="issuesecurityscheme">需要更新的Issuesecurityscheme</param>
	 */
	public int issuesecurityschemeUpdateWithBlobs(Issuesecurityscheme issuesecurityscheme) throws CacheException {
		int ret = this.getDao().issuesecurityschemeUpdateWithBlobs(issuesecurityscheme);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuesecurityscheme.getId());
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "更新含Blob", "ID", kvalue, issuesecurityscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuesecurityscheme到数据库中
	 * <param name="issuesecurityschemeQueryCondition">附加的条件</param>
	 * <param name="issuesecurityscheme">需要更新的Issuesecurityscheme</param>
	 */
	public int issuesecurityschemeUpdateByCondition(Issuesecurityscheme issuesecurityscheme, IssuesecurityschemeExample issuesecurityschemeQueryCondition) throws CacheException {
		int ret = this.getDao().issuesecurityschemeUpdateByCondition(issuesecurityscheme, issuesecurityschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = this.getIssuesecurityschemeExampleConditionSql(issuesecurityschemeQueryCondition);
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "条件更新", "conditionSql", kvalue, issuesecurityscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuesecurityscheme到数据库中
	 * <param name="issuesecurityschemeQueryCondition">附加的条件</param>
	 * <param name="issuesecurityscheme">需要更新的Issuesecurityscheme</param>
	 */
	public int issuesecurityschemeUpdateSelectiveByCondition(Issuesecurityscheme issuesecurityscheme, IssuesecurityschemeExample issuesecurityschemeQueryCondition) throws CacheException {
		int ret = this.getDao().issuesecurityschemeUpdateSelectiveByCondition(issuesecurityscheme, issuesecurityschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUESECURITYSCHEME")) {
				this.getCache().clear("ISSUESECURITYSCHEME");
			}
		}
		String kvalue = this.getIssuesecurityschemeExampleConditionSql(issuesecurityschemeQueryCondition);
		this.operatesLogSimpleAdd("ISSUESECURITYSCHEME", "批量部分更新", "conditionSql", kvalue, issuesecurityscheme, ret);
		return ret;
	}
	
	public String getIssuesecurityschemeExampleConditionSql(IssuesecurityschemeExample issuesecurityschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuesecurityschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuesecurityschemeExample.Criteria item = issuesecurityschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuesecurityschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuesecurityscheme">从数据库中查询一个对象Issuesecurityscheme</param>
	 * <param name="AId"></param>
	 */
	public Issuesecurityscheme issuesecurityschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("ISSUESECURITYSCHEME")) {
			String key = ("ISSUESECURITYSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuesecurityscheme obj = ((Issuesecurityscheme)(this.getCache().get("ISSUESECURITYSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuesecurityschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUESECURITYSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuesecurityschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuesecurityschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuesecurityscheme> issuesecurityschemeSelectObjects(IssuesecurityschemeExample issuesecurityschemeQueryCondition) throws CacheException {
		if (this.needCache("ISSUESECURITYSCHEME")) {
			String key = ("ISSUESECURITYSCHEME_" 
						+ ("queryObject_" + this.getIssuesecurityschemeExampleConditionSql(issuesecurityschemeQueryCondition)));
			List<Issuesecurityscheme> obj = ((List<Issuesecurityscheme>)(this.getCache().get("ISSUESECURITYSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuesecurityschemeSelectObjects(issuesecurityschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUESECURITYSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuesecurityschemeSelectObjects(issuesecurityschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="issuesecurityschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuesecurityscheme> issuesecurityschemeSelectObjectsWithBLOBs(IssuesecurityschemeExample issuesecurityschemeQueryCondition) throws CacheException {
		if (this.needCache("ISSUESECURITYSCHEME")) {
			String key = ("ISSUESECURITYSCHEME_" 
						+ ("queryObject_" + this.getIssuesecurityschemeExampleConditionSql(issuesecurityschemeQueryCondition)));
			List<Issuesecurityscheme> obj = ((List<Issuesecurityscheme>)(this.getCache().get("ISSUESECURITYSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuesecurityschemeSelectObjectsWithBLOBs(issuesecurityschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUESECURITYSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuesecurityschemeSelectObjectsWithBLOBs(issuesecurityschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="issuesecurityschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuesecurityschemeQuerySelectObjectsCount(IssuesecurityschemeExample issuesecurityschemeQueryCondition) throws CacheException {
		if (this.needCache("ISSUESECURITYSCHEME")) {
			String key = ("ISSUESECURITYSCHEME_" 
						+ ("queryCount_" + this.getIssuesecurityschemeExampleConditionSql(issuesecurityschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUESECURITYSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuesecurityschemeQuerySelectObjectsCount(issuesecurityschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUESECURITYSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuesecurityschemeQuerySelectObjectsCount(issuesecurityschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuestatus到数据库中
	 * <param name="issuestatus">需要插入的新对象</param>
	 */
	public int issuestatusInsert(Issuestatus issuestatus) throws CacheException {
		int ret = this.getDao().issuestatusInsert(issuestatus);
		if (this.needCache("ISSUESTATUS")) {
			this.getCache().clear("ISSUESTATUS");
		}
		String kvalue = "";
		kvalue = (kvalue + issuestatus.getId());
		this.operatesLogSimpleAdd("ISSUESTATUS", "插入", "ID", kvalue, issuestatus, ret);
		return ret;
	}
	
	/**
	 * <param name="issuestatus">从数据库中删除一个对象Issuestatus</param>
	 * <param name="AId"></param>
	 */
	public int issuestatusDeleteByPrimaryKey(String AId) throws CacheException {
		int ret = this.getDao().issuestatusDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUESTATUS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuestatus">从数据库中删除一个对象Issuestatus</param>
	 */
	public int issuestatusDeleteByCondition(IssuestatusExample issuestatusQueryCondition) throws CacheException {
		int ret = this.getDao().issuestatusDeleteByCondition(issuestatusQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = this.getIssuestatusExampleConditionSql(issuestatusQueryCondition);
		this.operatesLogSimpleAdd("ISSUESTATUS", "条件删除", "conditionSql", kvalue, issuestatusQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuestatus到数据库中
	 * <param name="issuestatus">需要更新的Issuestatus</param>
	 */
	public int issuestatusUpdate(Issuestatus issuestatus) throws CacheException {
		int ret = this.getDao().issuestatusUpdate(issuestatus);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuestatus.getId());
		this.operatesLogSimpleAdd("ISSUESTATUS", "更新", "ID", kvalue, issuestatus, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuestatus到数据库中
	 * <param name="issuestatus">需要更新的Issuestatus</param>
	 */
	public int issuestatusUpdateSelective(Issuestatus issuestatus) throws CacheException {
		int ret = this.getDao().issuestatusUpdateSelective(issuestatus);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuestatus.getId());
		this.operatesLogSimpleAdd("ISSUESTATUS", "部分更新", "ID", kvalue, issuestatus, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Issuestatus到数据库中
	 * <param name="issuestatus">需要更新的Issuestatus</param>
	 */
	public int issuestatusUpdateWithBlobs(Issuestatus issuestatus) throws CacheException {
		int ret = this.getDao().issuestatusUpdateWithBlobs(issuestatus);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuestatus.getId());
		this.operatesLogSimpleAdd("ISSUESTATUS", "更新含Blob", "ID", kvalue, issuestatus, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuestatus到数据库中
	 * <param name="issuestatusQueryCondition">附加的条件</param>
	 * <param name="issuestatus">需要更新的Issuestatus</param>
	 */
	public int issuestatusUpdateByCondition(Issuestatus issuestatus, IssuestatusExample issuestatusQueryCondition) throws CacheException {
		int ret = this.getDao().issuestatusUpdateByCondition(issuestatus, issuestatusQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = this.getIssuestatusExampleConditionSql(issuestatusQueryCondition);
		this.operatesLogSimpleAdd("ISSUESTATUS", "条件更新", "conditionSql", kvalue, issuestatus, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuestatus到数据库中
	 * <param name="issuestatusQueryCondition">附加的条件</param>
	 * <param name="issuestatus">需要更新的Issuestatus</param>
	 */
	public int issuestatusUpdateSelectiveByCondition(Issuestatus issuestatus, IssuestatusExample issuestatusQueryCondition) throws CacheException {
		int ret = this.getDao().issuestatusUpdateSelectiveByCondition(issuestatus, issuestatusQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUESTATUS")) {
				this.getCache().clear("ISSUESTATUS");
			}
		}
		String kvalue = this.getIssuestatusExampleConditionSql(issuestatusQueryCondition);
		this.operatesLogSimpleAdd("ISSUESTATUS", "批量部分更新", "conditionSql", kvalue, issuestatus, ret);
		return ret;
	}
	
	public String getIssuestatusExampleConditionSql(IssuestatusExample issuestatusQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuestatusQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuestatusExample.Criteria item = issuestatusQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuestatusExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuestatus">从数据库中查询一个对象Issuestatus</param>
	 * <param name="AId"></param>
	 */
	public Issuestatus issuestatusSelectByPrimaryKey(String AId) throws CacheException {
		if (this.needCache("ISSUESTATUS")) {
			String key = ("ISSUESTATUS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuestatus obj = ((Issuestatus)(this.getCache().get("ISSUESTATUS", key)));
			if ((obj == null)) {
				obj = this.getDao().issuestatusSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUESTATUS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuestatusSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuestatusQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuestatus> issuestatusSelectObjects(IssuestatusExample issuestatusQueryCondition) throws CacheException {
		if (this.needCache("ISSUESTATUS")) {
			String key = ("ISSUESTATUS_" 
						+ ("queryObject_" + this.getIssuestatusExampleConditionSql(issuestatusQueryCondition)));
			List<Issuestatus> obj = ((List<Issuestatus>)(this.getCache().get("ISSUESTATUS", key)));
			if ((obj == null)) {
				obj = this.getDao().issuestatusSelectObjects(issuestatusQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUESTATUS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuestatusSelectObjects(issuestatusQueryCondition);
		}
	}
	
	/**
	 * <param name="issuestatusQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuestatus> issuestatusSelectObjectsWithBLOBs(IssuestatusExample issuestatusQueryCondition) throws CacheException {
		if (this.needCache("ISSUESTATUS")) {
			String key = ("ISSUESTATUS_" 
						+ ("queryObject_" + this.getIssuestatusExampleConditionSql(issuestatusQueryCondition)));
			List<Issuestatus> obj = ((List<Issuestatus>)(this.getCache().get("ISSUESTATUS", key)));
			if ((obj == null)) {
				obj = this.getDao().issuestatusSelectObjectsWithBLOBs(issuestatusQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUESTATUS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuestatusSelectObjectsWithBLOBs(issuestatusQueryCondition);
		}
	}
	
	/**
	 * <param name="issuestatusQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuestatusQuerySelectObjectsCount(IssuestatusExample issuestatusQueryCondition) throws CacheException {
		if (this.needCache("ISSUESTATUS")) {
			String key = ("ISSUESTATUS_" 
						+ ("queryCount_" + this.getIssuestatusExampleConditionSql(issuestatusQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUESTATUS", key)));
			if ((obj == null)) {
				obj = this.getDao().issuestatusQuerySelectObjectsCount(issuestatusQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUESTATUS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuestatusQuerySelectObjectsCount(issuestatusQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuetype到数据库中
	 * <param name="issuetype">需要插入的新对象</param>
	 */
	public int issuetypeInsert(Issuetype issuetype) throws CacheException {
		int ret = this.getDao().issuetypeInsert(issuetype);
		if (this.needCache("ISSUETYPE")) {
			this.getCache().clear("ISSUETYPE");
		}
		String kvalue = "";
		kvalue = (kvalue + issuetype.getId());
		this.operatesLogSimpleAdd("ISSUETYPE", "插入", "ID", kvalue, issuetype, ret);
		return ret;
	}
	
	/**
	 * <param name="issuetype">从数据库中删除一个对象Issuetype</param>
	 * <param name="AId"></param>
	 */
	public int issuetypeDeleteByPrimaryKey(String AId) throws CacheException {
		int ret = this.getDao().issuetypeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUETYPE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuetype">从数据库中删除一个对象Issuetype</param>
	 */
	public int issuetypeDeleteByCondition(IssuetypeExample issuetypeQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypeDeleteByCondition(issuetypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = this.getIssuetypeExampleConditionSql(issuetypeQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPE", "条件删除", "conditionSql", kvalue, issuetypeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuetype到数据库中
	 * <param name="issuetype">需要更新的Issuetype</param>
	 */
	public int issuetypeUpdate(Issuetype issuetype) throws CacheException {
		int ret = this.getDao().issuetypeUpdate(issuetype);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetype.getId());
		this.operatesLogSimpleAdd("ISSUETYPE", "更新", "ID", kvalue, issuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuetype到数据库中
	 * <param name="issuetype">需要更新的Issuetype</param>
	 */
	public int issuetypeUpdateSelective(Issuetype issuetype) throws CacheException {
		int ret = this.getDao().issuetypeUpdateSelective(issuetype);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetype.getId());
		this.operatesLogSimpleAdd("ISSUETYPE", "部分更新", "ID", kvalue, issuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Issuetype到数据库中
	 * <param name="issuetype">需要更新的Issuetype</param>
	 */
	public int issuetypeUpdateWithBlobs(Issuetype issuetype) throws CacheException {
		int ret = this.getDao().issuetypeUpdateWithBlobs(issuetype);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetype.getId());
		this.operatesLogSimpleAdd("ISSUETYPE", "更新含Blob", "ID", kvalue, issuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuetype到数据库中
	 * <param name="issuetypeQueryCondition">附加的条件</param>
	 * <param name="issuetype">需要更新的Issuetype</param>
	 */
	public int issuetypeUpdateByCondition(Issuetype issuetype, IssuetypeExample issuetypeQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypeUpdateByCondition(issuetype, issuetypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = this.getIssuetypeExampleConditionSql(issuetypeQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPE", "条件更新", "conditionSql", kvalue, issuetype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuetype到数据库中
	 * <param name="issuetypeQueryCondition">附加的条件</param>
	 * <param name="issuetype">需要更新的Issuetype</param>
	 */
	public int issuetypeUpdateSelectiveByCondition(Issuetype issuetype, IssuetypeExample issuetypeQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypeUpdateSelectiveByCondition(issuetype, issuetypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPE")) {
				this.getCache().clear("ISSUETYPE");
			}
		}
		String kvalue = this.getIssuetypeExampleConditionSql(issuetypeQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPE", "批量部分更新", "conditionSql", kvalue, issuetype, ret);
		return ret;
	}
	
	public String getIssuetypeExampleConditionSql(IssuetypeExample issuetypeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuetypeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuetypeExample.Criteria item = issuetypeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuetypeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuetype">从数据库中查询一个对象Issuetype</param>
	 * <param name="AId"></param>
	 */
	public Issuetype issuetypeSelectByPrimaryKey(String AId) throws CacheException {
		if (this.needCache("ISSUETYPE")) {
			String key = ("ISSUETYPE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuetype obj = ((Issuetype)(this.getCache().get("ISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuetypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuetype> issuetypeSelectObjects(IssuetypeExample issuetypeQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPE")) {
			String key = ("ISSUETYPE_" 
						+ ("queryObject_" + this.getIssuetypeExampleConditionSql(issuetypeQueryCondition)));
			List<Issuetype> obj = ((List<Issuetype>)(this.getCache().get("ISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypeSelectObjects(issuetypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypeSelectObjects(issuetypeQueryCondition);
		}
	}
	
	/**
	 * <param name="issuetypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuetype> issuetypeSelectObjectsWithBLOBs(IssuetypeExample issuetypeQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPE")) {
			String key = ("ISSUETYPE_" 
						+ ("queryObject_" + this.getIssuetypeExampleConditionSql(issuetypeQueryCondition)));
			List<Issuetype> obj = ((List<Issuetype>)(this.getCache().get("ISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypeSelectObjectsWithBLOBs(issuetypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypeSelectObjectsWithBLOBs(issuetypeQueryCondition);
		}
	}
	
	/**
	 * <param name="issuetypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuetypeQuerySelectObjectsCount(IssuetypeExample issuetypeQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPE")) {
			String key = ("ISSUETYPE_" 
						+ ("queryCount_" + this.getIssuetypeExampleConditionSql(issuetypeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUETYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypeQuerySelectObjectsCount(issuetypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypeQuerySelectObjectsCount(issuetypeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuetypescreenscheme到数据库中
	 * <param name="issuetypescreenscheme">需要插入的新对象</param>
	 */
	public int issuetypescreenschemeInsert(Issuetypescreenscheme issuetypescreenscheme) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeInsert(issuetypescreenscheme);
		if (this.needCache("ISSUETYPESCREENSCHEME")) {
			this.getCache().clear("ISSUETYPESCREENSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + issuetypescreenscheme.getId());
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "插入", "ID", kvalue, issuetypescreenscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="issuetypescreenscheme">从数据库中删除一个对象Issuetypescreenscheme</param>
	 * <param name="AId"></param>
	 */
	public int issuetypescreenschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEME")) {
				this.getCache().clear("ISSUETYPESCREENSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuetypescreenscheme">从数据库中删除一个对象Issuetypescreenscheme</param>
	 */
	public int issuetypescreenschemeDeleteByCondition(IssuetypescreenschemeExample issuetypescreenschemeQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeDeleteByCondition(issuetypescreenschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEME")) {
				this.getCache().clear("ISSUETYPESCREENSCHEME");
			}
		}
		String kvalue = this.getIssuetypescreenschemeExampleConditionSql(issuetypescreenschemeQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "条件删除", "conditionSql", kvalue, issuetypescreenschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuetypescreenscheme到数据库中
	 * <param name="issuetypescreenscheme">需要更新的Issuetypescreenscheme</param>
	 */
	public int issuetypescreenschemeUpdate(Issuetypescreenscheme issuetypescreenscheme) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeUpdate(issuetypescreenscheme);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEME")) {
				this.getCache().clear("ISSUETYPESCREENSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetypescreenscheme.getId());
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "更新", "ID", kvalue, issuetypescreenscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuetypescreenscheme到数据库中
	 * <param name="issuetypescreenscheme">需要更新的Issuetypescreenscheme</param>
	 */
	public int issuetypescreenschemeUpdateSelective(Issuetypescreenscheme issuetypescreenscheme) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeUpdateSelective(issuetypescreenscheme);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEME")) {
				this.getCache().clear("ISSUETYPESCREENSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetypescreenscheme.getId());
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "部分更新", "ID", kvalue, issuetypescreenscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuetypescreenscheme到数据库中
	 * <param name="issuetypescreenschemeQueryCondition">附加的条件</param>
	 * <param name="issuetypescreenscheme">需要更新的Issuetypescreenscheme</param>
	 */
	public int issuetypescreenschemeUpdateByCondition(Issuetypescreenscheme issuetypescreenscheme, IssuetypescreenschemeExample issuetypescreenschemeQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeUpdateByCondition(issuetypescreenscheme, issuetypescreenschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEME")) {
				this.getCache().clear("ISSUETYPESCREENSCHEME");
			}
		}
		String kvalue = this.getIssuetypescreenschemeExampleConditionSql(issuetypescreenschemeQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "条件更新", "conditionSql", kvalue, issuetypescreenscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuetypescreenscheme到数据库中
	 * <param name="issuetypescreenschemeQueryCondition">附加的条件</param>
	 * <param name="issuetypescreenscheme">需要更新的Issuetypescreenscheme</param>
	 */
	public int issuetypescreenschemeUpdateSelectiveByCondition(Issuetypescreenscheme issuetypescreenscheme, IssuetypescreenschemeExample issuetypescreenschemeQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeUpdateSelectiveByCondition(issuetypescreenscheme, issuetypescreenschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEME")) {
				this.getCache().clear("ISSUETYPESCREENSCHEME");
			}
		}
		String kvalue = this.getIssuetypescreenschemeExampleConditionSql(issuetypescreenschemeQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEME", "批量部分更新", "conditionSql", kvalue, issuetypescreenscheme, ret);
		return ret;
	}
	
	public String getIssuetypescreenschemeExampleConditionSql(IssuetypescreenschemeExample issuetypescreenschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuetypescreenschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuetypescreenschemeExample.Criteria item = issuetypescreenschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuetypescreenschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuetypescreenscheme">从数据库中查询一个对象Issuetypescreenscheme</param>
	 * <param name="AId"></param>
	 */
	public Issuetypescreenscheme issuetypescreenschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("ISSUETYPESCREENSCHEME")) {
			String key = ("ISSUETYPESCREENSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuetypescreenscheme obj = ((Issuetypescreenscheme)(this.getCache().get("ISSUETYPESCREENSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypescreenschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPESCREENSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypescreenschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuetypescreenschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuetypescreenscheme> issuetypescreenschemeSelectObjects(IssuetypescreenschemeExample issuetypescreenschemeQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPESCREENSCHEME")) {
			String key = ("ISSUETYPESCREENSCHEME_" 
						+ ("queryObject_" + this.getIssuetypescreenschemeExampleConditionSql(issuetypescreenschemeQueryCondition)));
			List<Issuetypescreenscheme> obj = ((List<Issuetypescreenscheme>)(this.getCache().get("ISSUETYPESCREENSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypescreenschemeSelectObjects(issuetypescreenschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPESCREENSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypescreenschemeSelectObjects(issuetypescreenschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="issuetypescreenschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuetypescreenschemeQuerySelectObjectsCount(IssuetypescreenschemeExample issuetypescreenschemeQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPESCREENSCHEME")) {
			String key = ("ISSUETYPESCREENSCHEME_" 
						+ ("queryCount_" + this.getIssuetypescreenschemeExampleConditionSql(issuetypescreenschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUETYPESCREENSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypescreenschemeQuerySelectObjectsCount(issuetypescreenschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPESCREENSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypescreenschemeQuerySelectObjectsCount(issuetypescreenschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Issuetypescreenschemeentity到数据库中
	 * <param name="issuetypescreenschemeentity">需要插入的新对象</param>
	 */
	public int issuetypescreenschemeentityInsert(Issuetypescreenschemeentity issuetypescreenschemeentity) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityInsert(issuetypescreenschemeentity);
		if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
			this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + issuetypescreenschemeentity.getId());
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "插入", "ID", kvalue, issuetypescreenschemeentity, ret);
		return ret;
	}
	
	/**
	 * <param name="issuetypescreenschemeentity">从数据库中删除一个对象Issuetypescreenschemeentity</param>
	 * <param name="AId"></param>
	 */
	public int issuetypescreenschemeentityDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
				this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="issuetypescreenschemeentity">从数据库中删除一个对象Issuetypescreenschemeentity</param>
	 */
	public int issuetypescreenschemeentityDeleteByCondition(IssuetypescreenschemeentityExample issuetypescreenschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityDeleteByCondition(issuetypescreenschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
				this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
			}
		}
		String kvalue = this.getIssuetypescreenschemeentityExampleConditionSql(issuetypescreenschemeentityQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "条件删除", "conditionSql", kvalue, issuetypescreenschemeentityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Issuetypescreenschemeentity到数据库中
	 * <param name="issuetypescreenschemeentity">需要更新的Issuetypescreenschemeentity</param>
	 */
	public int issuetypescreenschemeentityUpdate(Issuetypescreenschemeentity issuetypescreenschemeentity) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityUpdate(issuetypescreenschemeentity);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
				this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetypescreenschemeentity.getId());
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "更新", "ID", kvalue, issuetypescreenschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Issuetypescreenschemeentity到数据库中
	 * <param name="issuetypescreenschemeentity">需要更新的Issuetypescreenschemeentity</param>
	 */
	public int issuetypescreenschemeentityUpdateSelective(Issuetypescreenschemeentity issuetypescreenschemeentity) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityUpdateSelective(issuetypescreenschemeentity);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
				this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + issuetypescreenschemeentity.getId());
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "部分更新", "ID", kvalue, issuetypescreenschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuetypescreenschemeentity到数据库中
	 * <param name="issuetypescreenschemeentityQueryCondition">附加的条件</param>
	 * <param name="issuetypescreenschemeentity">需要更新的Issuetypescreenschemeentity</param>
	 */
	public int issuetypescreenschemeentityUpdateByCondition(Issuetypescreenschemeentity issuetypescreenschemeentity, IssuetypescreenschemeentityExample issuetypescreenschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityUpdateByCondition(issuetypescreenschemeentity, issuetypescreenschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
				this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
			}
		}
		String kvalue = this.getIssuetypescreenschemeentityExampleConditionSql(issuetypescreenschemeentityQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "条件更新", "conditionSql", kvalue, issuetypescreenschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Issuetypescreenschemeentity到数据库中
	 * <param name="issuetypescreenschemeentityQueryCondition">附加的条件</param>
	 * <param name="issuetypescreenschemeentity">需要更新的Issuetypescreenschemeentity</param>
	 */
	public int issuetypescreenschemeentityUpdateSelectiveByCondition(Issuetypescreenschemeentity issuetypescreenschemeentity, IssuetypescreenschemeentityExample issuetypescreenschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().issuetypescreenschemeentityUpdateSelectiveByCondition(issuetypescreenschemeentity, issuetypescreenschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
				this.getCache().clear("ISSUETYPESCREENSCHEMEENTITY");
			}
		}
		String kvalue = this.getIssuetypescreenschemeentityExampleConditionSql(issuetypescreenschemeentityQueryCondition);
		this.operatesLogSimpleAdd("ISSUETYPESCREENSCHEMEENTITY", "批量部分更新", "conditionSql", kvalue, issuetypescreenschemeentity, ret);
		return ret;
	}
	
	public String getIssuetypescreenschemeentityExampleConditionSql(IssuetypescreenschemeentityExample issuetypescreenschemeentityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < issuetypescreenschemeentityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			IssuetypescreenschemeentityExample.Criteria item = issuetypescreenschemeentityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					IssuetypescreenschemeentityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="issuetypescreenschemeentity">从数据库中查询一个对象Issuetypescreenschemeentity</param>
	 * <param name="AId"></param>
	 */
	public Issuetypescreenschemeentity issuetypescreenschemeentitySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
			String key = ("ISSUETYPESCREENSCHEMEENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Issuetypescreenschemeentity obj = ((Issuetypescreenschemeentity)(this.getCache().get("ISSUETYPESCREENSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypescreenschemeentitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPESCREENSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypescreenschemeentitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="issuetypescreenschemeentityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Issuetypescreenschemeentity> issuetypescreenschemeentitySelectObjects(IssuetypescreenschemeentityExample issuetypescreenschemeentityQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
			String key = ("ISSUETYPESCREENSCHEMEENTITY_" 
						+ ("queryObject_" + this.getIssuetypescreenschemeentityExampleConditionSql(issuetypescreenschemeentityQueryCondition)));
			List<Issuetypescreenschemeentity> obj = ((List<Issuetypescreenschemeentity>)(this.getCache().get("ISSUETYPESCREENSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypescreenschemeentitySelectObjects(issuetypescreenschemeentityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPESCREENSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypescreenschemeentitySelectObjects(issuetypescreenschemeentityQueryCondition);
		}
	}
	
	/**
	 * <param name="issuetypescreenschemeentityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int issuetypescreenschemeentityQuerySelectObjectsCount(IssuetypescreenschemeentityExample issuetypescreenschemeentityQueryCondition) throws CacheException {
		if (this.needCache("ISSUETYPESCREENSCHEMEENTITY")) {
			String key = ("ISSUETYPESCREENSCHEMEENTITY_" 
						+ ("queryCount_" + this.getIssuetypescreenschemeentityExampleConditionSql(issuetypescreenschemeentityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("ISSUETYPESCREENSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().issuetypescreenschemeentityQuerySelectObjectsCount(issuetypescreenschemeentityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("ISSUETYPESCREENSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().issuetypescreenschemeentityQuerySelectObjectsCount(issuetypescreenschemeentityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Jiraaction到数据库中
	 * <param name="jiraaction">需要插入的新对象</param>
	 */
	public int jiraactionInsert(Jiraaction jiraaction) throws CacheException {
		int ret = this.getDao().jiraactionInsert(jiraaction);
		if (this.needCache("JIRAACTION")) {
			this.getCache().clear("JIRAACTION");
		}
		String kvalue = "";
		kvalue = (kvalue + jiraaction.getId());
		this.operatesLogSimpleAdd("JIRAACTION", "插入", "ID", kvalue, jiraaction, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraaction">从数据库中删除一个对象Jiraaction</param>
	 * <param name="AId"></param>
	 */
	public int jiraactionDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().jiraactionDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("JIRAACTION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraaction">从数据库中删除一个对象Jiraaction</param>
	 */
	public int jiraactionDeleteByCondition(JiraactionExample jiraactionQueryCondition) throws CacheException {
		int ret = this.getDao().jiraactionDeleteByCondition(jiraactionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = this.getJiraactionExampleConditionSql(jiraactionQueryCondition);
		this.operatesLogSimpleAdd("JIRAACTION", "条件删除", "conditionSql", kvalue, jiraactionQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Jiraaction到数据库中
	 * <param name="jiraaction">需要更新的Jiraaction</param>
	 */
	public int jiraactionUpdate(Jiraaction jiraaction) throws CacheException {
		int ret = this.getDao().jiraactionUpdate(jiraaction);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraaction.getId());
		this.operatesLogSimpleAdd("JIRAACTION", "更新", "ID", kvalue, jiraaction, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Jiraaction到数据库中
	 * <param name="jiraaction">需要更新的Jiraaction</param>
	 */
	public int jiraactionUpdateSelective(Jiraaction jiraaction) throws CacheException {
		int ret = this.getDao().jiraactionUpdateSelective(jiraaction);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraaction.getId());
		this.operatesLogSimpleAdd("JIRAACTION", "部分更新", "ID", kvalue, jiraaction, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Jiraaction到数据库中
	 * <param name="jiraaction">需要更新的Jiraaction</param>
	 */
	public int jiraactionUpdateWithBlobs(Jiraaction jiraaction) throws CacheException {
		int ret = this.getDao().jiraactionUpdateWithBlobs(jiraaction);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraaction.getId());
		this.operatesLogSimpleAdd("JIRAACTION", "更新含Blob", "ID", kvalue, jiraaction, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraaction到数据库中
	 * <param name="jiraactionQueryCondition">附加的条件</param>
	 * <param name="jiraaction">需要更新的Jiraaction</param>
	 */
	public int jiraactionUpdateByCondition(Jiraaction jiraaction, JiraactionExample jiraactionQueryCondition) throws CacheException {
		int ret = this.getDao().jiraactionUpdateByCondition(jiraaction, jiraactionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = this.getJiraactionExampleConditionSql(jiraactionQueryCondition);
		this.operatesLogSimpleAdd("JIRAACTION", "条件更新", "conditionSql", kvalue, jiraaction, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraaction到数据库中
	 * <param name="jiraactionQueryCondition">附加的条件</param>
	 * <param name="jiraaction">需要更新的Jiraaction</param>
	 */
	public int jiraactionUpdateSelectiveByCondition(Jiraaction jiraaction, JiraactionExample jiraactionQueryCondition) throws CacheException {
		int ret = this.getDao().jiraactionUpdateSelectiveByCondition(jiraaction, jiraactionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAACTION")) {
				this.getCache().clear("JIRAACTION");
			}
		}
		String kvalue = this.getJiraactionExampleConditionSql(jiraactionQueryCondition);
		this.operatesLogSimpleAdd("JIRAACTION", "批量部分更新", "conditionSql", kvalue, jiraaction, ret);
		return ret;
	}
	
	public String getJiraactionExampleConditionSql(JiraactionExample jiraactionQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < jiraactionQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			JiraactionExample.Criteria item = jiraactionQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					JiraactionExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="jiraaction">从数据库中查询一个对象Jiraaction</param>
	 * <param name="AId"></param>
	 */
	public Jiraaction jiraactionSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("JIRAACTION")) {
			String key = ("JIRAACTION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Jiraaction obj = ((Jiraaction)(this.getCache().get("JIRAACTION", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraactionSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("JIRAACTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraactionSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="jiraactionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraaction> jiraactionSelectObjects(JiraactionExample jiraactionQueryCondition) throws CacheException {
		if (this.needCache("JIRAACTION")) {
			String key = ("JIRAACTION_" 
						+ ("queryObject_" + this.getJiraactionExampleConditionSql(jiraactionQueryCondition)));
			List<Jiraaction> obj = ((List<Jiraaction>)(this.getCache().get("JIRAACTION", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraactionSelectObjects(jiraactionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAACTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraactionSelectObjects(jiraactionQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraactionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraaction> jiraactionSelectObjectsWithBLOBs(JiraactionExample jiraactionQueryCondition) throws CacheException {
		if (this.needCache("JIRAACTION")) {
			String key = ("JIRAACTION_" 
						+ ("queryObject_" + this.getJiraactionExampleConditionSql(jiraactionQueryCondition)));
			List<Jiraaction> obj = ((List<Jiraaction>)(this.getCache().get("JIRAACTION", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraactionSelectObjectsWithBLOBs(jiraactionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAACTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraactionSelectObjectsWithBLOBs(jiraactionQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraactionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int jiraactionQuerySelectObjectsCount(JiraactionExample jiraactionQueryCondition) throws CacheException {
		if (this.needCache("JIRAACTION")) {
			String key = ("JIRAACTION_" 
						+ ("queryCount_" + this.getJiraactionExampleConditionSql(jiraactionQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("JIRAACTION", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraactionQuerySelectObjectsCount(jiraactionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAACTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraactionQuerySelectObjectsCount(jiraactionQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Jiradraftworkflows到数据库中
	 * <param name="jiradraftworkflows">需要插入的新对象</param>
	 */
	public int jiradraftworkflowsInsert(Jiradraftworkflows jiradraftworkflows) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsInsert(jiradraftworkflows);
		if (this.needCache("JIRADRAFTWORKFLOWS")) {
			this.getCache().clear("JIRADRAFTWORKFLOWS");
		}
		String kvalue = "";
		kvalue = (kvalue + jiradraftworkflows.getId());
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "插入", "ID", kvalue, jiradraftworkflows, ret);
		return ret;
	}
	
	/**
	 * <param name="jiradraftworkflows">从数据库中删除一个对象Jiradraftworkflows</param>
	 * <param name="AId"></param>
	 */
	public int jiradraftworkflowsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="jiradraftworkflows">从数据库中删除一个对象Jiradraftworkflows</param>
	 */
	public int jiradraftworkflowsDeleteByCondition(JiradraftworkflowsExample jiradraftworkflowsQueryCondition) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsDeleteByCondition(jiradraftworkflowsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = this.getJiradraftworkflowsExampleConditionSql(jiradraftworkflowsQueryCondition);
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "条件删除", "conditionSql", kvalue, jiradraftworkflowsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Jiradraftworkflows到数据库中
	 * <param name="jiradraftworkflows">需要更新的Jiradraftworkflows</param>
	 */
	public int jiradraftworkflowsUpdate(Jiradraftworkflows jiradraftworkflows) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsUpdate(jiradraftworkflows);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiradraftworkflows.getId());
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "更新", "ID", kvalue, jiradraftworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Jiradraftworkflows到数据库中
	 * <param name="jiradraftworkflows">需要更新的Jiradraftworkflows</param>
	 */
	public int jiradraftworkflowsUpdateSelective(Jiradraftworkflows jiradraftworkflows) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsUpdateSelective(jiradraftworkflows);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiradraftworkflows.getId());
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "部分更新", "ID", kvalue, jiradraftworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Jiradraftworkflows到数据库中
	 * <param name="jiradraftworkflows">需要更新的Jiradraftworkflows</param>
	 */
	public int jiradraftworkflowsUpdateWithBlobs(Jiradraftworkflows jiradraftworkflows) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsUpdateWithBlobs(jiradraftworkflows);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiradraftworkflows.getId());
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "更新含Blob", "ID", kvalue, jiradraftworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiradraftworkflows到数据库中
	 * <param name="jiradraftworkflowsQueryCondition">附加的条件</param>
	 * <param name="jiradraftworkflows">需要更新的Jiradraftworkflows</param>
	 */
	public int jiradraftworkflowsUpdateByCondition(Jiradraftworkflows jiradraftworkflows, JiradraftworkflowsExample jiradraftworkflowsQueryCondition) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsUpdateByCondition(jiradraftworkflows, jiradraftworkflowsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = this.getJiradraftworkflowsExampleConditionSql(jiradraftworkflowsQueryCondition);
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "条件更新", "conditionSql", kvalue, jiradraftworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiradraftworkflows到数据库中
	 * <param name="jiradraftworkflowsQueryCondition">附加的条件</param>
	 * <param name="jiradraftworkflows">需要更新的Jiradraftworkflows</param>
	 */
	public int jiradraftworkflowsUpdateSelectiveByCondition(Jiradraftworkflows jiradraftworkflows, JiradraftworkflowsExample jiradraftworkflowsQueryCondition) throws CacheException {
		int ret = this.getDao().jiradraftworkflowsUpdateSelectiveByCondition(jiradraftworkflows, jiradraftworkflowsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRADRAFTWORKFLOWS")) {
				this.getCache().clear("JIRADRAFTWORKFLOWS");
			}
		}
		String kvalue = this.getJiradraftworkflowsExampleConditionSql(jiradraftworkflowsQueryCondition);
		this.operatesLogSimpleAdd("JIRADRAFTWORKFLOWS", "批量部分更新", "conditionSql", kvalue, jiradraftworkflows, ret);
		return ret;
	}
	
	public String getJiradraftworkflowsExampleConditionSql(JiradraftworkflowsExample jiradraftworkflowsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < jiradraftworkflowsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			JiradraftworkflowsExample.Criteria item = jiradraftworkflowsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					JiradraftworkflowsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="jiradraftworkflows">从数据库中查询一个对象Jiradraftworkflows</param>
	 * <param name="AId"></param>
	 */
	public Jiradraftworkflows jiradraftworkflowsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("JIRADRAFTWORKFLOWS")) {
			String key = ("JIRADRAFTWORKFLOWS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Jiradraftworkflows obj = ((Jiradraftworkflows)(this.getCache().get("JIRADRAFTWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiradraftworkflowsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("JIRADRAFTWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiradraftworkflowsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="jiradraftworkflowsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiradraftworkflows> jiradraftworkflowsSelectObjects(JiradraftworkflowsExample jiradraftworkflowsQueryCondition) throws CacheException {
		if (this.needCache("JIRADRAFTWORKFLOWS")) {
			String key = ("JIRADRAFTWORKFLOWS_" 
						+ ("queryObject_" + this.getJiradraftworkflowsExampleConditionSql(jiradraftworkflowsQueryCondition)));
			List<Jiradraftworkflows> obj = ((List<Jiradraftworkflows>)(this.getCache().get("JIRADRAFTWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiradraftworkflowsSelectObjects(jiradraftworkflowsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRADRAFTWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiradraftworkflowsSelectObjects(jiradraftworkflowsQueryCondition);
		}
	}
	
	/**
	 * <param name="jiradraftworkflowsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiradraftworkflows> jiradraftworkflowsSelectObjectsWithBLOBs(JiradraftworkflowsExample jiradraftworkflowsQueryCondition) throws CacheException {
		if (this.needCache("JIRADRAFTWORKFLOWS")) {
			String key = ("JIRADRAFTWORKFLOWS_" 
						+ ("queryObject_" + this.getJiradraftworkflowsExampleConditionSql(jiradraftworkflowsQueryCondition)));
			List<Jiradraftworkflows> obj = ((List<Jiradraftworkflows>)(this.getCache().get("JIRADRAFTWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiradraftworkflowsSelectObjectsWithBLOBs(jiradraftworkflowsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRADRAFTWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiradraftworkflowsSelectObjectsWithBLOBs(jiradraftworkflowsQueryCondition);
		}
	}
	
	/**
	 * <param name="jiradraftworkflowsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int jiradraftworkflowsQuerySelectObjectsCount(JiradraftworkflowsExample jiradraftworkflowsQueryCondition) throws CacheException {
		if (this.needCache("JIRADRAFTWORKFLOWS")) {
			String key = ("JIRADRAFTWORKFLOWS_" 
						+ ("queryCount_" + this.getJiradraftworkflowsExampleConditionSql(jiradraftworkflowsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("JIRADRAFTWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiradraftworkflowsQuerySelectObjectsCount(jiradraftworkflowsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRADRAFTWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiradraftworkflowsQuerySelectObjectsCount(jiradraftworkflowsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Jiraeventtype到数据库中
	 * <param name="jiraeventtype">需要插入的新对象</param>
	 */
	public int jiraeventtypeInsert(Jiraeventtype jiraeventtype) throws CacheException {
		int ret = this.getDao().jiraeventtypeInsert(jiraeventtype);
		if (this.needCache("JIRAEVENTTYPE")) {
			this.getCache().clear("JIRAEVENTTYPE");
		}
		String kvalue = "";
		kvalue = (kvalue + jiraeventtype.getId());
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "插入", "ID", kvalue, jiraeventtype, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraeventtype">从数据库中删除一个对象Jiraeventtype</param>
	 * <param name="AId"></param>
	 */
	public int jiraeventtypeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().jiraeventtypeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraeventtype">从数据库中删除一个对象Jiraeventtype</param>
	 */
	public int jiraeventtypeDeleteByCondition(JiraeventtypeExample jiraeventtypeQueryCondition) throws CacheException {
		int ret = this.getDao().jiraeventtypeDeleteByCondition(jiraeventtypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = this.getJiraeventtypeExampleConditionSql(jiraeventtypeQueryCondition);
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "条件删除", "conditionSql", kvalue, jiraeventtypeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Jiraeventtype到数据库中
	 * <param name="jiraeventtype">需要更新的Jiraeventtype</param>
	 */
	public int jiraeventtypeUpdate(Jiraeventtype jiraeventtype) throws CacheException {
		int ret = this.getDao().jiraeventtypeUpdate(jiraeventtype);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraeventtype.getId());
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "更新", "ID", kvalue, jiraeventtype, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Jiraeventtype到数据库中
	 * <param name="jiraeventtype">需要更新的Jiraeventtype</param>
	 */
	public int jiraeventtypeUpdateSelective(Jiraeventtype jiraeventtype) throws CacheException {
		int ret = this.getDao().jiraeventtypeUpdateSelective(jiraeventtype);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraeventtype.getId());
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "部分更新", "ID", kvalue, jiraeventtype, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Jiraeventtype到数据库中
	 * <param name="jiraeventtype">需要更新的Jiraeventtype</param>
	 */
	public int jiraeventtypeUpdateWithBlobs(Jiraeventtype jiraeventtype) throws CacheException {
		int ret = this.getDao().jiraeventtypeUpdateWithBlobs(jiraeventtype);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraeventtype.getId());
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "更新含Blob", "ID", kvalue, jiraeventtype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraeventtype到数据库中
	 * <param name="jiraeventtypeQueryCondition">附加的条件</param>
	 * <param name="jiraeventtype">需要更新的Jiraeventtype</param>
	 */
	public int jiraeventtypeUpdateByCondition(Jiraeventtype jiraeventtype, JiraeventtypeExample jiraeventtypeQueryCondition) throws CacheException {
		int ret = this.getDao().jiraeventtypeUpdateByCondition(jiraeventtype, jiraeventtypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = this.getJiraeventtypeExampleConditionSql(jiraeventtypeQueryCondition);
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "条件更新", "conditionSql", kvalue, jiraeventtype, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraeventtype到数据库中
	 * <param name="jiraeventtypeQueryCondition">附加的条件</param>
	 * <param name="jiraeventtype">需要更新的Jiraeventtype</param>
	 */
	public int jiraeventtypeUpdateSelectiveByCondition(Jiraeventtype jiraeventtype, JiraeventtypeExample jiraeventtypeQueryCondition) throws CacheException {
		int ret = this.getDao().jiraeventtypeUpdateSelectiveByCondition(jiraeventtype, jiraeventtypeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAEVENTTYPE")) {
				this.getCache().clear("JIRAEVENTTYPE");
			}
		}
		String kvalue = this.getJiraeventtypeExampleConditionSql(jiraeventtypeQueryCondition);
		this.operatesLogSimpleAdd("JIRAEVENTTYPE", "批量部分更新", "conditionSql", kvalue, jiraeventtype, ret);
		return ret;
	}
	
	public String getJiraeventtypeExampleConditionSql(JiraeventtypeExample jiraeventtypeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < jiraeventtypeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			JiraeventtypeExample.Criteria item = jiraeventtypeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					JiraeventtypeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="jiraeventtype">从数据库中查询一个对象Jiraeventtype</param>
	 * <param name="AId"></param>
	 */
	public Jiraeventtype jiraeventtypeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("JIRAEVENTTYPE")) {
			String key = ("JIRAEVENTTYPE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Jiraeventtype obj = ((Jiraeventtype)(this.getCache().get("JIRAEVENTTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraeventtypeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("JIRAEVENTTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraeventtypeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="jiraeventtypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraeventtype> jiraeventtypeSelectObjects(JiraeventtypeExample jiraeventtypeQueryCondition) throws CacheException {
		if (this.needCache("JIRAEVENTTYPE")) {
			String key = ("JIRAEVENTTYPE_" 
						+ ("queryObject_" + this.getJiraeventtypeExampleConditionSql(jiraeventtypeQueryCondition)));
			List<Jiraeventtype> obj = ((List<Jiraeventtype>)(this.getCache().get("JIRAEVENTTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraeventtypeSelectObjects(jiraeventtypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAEVENTTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraeventtypeSelectObjects(jiraeventtypeQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraeventtypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraeventtype> jiraeventtypeSelectObjectsWithBLOBs(JiraeventtypeExample jiraeventtypeQueryCondition) throws CacheException {
		if (this.needCache("JIRAEVENTTYPE")) {
			String key = ("JIRAEVENTTYPE_" 
						+ ("queryObject_" + this.getJiraeventtypeExampleConditionSql(jiraeventtypeQueryCondition)));
			List<Jiraeventtype> obj = ((List<Jiraeventtype>)(this.getCache().get("JIRAEVENTTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraeventtypeSelectObjectsWithBLOBs(jiraeventtypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAEVENTTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraeventtypeSelectObjectsWithBLOBs(jiraeventtypeQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraeventtypeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int jiraeventtypeQuerySelectObjectsCount(JiraeventtypeExample jiraeventtypeQueryCondition) throws CacheException {
		if (this.needCache("JIRAEVENTTYPE")) {
			String key = ("JIRAEVENTTYPE_" 
						+ ("queryCount_" + this.getJiraeventtypeExampleConditionSql(jiraeventtypeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("JIRAEVENTTYPE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraeventtypeQuerySelectObjectsCount(jiraeventtypeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAEVENTTYPE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraeventtypeQuerySelectObjectsCount(jiraeventtypeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Jiraissue到数据库中
	 * <param name="jiraissue">需要插入的新对象</param>
	 */
	public int jiraissueInsert(JiraissueWithBLOBs jiraissue) throws CacheException {
		int ret = this.getDao().jiraissueInsert(jiraissue);
		if (this.needCache("JIRAISSUE")) {
			this.getCache().clear("JIRAISSUE");
		}
		String kvalue = "";
		kvalue = (kvalue + jiraissue.getId());
		this.operatesLogSimpleAdd("JIRAISSUE", "插入", "ID", kvalue, jiraissue, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraissue">从数据库中删除一个对象Jiraissue</param>
	 * <param name="AId"></param>
	 */
	public int jiraissueDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().jiraissueDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("JIRAISSUE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraissue">从数据库中删除一个对象Jiraissue</param>
	 */
	public int jiraissueDeleteByCondition(JiraissueExample jiraissueQueryCondition) throws CacheException {
		int ret = this.getDao().jiraissueDeleteByCondition(jiraissueQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = this.getJiraissueExampleConditionSql(jiraissueQueryCondition);
		this.operatesLogSimpleAdd("JIRAISSUE", "条件删除", "conditionSql", kvalue, jiraissueQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Jiraissue到数据库中
	 * <param name="jiraissue">需要更新的Jiraissue</param>
	 */
	public int jiraissueUpdate(JiraissueWithBLOBs jiraissue) throws CacheException {
		int ret = this.getDao().jiraissueUpdate(jiraissue);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraissue.getId());
		this.operatesLogSimpleAdd("JIRAISSUE", "更新", "ID", kvalue, jiraissue, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Jiraissue到数据库中
	 * <param name="jiraissue">需要更新的Jiraissue</param>
	 */
	public int jiraissueUpdateSelective(JiraissueWithBLOBs jiraissue) throws CacheException {
		int ret = this.getDao().jiraissueUpdateSelective(jiraissue);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraissue.getId());
		this.operatesLogSimpleAdd("JIRAISSUE", "部分更新", "ID", kvalue, jiraissue, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Jiraissue到数据库中
	 * <param name="jiraissue">需要更新的Jiraissue</param>
	 */
	public int jiraissueUpdateWithBlobs(JiraissueWithBLOBs jiraissue) throws CacheException {
		int ret = this.getDao().jiraissueUpdateWithBlobs(jiraissue);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraissue.getId());
		this.operatesLogSimpleAdd("JIRAISSUE", "更新含Blob", "ID", kvalue, jiraissue, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraissue到数据库中
	 * <param name="jiraissueQueryCondition">附加的条件</param>
	 * <param name="jiraissue">需要更新的Jiraissue</param>
	 */
	public int jiraissueUpdateByCondition(JiraissueWithBLOBs jiraissue, JiraissueExample jiraissueQueryCondition) throws CacheException {
		int ret = this.getDao().jiraissueUpdateByCondition(jiraissue, jiraissueQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = this.getJiraissueExampleConditionSql(jiraissueQueryCondition);
		this.operatesLogSimpleAdd("JIRAISSUE", "条件更新", "conditionSql", kvalue, jiraissue, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraissue到数据库中
	 * <param name="jiraissueQueryCondition">附加的条件</param>
	 * <param name="jiraissue">需要更新的Jiraissue</param>
	 */
	public int jiraissueUpdateSelectiveByCondition(JiraissueWithBLOBs jiraissue, JiraissueExample jiraissueQueryCondition) throws CacheException {
		int ret = this.getDao().jiraissueUpdateSelectiveByCondition(jiraissue, jiraissueQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAISSUE")) {
				this.getCache().clear("JIRAISSUE");
			}
		}
		String kvalue = this.getJiraissueExampleConditionSql(jiraissueQueryCondition);
		this.operatesLogSimpleAdd("JIRAISSUE", "批量部分更新", "conditionSql", kvalue, jiraissue, ret);
		return ret;
	}
	
	public String getJiraissueExampleConditionSql(JiraissueExample jiraissueQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < jiraissueQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			JiraissueExample.Criteria item = jiraissueQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					JiraissueExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="jiraissue">从数据库中查询一个对象Jiraissue</param>
	 * <param name="AId"></param>
	 */
	public Jiraissue jiraissueSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("JIRAISSUE")) {
			String key = ("JIRAISSUE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Jiraissue obj = ((Jiraissue)(this.getCache().get("JIRAISSUE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraissueSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("JIRAISSUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraissueSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="jiraissueQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraissue> jiraissueSelectObjects(JiraissueExample jiraissueQueryCondition) throws CacheException {
		if (this.needCache("JIRAISSUE")) {
			String key = ("JIRAISSUE_" 
						+ ("queryObject_" + this.getJiraissueExampleConditionSql(jiraissueQueryCondition)));
			List<Jiraissue> obj = ((List<Jiraissue>)(this.getCache().get("JIRAISSUE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraissueSelectObjects(jiraissueQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAISSUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraissueSelectObjects(jiraissueQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraissueQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<JiraissueWithBLOBs> jiraissueSelectObjectsWithBLOBs(JiraissueExample jiraissueQueryCondition) throws CacheException {
		if (this.needCache("JIRAISSUE")) {
			String key = ("JIRAISSUE_" 
						+ ("queryObject_" + this.getJiraissueExampleConditionSql(jiraissueQueryCondition)));
			List<JiraissueWithBLOBs> obj = ((List<JiraissueWithBLOBs>)(this.getCache().get("JIRAISSUE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraissueSelectObjectsWithBLOBs(jiraissueQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAISSUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraissueSelectObjectsWithBLOBs(jiraissueQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraissueQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int jiraissueQuerySelectObjectsCount(JiraissueExample jiraissueQueryCondition) throws CacheException {
		if (this.needCache("JIRAISSUE")) {
			String key = ("JIRAISSUE_" 
						+ ("queryCount_" + this.getJiraissueExampleConditionSql(jiraissueQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("JIRAISSUE", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraissueQuerySelectObjectsCount(jiraissueQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAISSUE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraissueQuerySelectObjectsCount(jiraissueQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Jiraperms到数据库中
	 * <param name="jiraperms">需要插入的新对象</param>
	 */
	public int jirapermsInsert(Jiraperms jiraperms) throws CacheException {
		int ret = this.getDao().jirapermsInsert(jiraperms);
		if (this.needCache("JIRAPERMS")) {
			this.getCache().clear("JIRAPERMS");
		}
		String kvalue = "";
		kvalue = (kvalue + jiraperms.getId());
		this.operatesLogSimpleAdd("JIRAPERMS", "插入", "ID", kvalue, jiraperms, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraperms">从数据库中删除一个对象Jiraperms</param>
	 * <param name="AId"></param>
	 */
	public int jirapermsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().jirapermsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("JIRAPERMS")) {
				this.getCache().clear("JIRAPERMS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("JIRAPERMS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraperms">从数据库中删除一个对象Jiraperms</param>
	 */
	public int jirapermsDeleteByCondition(JirapermsExample jirapermsQueryCondition) throws CacheException {
		int ret = this.getDao().jirapermsDeleteByCondition(jirapermsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAPERMS")) {
				this.getCache().clear("JIRAPERMS");
			}
		}
		String kvalue = this.getJirapermsExampleConditionSql(jirapermsQueryCondition);
		this.operatesLogSimpleAdd("JIRAPERMS", "条件删除", "conditionSql", kvalue, jirapermsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Jiraperms到数据库中
	 * <param name="jiraperms">需要更新的Jiraperms</param>
	 */
	public int jirapermsUpdate(Jiraperms jiraperms) throws CacheException {
		int ret = this.getDao().jirapermsUpdate(jiraperms);
		if ((ret > 0)) {
			if (this.needCache("JIRAPERMS")) {
				this.getCache().clear("JIRAPERMS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraperms.getId());
		this.operatesLogSimpleAdd("JIRAPERMS", "更新", "ID", kvalue, jiraperms, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Jiraperms到数据库中
	 * <param name="jiraperms">需要更新的Jiraperms</param>
	 */
	public int jirapermsUpdateSelective(Jiraperms jiraperms) throws CacheException {
		int ret = this.getDao().jirapermsUpdateSelective(jiraperms);
		if ((ret > 0)) {
			if (this.needCache("JIRAPERMS")) {
				this.getCache().clear("JIRAPERMS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraperms.getId());
		this.operatesLogSimpleAdd("JIRAPERMS", "部分更新", "ID", kvalue, jiraperms, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraperms到数据库中
	 * <param name="jirapermsQueryCondition">附加的条件</param>
	 * <param name="jiraperms">需要更新的Jiraperms</param>
	 */
	public int jirapermsUpdateByCondition(Jiraperms jiraperms, JirapermsExample jirapermsQueryCondition) throws CacheException {
		int ret = this.getDao().jirapermsUpdateByCondition(jiraperms, jirapermsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAPERMS")) {
				this.getCache().clear("JIRAPERMS");
			}
		}
		String kvalue = this.getJirapermsExampleConditionSql(jirapermsQueryCondition);
		this.operatesLogSimpleAdd("JIRAPERMS", "条件更新", "conditionSql", kvalue, jiraperms, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraperms到数据库中
	 * <param name="jirapermsQueryCondition">附加的条件</param>
	 * <param name="jiraperms">需要更新的Jiraperms</param>
	 */
	public int jirapermsUpdateSelectiveByCondition(Jiraperms jiraperms, JirapermsExample jirapermsQueryCondition) throws CacheException {
		int ret = this.getDao().jirapermsUpdateSelectiveByCondition(jiraperms, jirapermsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAPERMS")) {
				this.getCache().clear("JIRAPERMS");
			}
		}
		String kvalue = this.getJirapermsExampleConditionSql(jirapermsQueryCondition);
		this.operatesLogSimpleAdd("JIRAPERMS", "批量部分更新", "conditionSql", kvalue, jiraperms, ret);
		return ret;
	}
	
	public String getJirapermsExampleConditionSql(JirapermsExample jirapermsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < jirapermsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			JirapermsExample.Criteria item = jirapermsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					JirapermsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="jiraperms">从数据库中查询一个对象Jiraperms</param>
	 * <param name="AId"></param>
	 */
	public Jiraperms jirapermsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("JIRAPERMS")) {
			String key = ("JIRAPERMS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Jiraperms obj = ((Jiraperms)(this.getCache().get("JIRAPERMS", key)));
			if ((obj == null)) {
				obj = this.getDao().jirapermsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("JIRAPERMS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jirapermsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="jirapermsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraperms> jirapermsSelectObjects(JirapermsExample jirapermsQueryCondition) throws CacheException {
		if (this.needCache("JIRAPERMS")) {
			String key = ("JIRAPERMS_" 
						+ ("queryObject_" + this.getJirapermsExampleConditionSql(jirapermsQueryCondition)));
			List<Jiraperms> obj = ((List<Jiraperms>)(this.getCache().get("JIRAPERMS", key)));
			if ((obj == null)) {
				obj = this.getDao().jirapermsSelectObjects(jirapermsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAPERMS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jirapermsSelectObjects(jirapermsQueryCondition);
		}
	}
	
	/**
	 * <param name="jirapermsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int jirapermsQuerySelectObjectsCount(JirapermsExample jirapermsQueryCondition) throws CacheException {
		if (this.needCache("JIRAPERMS")) {
			String key = ("JIRAPERMS_" 
						+ ("queryCount_" + this.getJirapermsExampleConditionSql(jirapermsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("JIRAPERMS", key)));
			if ((obj == null)) {
				obj = this.getDao().jirapermsQuerySelectObjectsCount(jirapermsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAPERMS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jirapermsQuerySelectObjectsCount(jirapermsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Jiraworkflows到数据库中
	 * <param name="jiraworkflows">需要插入的新对象</param>
	 */
	public int jiraworkflowsInsert(Jiraworkflows jiraworkflows) throws CacheException {
		int ret = this.getDao().jiraworkflowsInsert(jiraworkflows);
		if (this.needCache("JIRAWORKFLOWS")) {
			this.getCache().clear("JIRAWORKFLOWS");
		}
		String kvalue = "";
		kvalue = (kvalue + jiraworkflows.getId());
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "插入", "ID", kvalue, jiraworkflows, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraworkflows">从数据库中删除一个对象Jiraworkflows</param>
	 * <param name="AId"></param>
	 */
	public int jiraworkflowsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().jiraworkflowsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="jiraworkflows">从数据库中删除一个对象Jiraworkflows</param>
	 */
	public int jiraworkflowsDeleteByCondition(JiraworkflowsExample jiraworkflowsQueryCondition) throws CacheException {
		int ret = this.getDao().jiraworkflowsDeleteByCondition(jiraworkflowsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = this.getJiraworkflowsExampleConditionSql(jiraworkflowsQueryCondition);
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "条件删除", "conditionSql", kvalue, jiraworkflowsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Jiraworkflows到数据库中
	 * <param name="jiraworkflows">需要更新的Jiraworkflows</param>
	 */
	public int jiraworkflowsUpdate(Jiraworkflows jiraworkflows) throws CacheException {
		int ret = this.getDao().jiraworkflowsUpdate(jiraworkflows);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraworkflows.getId());
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "更新", "ID", kvalue, jiraworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Jiraworkflows到数据库中
	 * <param name="jiraworkflows">需要更新的Jiraworkflows</param>
	 */
	public int jiraworkflowsUpdateSelective(Jiraworkflows jiraworkflows) throws CacheException {
		int ret = this.getDao().jiraworkflowsUpdateSelective(jiraworkflows);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraworkflows.getId());
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "部分更新", "ID", kvalue, jiraworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Jiraworkflows到数据库中
	 * <param name="jiraworkflows">需要更新的Jiraworkflows</param>
	 */
	public int jiraworkflowsUpdateWithBlobs(Jiraworkflows jiraworkflows) throws CacheException {
		int ret = this.getDao().jiraworkflowsUpdateWithBlobs(jiraworkflows);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + jiraworkflows.getId());
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "更新含Blob", "ID", kvalue, jiraworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraworkflows到数据库中
	 * <param name="jiraworkflowsQueryCondition">附加的条件</param>
	 * <param name="jiraworkflows">需要更新的Jiraworkflows</param>
	 */
	public int jiraworkflowsUpdateByCondition(Jiraworkflows jiraworkflows, JiraworkflowsExample jiraworkflowsQueryCondition) throws CacheException {
		int ret = this.getDao().jiraworkflowsUpdateByCondition(jiraworkflows, jiraworkflowsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = this.getJiraworkflowsExampleConditionSql(jiraworkflowsQueryCondition);
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "条件更新", "conditionSql", kvalue, jiraworkflows, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Jiraworkflows到数据库中
	 * <param name="jiraworkflowsQueryCondition">附加的条件</param>
	 * <param name="jiraworkflows">需要更新的Jiraworkflows</param>
	 */
	public int jiraworkflowsUpdateSelectiveByCondition(Jiraworkflows jiraworkflows, JiraworkflowsExample jiraworkflowsQueryCondition) throws CacheException {
		int ret = this.getDao().jiraworkflowsUpdateSelectiveByCondition(jiraworkflows, jiraworkflowsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("JIRAWORKFLOWS")) {
				this.getCache().clear("JIRAWORKFLOWS");
			}
		}
		String kvalue = this.getJiraworkflowsExampleConditionSql(jiraworkflowsQueryCondition);
		this.operatesLogSimpleAdd("JIRAWORKFLOWS", "批量部分更新", "conditionSql", kvalue, jiraworkflows, ret);
		return ret;
	}
	
	public String getJiraworkflowsExampleConditionSql(JiraworkflowsExample jiraworkflowsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < jiraworkflowsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			JiraworkflowsExample.Criteria item = jiraworkflowsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					JiraworkflowsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="jiraworkflows">从数据库中查询一个对象Jiraworkflows</param>
	 * <param name="AId"></param>
	 */
	public Jiraworkflows jiraworkflowsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("JIRAWORKFLOWS")) {
			String key = ("JIRAWORKFLOWS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Jiraworkflows obj = ((Jiraworkflows)(this.getCache().get("JIRAWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraworkflowsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("JIRAWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraworkflowsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="jiraworkflowsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraworkflows> jiraworkflowsSelectObjects(JiraworkflowsExample jiraworkflowsQueryCondition) throws CacheException {
		if (this.needCache("JIRAWORKFLOWS")) {
			String key = ("JIRAWORKFLOWS_" 
						+ ("queryObject_" + this.getJiraworkflowsExampleConditionSql(jiraworkflowsQueryCondition)));
			List<Jiraworkflows> obj = ((List<Jiraworkflows>)(this.getCache().get("JIRAWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraworkflowsSelectObjects(jiraworkflowsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraworkflowsSelectObjects(jiraworkflowsQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraworkflowsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Jiraworkflows> jiraworkflowsSelectObjectsWithBLOBs(JiraworkflowsExample jiraworkflowsQueryCondition) throws CacheException {
		if (this.needCache("JIRAWORKFLOWS")) {
			String key = ("JIRAWORKFLOWS_" 
						+ ("queryObject_" + this.getJiraworkflowsExampleConditionSql(jiraworkflowsQueryCondition)));
			List<Jiraworkflows> obj = ((List<Jiraworkflows>)(this.getCache().get("JIRAWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraworkflowsSelectObjectsWithBLOBs(jiraworkflowsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraworkflowsSelectObjectsWithBLOBs(jiraworkflowsQueryCondition);
		}
	}
	
	/**
	 * <param name="jiraworkflowsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int jiraworkflowsQuerySelectObjectsCount(JiraworkflowsExample jiraworkflowsQueryCondition) throws CacheException {
		if (this.needCache("JIRAWORKFLOWS")) {
			String key = ("JIRAWORKFLOWS_" 
						+ ("queryCount_" + this.getJiraworkflowsExampleConditionSql(jiraworkflowsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("JIRAWORKFLOWS", key)));
			if ((obj == null)) {
				obj = this.getDao().jiraworkflowsQuerySelectObjectsCount(jiraworkflowsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("JIRAWORKFLOWS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().jiraworkflowsQuerySelectObjectsCount(jiraworkflowsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Label到数据库中
	 * <param name="label">需要插入的新对象</param>
	 */
	public int labelInsert(Label label) throws CacheException {
		int ret = this.getDao().labelInsert(label);
		if (this.needCache("LABEL")) {
			this.getCache().clear("LABEL");
		}
		String kvalue = "";
		kvalue = (kvalue + label.getId());
		this.operatesLogSimpleAdd("LABEL", "插入", "ID", kvalue, label, ret);
		return ret;
	}
	
	/**
	 * <param name="label">从数据库中删除一个对象Label</param>
	 * <param name="AId"></param>
	 */
	public int labelDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().labelDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("LABEL")) {
				this.getCache().clear("LABEL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("LABEL", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="label">从数据库中删除一个对象Label</param>
	 */
	public int labelDeleteByCondition(LabelExample labelQueryCondition) throws CacheException {
		int ret = this.getDao().labelDeleteByCondition(labelQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("LABEL")) {
				this.getCache().clear("LABEL");
			}
		}
		String kvalue = this.getLabelExampleConditionSql(labelQueryCondition);
		this.operatesLogSimpleAdd("LABEL", "条件删除", "conditionSql", kvalue, labelQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Label到数据库中
	 * <param name="label">需要更新的Label</param>
	 */
	public int labelUpdate(Label label) throws CacheException {
		int ret = this.getDao().labelUpdate(label);
		if ((ret > 0)) {
			if (this.needCache("LABEL")) {
				this.getCache().clear("LABEL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + label.getId());
		this.operatesLogSimpleAdd("LABEL", "更新", "ID", kvalue, label, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Label到数据库中
	 * <param name="label">需要更新的Label</param>
	 */
	public int labelUpdateSelective(Label label) throws CacheException {
		int ret = this.getDao().labelUpdateSelective(label);
		if ((ret > 0)) {
			if (this.needCache("LABEL")) {
				this.getCache().clear("LABEL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + label.getId());
		this.operatesLogSimpleAdd("LABEL", "部分更新", "ID", kvalue, label, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Label到数据库中
	 * <param name="labelQueryCondition">附加的条件</param>
	 * <param name="label">需要更新的Label</param>
	 */
	public int labelUpdateByCondition(Label label, LabelExample labelQueryCondition) throws CacheException {
		int ret = this.getDao().labelUpdateByCondition(label, labelQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("LABEL")) {
				this.getCache().clear("LABEL");
			}
		}
		String kvalue = this.getLabelExampleConditionSql(labelQueryCondition);
		this.operatesLogSimpleAdd("LABEL", "条件更新", "conditionSql", kvalue, label, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Label到数据库中
	 * <param name="labelQueryCondition">附加的条件</param>
	 * <param name="label">需要更新的Label</param>
	 */
	public int labelUpdateSelectiveByCondition(Label label, LabelExample labelQueryCondition) throws CacheException {
		int ret = this.getDao().labelUpdateSelectiveByCondition(label, labelQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("LABEL")) {
				this.getCache().clear("LABEL");
			}
		}
		String kvalue = this.getLabelExampleConditionSql(labelQueryCondition);
		this.operatesLogSimpleAdd("LABEL", "批量部分更新", "conditionSql", kvalue, label, ret);
		return ret;
	}
	
	public String getLabelExampleConditionSql(LabelExample labelQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < labelQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			LabelExample.Criteria item = labelQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					LabelExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="label">从数据库中查询一个对象Label</param>
	 * <param name="AId"></param>
	 */
	public Label labelSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("LABEL")) {
			String key = ("LABEL_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Label obj = ((Label)(this.getCache().get("LABEL", key)));
			if ((obj == null)) {
				obj = this.getDao().labelSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("LABEL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().labelSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="labelQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Label> labelSelectObjects(LabelExample labelQueryCondition) throws CacheException {
		if (this.needCache("LABEL")) {
			String key = ("LABEL_" 
						+ ("queryObject_" + this.getLabelExampleConditionSql(labelQueryCondition)));
			List<Label> obj = ((List<Label>)(this.getCache().get("LABEL", key)));
			if ((obj == null)) {
				obj = this.getDao().labelSelectObjects(labelQueryCondition);
				if ((obj != null)) {
					this.getCache().put("LABEL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().labelSelectObjects(labelQueryCondition);
		}
	}
	
	/**
	 * <param name="labelQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int labelQuerySelectObjectsCount(LabelExample labelQueryCondition) throws CacheException {
		if (this.needCache("LABEL")) {
			String key = ("LABEL_" 
						+ ("queryCount_" + this.getLabelExampleConditionSql(labelQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("LABEL", key)));
			if ((obj == null)) {
				obj = this.getDao().labelQuerySelectObjectsCount(labelQueryCondition);
				if ((obj != null)) {
					this.getCache().put("LABEL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().labelQuerySelectObjectsCount(labelQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Listenerconfig到数据库中
	 * <param name="listenerconfig">需要插入的新对象</param>
	 */
	public int listenerconfigInsert(Listenerconfig listenerconfig) throws CacheException {
		int ret = this.getDao().listenerconfigInsert(listenerconfig);
		if (this.needCache("LISTENERCONFIG")) {
			this.getCache().clear("LISTENERCONFIG");
		}
		String kvalue = "";
		kvalue = (kvalue + listenerconfig.getId());
		this.operatesLogSimpleAdd("LISTENERCONFIG", "插入", "ID", kvalue, listenerconfig, ret);
		return ret;
	}
	
	/**
	 * <param name="listenerconfig">从数据库中删除一个对象Listenerconfig</param>
	 * <param name="AId"></param>
	 */
	public int listenerconfigDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().listenerconfigDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("LISTENERCONFIG")) {
				this.getCache().clear("LISTENERCONFIG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("LISTENERCONFIG", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="listenerconfig">从数据库中删除一个对象Listenerconfig</param>
	 */
	public int listenerconfigDeleteByCondition(ListenerconfigExample listenerconfigQueryCondition) throws CacheException {
		int ret = this.getDao().listenerconfigDeleteByCondition(listenerconfigQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("LISTENERCONFIG")) {
				this.getCache().clear("LISTENERCONFIG");
			}
		}
		String kvalue = this.getListenerconfigExampleConditionSql(listenerconfigQueryCondition);
		this.operatesLogSimpleAdd("LISTENERCONFIG", "条件删除", "conditionSql", kvalue, listenerconfigQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Listenerconfig到数据库中
	 * <param name="listenerconfig">需要更新的Listenerconfig</param>
	 */
	public int listenerconfigUpdate(Listenerconfig listenerconfig) throws CacheException {
		int ret = this.getDao().listenerconfigUpdate(listenerconfig);
		if ((ret > 0)) {
			if (this.needCache("LISTENERCONFIG")) {
				this.getCache().clear("LISTENERCONFIG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + listenerconfig.getId());
		this.operatesLogSimpleAdd("LISTENERCONFIG", "更新", "ID", kvalue, listenerconfig, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Listenerconfig到数据库中
	 * <param name="listenerconfig">需要更新的Listenerconfig</param>
	 */
	public int listenerconfigUpdateSelective(Listenerconfig listenerconfig) throws CacheException {
		int ret = this.getDao().listenerconfigUpdateSelective(listenerconfig);
		if ((ret > 0)) {
			if (this.needCache("LISTENERCONFIG")) {
				this.getCache().clear("LISTENERCONFIG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + listenerconfig.getId());
		this.operatesLogSimpleAdd("LISTENERCONFIG", "部分更新", "ID", kvalue, listenerconfig, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Listenerconfig到数据库中
	 * <param name="listenerconfigQueryCondition">附加的条件</param>
	 * <param name="listenerconfig">需要更新的Listenerconfig</param>
	 */
	public int listenerconfigUpdateByCondition(Listenerconfig listenerconfig, ListenerconfigExample listenerconfigQueryCondition) throws CacheException {
		int ret = this.getDao().listenerconfigUpdateByCondition(listenerconfig, listenerconfigQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("LISTENERCONFIG")) {
				this.getCache().clear("LISTENERCONFIG");
			}
		}
		String kvalue = this.getListenerconfigExampleConditionSql(listenerconfigQueryCondition);
		this.operatesLogSimpleAdd("LISTENERCONFIG", "条件更新", "conditionSql", kvalue, listenerconfig, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Listenerconfig到数据库中
	 * <param name="listenerconfigQueryCondition">附加的条件</param>
	 * <param name="listenerconfig">需要更新的Listenerconfig</param>
	 */
	public int listenerconfigUpdateSelectiveByCondition(Listenerconfig listenerconfig, ListenerconfigExample listenerconfigQueryCondition) throws CacheException {
		int ret = this.getDao().listenerconfigUpdateSelectiveByCondition(listenerconfig, listenerconfigQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("LISTENERCONFIG")) {
				this.getCache().clear("LISTENERCONFIG");
			}
		}
		String kvalue = this.getListenerconfigExampleConditionSql(listenerconfigQueryCondition);
		this.operatesLogSimpleAdd("LISTENERCONFIG", "批量部分更新", "conditionSql", kvalue, listenerconfig, ret);
		return ret;
	}
	
	public String getListenerconfigExampleConditionSql(ListenerconfigExample listenerconfigQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < listenerconfigQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ListenerconfigExample.Criteria item = listenerconfigQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ListenerconfigExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="listenerconfig">从数据库中查询一个对象Listenerconfig</param>
	 * <param name="AId"></param>
	 */
	public Listenerconfig listenerconfigSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("LISTENERCONFIG")) {
			String key = ("LISTENERCONFIG_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Listenerconfig obj = ((Listenerconfig)(this.getCache().get("LISTENERCONFIG", key)));
			if ((obj == null)) {
				obj = this.getDao().listenerconfigSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("LISTENERCONFIG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().listenerconfigSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="listenerconfigQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Listenerconfig> listenerconfigSelectObjects(ListenerconfigExample listenerconfigQueryCondition) throws CacheException {
		if (this.needCache("LISTENERCONFIG")) {
			String key = ("LISTENERCONFIG_" 
						+ ("queryObject_" + this.getListenerconfigExampleConditionSql(listenerconfigQueryCondition)));
			List<Listenerconfig> obj = ((List<Listenerconfig>)(this.getCache().get("LISTENERCONFIG", key)));
			if ((obj == null)) {
				obj = this.getDao().listenerconfigSelectObjects(listenerconfigQueryCondition);
				if ((obj != null)) {
					this.getCache().put("LISTENERCONFIG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().listenerconfigSelectObjects(listenerconfigQueryCondition);
		}
	}
	
	/**
	 * <param name="listenerconfigQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int listenerconfigQuerySelectObjectsCount(ListenerconfigExample listenerconfigQueryCondition) throws CacheException {
		if (this.needCache("LISTENERCONFIG")) {
			String key = ("LISTENERCONFIG_" 
						+ ("queryCount_" + this.getListenerconfigExampleConditionSql(listenerconfigQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("LISTENERCONFIG", key)));
			if ((obj == null)) {
				obj = this.getDao().listenerconfigQuerySelectObjectsCount(listenerconfigQueryCondition);
				if ((obj != null)) {
					this.getCache().put("LISTENERCONFIG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().listenerconfigQuerySelectObjectsCount(listenerconfigQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Mailserver到数据库中
	 * <param name="mailserver">需要插入的新对象</param>
	 */
	public int mailserverInsert(Mailserver mailserver) throws CacheException {
		int ret = this.getDao().mailserverInsert(mailserver);
		if (this.needCache("MAILSERVER")) {
			this.getCache().clear("MAILSERVER");
		}
		String kvalue = "";
		kvalue = (kvalue + mailserver.getId());
		this.operatesLogSimpleAdd("MAILSERVER", "插入", "ID", kvalue, mailserver, ret);
		return ret;
	}
	
	/**
	 * <param name="mailserver">从数据库中删除一个对象Mailserver</param>
	 * <param name="AId"></param>
	 */
	public int mailserverDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().mailserverDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("MAILSERVER", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="mailserver">从数据库中删除一个对象Mailserver</param>
	 */
	public int mailserverDeleteByCondition(MailserverExample mailserverQueryCondition) throws CacheException {
		int ret = this.getDao().mailserverDeleteByCondition(mailserverQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = this.getMailserverExampleConditionSql(mailserverQueryCondition);
		this.operatesLogSimpleAdd("MAILSERVER", "条件删除", "conditionSql", kvalue, mailserverQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Mailserver到数据库中
	 * <param name="mailserver">需要更新的Mailserver</param>
	 */
	public int mailserverUpdate(Mailserver mailserver) throws CacheException {
		int ret = this.getDao().mailserverUpdate(mailserver);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + mailserver.getId());
		this.operatesLogSimpleAdd("MAILSERVER", "更新", "ID", kvalue, mailserver, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Mailserver到数据库中
	 * <param name="mailserver">需要更新的Mailserver</param>
	 */
	public int mailserverUpdateSelective(Mailserver mailserver) throws CacheException {
		int ret = this.getDao().mailserverUpdateSelective(mailserver);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + mailserver.getId());
		this.operatesLogSimpleAdd("MAILSERVER", "部分更新", "ID", kvalue, mailserver, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Mailserver到数据库中
	 * <param name="mailserver">需要更新的Mailserver</param>
	 */
	public int mailserverUpdateWithBlobs(Mailserver mailserver) throws CacheException {
		int ret = this.getDao().mailserverUpdateWithBlobs(mailserver);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + mailserver.getId());
		this.operatesLogSimpleAdd("MAILSERVER", "更新含Blob", "ID", kvalue, mailserver, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Mailserver到数据库中
	 * <param name="mailserverQueryCondition">附加的条件</param>
	 * <param name="mailserver">需要更新的Mailserver</param>
	 */
	public int mailserverUpdateByCondition(Mailserver mailserver, MailserverExample mailserverQueryCondition) throws CacheException {
		int ret = this.getDao().mailserverUpdateByCondition(mailserver, mailserverQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = this.getMailserverExampleConditionSql(mailserverQueryCondition);
		this.operatesLogSimpleAdd("MAILSERVER", "条件更新", "conditionSql", kvalue, mailserver, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Mailserver到数据库中
	 * <param name="mailserverQueryCondition">附加的条件</param>
	 * <param name="mailserver">需要更新的Mailserver</param>
	 */
	public int mailserverUpdateSelectiveByCondition(Mailserver mailserver, MailserverExample mailserverQueryCondition) throws CacheException {
		int ret = this.getDao().mailserverUpdateSelectiveByCondition(mailserver, mailserverQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("MAILSERVER")) {
				this.getCache().clear("MAILSERVER");
			}
		}
		String kvalue = this.getMailserverExampleConditionSql(mailserverQueryCondition);
		this.operatesLogSimpleAdd("MAILSERVER", "批量部分更新", "conditionSql", kvalue, mailserver, ret);
		return ret;
	}
	
	public String getMailserverExampleConditionSql(MailserverExample mailserverQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < mailserverQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			MailserverExample.Criteria item = mailserverQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					MailserverExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="mailserver">从数据库中查询一个对象Mailserver</param>
	 * <param name="AId"></param>
	 */
	public Mailserver mailserverSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("MAILSERVER")) {
			String key = ("MAILSERVER_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Mailserver obj = ((Mailserver)(this.getCache().get("MAILSERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().mailserverSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("MAILSERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().mailserverSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="mailserverQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Mailserver> mailserverSelectObjects(MailserverExample mailserverQueryCondition) throws CacheException {
		if (this.needCache("MAILSERVER")) {
			String key = ("MAILSERVER_" 
						+ ("queryObject_" + this.getMailserverExampleConditionSql(mailserverQueryCondition)));
			List<Mailserver> obj = ((List<Mailserver>)(this.getCache().get("MAILSERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().mailserverSelectObjects(mailserverQueryCondition);
				if ((obj != null)) {
					this.getCache().put("MAILSERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().mailserverSelectObjects(mailserverQueryCondition);
		}
	}
	
	/**
	 * <param name="mailserverQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Mailserver> mailserverSelectObjectsWithBLOBs(MailserverExample mailserverQueryCondition) throws CacheException {
		if (this.needCache("MAILSERVER")) {
			String key = ("MAILSERVER_" 
						+ ("queryObject_" + this.getMailserverExampleConditionSql(mailserverQueryCondition)));
			List<Mailserver> obj = ((List<Mailserver>)(this.getCache().get("MAILSERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().mailserverSelectObjectsWithBLOBs(mailserverQueryCondition);
				if ((obj != null)) {
					this.getCache().put("MAILSERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().mailserverSelectObjectsWithBLOBs(mailserverQueryCondition);
		}
	}
	
	/**
	 * <param name="mailserverQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int mailserverQuerySelectObjectsCount(MailserverExample mailserverQueryCondition) throws CacheException {
		if (this.needCache("MAILSERVER")) {
			String key = ("MAILSERVER_" 
						+ ("queryCount_" + this.getMailserverExampleConditionSql(mailserverQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("MAILSERVER", key)));
			if ((obj == null)) {
				obj = this.getDao().mailserverQuerySelectObjectsCount(mailserverQueryCondition);
				if ((obj != null)) {
					this.getCache().put("MAILSERVER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().mailserverQuerySelectObjectsCount(mailserverQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Membershipbase到数据库中
	 * <param name="membershipbase">需要插入的新对象</param>
	 */
	public int membershipbaseInsert(Membershipbase membershipbase) throws CacheException {
		int ret = this.getDao().membershipbaseInsert(membershipbase);
		if (this.needCache("MEMBERSHIPBASE")) {
			this.getCache().clear("MEMBERSHIPBASE");
		}
		String kvalue = "";
		kvalue = (kvalue + membershipbase.getId());
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "插入", "ID", kvalue, membershipbase, ret);
		return ret;
	}
	
	/**
	 * <param name="membershipbase">从数据库中删除一个对象Membershipbase</param>
	 * <param name="AId"></param>
	 */
	public int membershipbaseDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().membershipbaseDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("MEMBERSHIPBASE")) {
				this.getCache().clear("MEMBERSHIPBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="membershipbase">从数据库中删除一个对象Membershipbase</param>
	 */
	public int membershipbaseDeleteByCondition(MembershipbaseExample membershipbaseQueryCondition) throws CacheException {
		int ret = this.getDao().membershipbaseDeleteByCondition(membershipbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("MEMBERSHIPBASE")) {
				this.getCache().clear("MEMBERSHIPBASE");
			}
		}
		String kvalue = this.getMembershipbaseExampleConditionSql(membershipbaseQueryCondition);
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "条件删除", "conditionSql", kvalue, membershipbaseQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Membershipbase到数据库中
	 * <param name="membershipbase">需要更新的Membershipbase</param>
	 */
	public int membershipbaseUpdate(Membershipbase membershipbase) throws CacheException {
		int ret = this.getDao().membershipbaseUpdate(membershipbase);
		if ((ret > 0)) {
			if (this.needCache("MEMBERSHIPBASE")) {
				this.getCache().clear("MEMBERSHIPBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + membershipbase.getId());
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "更新", "ID", kvalue, membershipbase, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Membershipbase到数据库中
	 * <param name="membershipbase">需要更新的Membershipbase</param>
	 */
	public int membershipbaseUpdateSelective(Membershipbase membershipbase) throws CacheException {
		int ret = this.getDao().membershipbaseUpdateSelective(membershipbase);
		if ((ret > 0)) {
			if (this.needCache("MEMBERSHIPBASE")) {
				this.getCache().clear("MEMBERSHIPBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + membershipbase.getId());
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "部分更新", "ID", kvalue, membershipbase, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Membershipbase到数据库中
	 * <param name="membershipbaseQueryCondition">附加的条件</param>
	 * <param name="membershipbase">需要更新的Membershipbase</param>
	 */
	public int membershipbaseUpdateByCondition(Membershipbase membershipbase, MembershipbaseExample membershipbaseQueryCondition) throws CacheException {
		int ret = this.getDao().membershipbaseUpdateByCondition(membershipbase, membershipbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("MEMBERSHIPBASE")) {
				this.getCache().clear("MEMBERSHIPBASE");
			}
		}
		String kvalue = this.getMembershipbaseExampleConditionSql(membershipbaseQueryCondition);
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "条件更新", "conditionSql", kvalue, membershipbase, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Membershipbase到数据库中
	 * <param name="membershipbaseQueryCondition">附加的条件</param>
	 * <param name="membershipbase">需要更新的Membershipbase</param>
	 */
	public int membershipbaseUpdateSelectiveByCondition(Membershipbase membershipbase, MembershipbaseExample membershipbaseQueryCondition) throws CacheException {
		int ret = this.getDao().membershipbaseUpdateSelectiveByCondition(membershipbase, membershipbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("MEMBERSHIPBASE")) {
				this.getCache().clear("MEMBERSHIPBASE");
			}
		}
		String kvalue = this.getMembershipbaseExampleConditionSql(membershipbaseQueryCondition);
		this.operatesLogSimpleAdd("MEMBERSHIPBASE", "批量部分更新", "conditionSql", kvalue, membershipbase, ret);
		return ret;
	}
	
	public String getMembershipbaseExampleConditionSql(MembershipbaseExample membershipbaseQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < membershipbaseQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			MembershipbaseExample.Criteria item = membershipbaseQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					MembershipbaseExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="membershipbase">从数据库中查询一个对象Membershipbase</param>
	 * <param name="AId"></param>
	 */
	public Membershipbase membershipbaseSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("MEMBERSHIPBASE")) {
			String key = ("MEMBERSHIPBASE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Membershipbase obj = ((Membershipbase)(this.getCache().get("MEMBERSHIPBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().membershipbaseSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("MEMBERSHIPBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().membershipbaseSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="membershipbaseQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Membershipbase> membershipbaseSelectObjects(MembershipbaseExample membershipbaseQueryCondition) throws CacheException {
		if (this.needCache("MEMBERSHIPBASE")) {
			String key = ("MEMBERSHIPBASE_" 
						+ ("queryObject_" + this.getMembershipbaseExampleConditionSql(membershipbaseQueryCondition)));
			List<Membershipbase> obj = ((List<Membershipbase>)(this.getCache().get("MEMBERSHIPBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().membershipbaseSelectObjects(membershipbaseQueryCondition);
				if ((obj != null)) {
					this.getCache().put("MEMBERSHIPBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().membershipbaseSelectObjects(membershipbaseQueryCondition);
		}
	}
	
	/**
	 * <param name="membershipbaseQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int membershipbaseQuerySelectObjectsCount(MembershipbaseExample membershipbaseQueryCondition) throws CacheException {
		if (this.needCache("MEMBERSHIPBASE")) {
			String key = ("MEMBERSHIPBASE_" 
						+ ("queryCount_" + this.getMembershipbaseExampleConditionSql(membershipbaseQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("MEMBERSHIPBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().membershipbaseQuerySelectObjectsCount(membershipbaseQueryCondition);
				if ((obj != null)) {
					this.getCache().put("MEMBERSHIPBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().membershipbaseQuerySelectObjectsCount(membershipbaseQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Nodeassociation到数据库中
	 * <param name="nodeassociation">需要插入的新对象</param>
	 */
	public int nodeassociationInsert(Nodeassociation nodeassociation) throws CacheException {
		int ret = this.getDao().nodeassociationInsert(nodeassociation);
		if (this.needCache("NODEASSOCIATION")) {
			this.getCache().clear("NODEASSOCIATION");
		}
		String kvalue = "";
		kvalue = (kvalue + nodeassociation.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSourceNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSourceNodeId());
		this.operatesLogSimpleAdd("NODEASSOCIATION", "插入", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NODE_ENTITY,SOURCE_NODE_ID", kvalue, nodeassociation, ret);
		return ret;
	}
	
	/**
	 * <param name="nodeassociation">从数据库中删除一个对象Nodeassociation</param>
	 * <param name="ANodeassociationKey"> 主键类</param>
	 */
	public int nodeassociationDeleteByPrimaryKey(NodeassociationKey ANodeassociationKey) throws CacheException {
		int ret = this.getDao().nodeassociationDeleteByPrimaryKey(ANodeassociationKey);
		if ((ret > 0)) {
			if (this.needCache("NODEASSOCIATION")) {
				this.getCache().clear("NODEASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ANodeassociationKey.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ANodeassociationKey.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ANodeassociationKey.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ANodeassociationKey.getSourceNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + ANodeassociationKey.getSourceNodeId());
		this.operatesLogSimpleAdd("NODEASSOCIATION", "删除", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NODE_ENTITY,SOURCE_NODE_ID", kvalue, ANodeassociationKey, ret);
		return ret;
	}
	
	/**
	 * <param name="nodeassociation">从数据库中删除一个对象Nodeassociation</param>
	 */
	public int nodeassociationDeleteByCondition(NodeassociationExample nodeassociationQueryCondition) throws CacheException {
		int ret = this.getDao().nodeassociationDeleteByCondition(nodeassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NODEASSOCIATION")) {
				this.getCache().clear("NODEASSOCIATION");
			}
		}
		String kvalue = this.getNodeassociationExampleConditionSql(nodeassociationQueryCondition);
		this.operatesLogSimpleAdd("NODEASSOCIATION", "条件删除", "conditionSql", kvalue, nodeassociationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Nodeassociation到数据库中
	 * <param name="nodeassociation">需要更新的Nodeassociation</param>
	 */
	public int nodeassociationUpdate(Nodeassociation nodeassociation) throws CacheException {
		int ret = this.getDao().nodeassociationUpdate(nodeassociation);
		if ((ret > 0)) {
			if (this.needCache("NODEASSOCIATION")) {
				this.getCache().clear("NODEASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + nodeassociation.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSourceNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSourceNodeId());
		this.operatesLogSimpleAdd("NODEASSOCIATION", "更新", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NODE_ENTITY,SOURCE_NODE_ID", kvalue, nodeassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Nodeassociation到数据库中
	 * <param name="nodeassociation">需要更新的Nodeassociation</param>
	 */
	public int nodeassociationUpdateSelective(Nodeassociation nodeassociation) throws CacheException {
		int ret = this.getDao().nodeassociationUpdateSelective(nodeassociation);
		if ((ret > 0)) {
			if (this.needCache("NODEASSOCIATION")) {
				this.getCache().clear("NODEASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + nodeassociation.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSourceNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + nodeassociation.getSourceNodeId());
		this.operatesLogSimpleAdd("NODEASSOCIATION", "部分更新", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NODE_ENTITY,SOURCE_NODE_ID", kvalue, nodeassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Nodeassociation到数据库中
	 * <param name="nodeassociationQueryCondition">附加的条件</param>
	 * <param name="nodeassociation">需要更新的Nodeassociation</param>
	 */
	public int nodeassociationUpdateByCondition(Nodeassociation nodeassociation, NodeassociationExample nodeassociationQueryCondition) throws CacheException {
		int ret = this.getDao().nodeassociationUpdateByCondition(nodeassociation, nodeassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NODEASSOCIATION")) {
				this.getCache().clear("NODEASSOCIATION");
			}
		}
		String kvalue = this.getNodeassociationExampleConditionSql(nodeassociationQueryCondition);
		this.operatesLogSimpleAdd("NODEASSOCIATION", "条件更新", "conditionSql", kvalue, nodeassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Nodeassociation到数据库中
	 * <param name="nodeassociationQueryCondition">附加的条件</param>
	 * <param name="nodeassociation">需要更新的Nodeassociation</param>
	 */
	public int nodeassociationUpdateSelectiveByCondition(Nodeassociation nodeassociation, NodeassociationExample nodeassociationQueryCondition) throws CacheException {
		int ret = this.getDao().nodeassociationUpdateSelectiveByCondition(nodeassociation, nodeassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NODEASSOCIATION")) {
				this.getCache().clear("NODEASSOCIATION");
			}
		}
		String kvalue = this.getNodeassociationExampleConditionSql(nodeassociationQueryCondition);
		this.operatesLogSimpleAdd("NODEASSOCIATION", "批量部分更新", "conditionSql", kvalue, nodeassociation, ret);
		return ret;
	}
	
	public String getNodeassociationExampleConditionSql(NodeassociationExample nodeassociationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < nodeassociationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			NodeassociationExample.Criteria item = nodeassociationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					NodeassociationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="nodeassociation">从数据库中查询一个对象Nodeassociation</param>
	 * <param name="ANodeassociationKey"> 主键类</param>
	 */
	public Nodeassociation nodeassociationSelectByPrimaryKey(NodeassociationKey ANodeassociationKey) throws CacheException {
		if (this.needCache("NODEASSOCIATION")) {
			String key = ("NODEASSOCIATION_" + "_BYUNIINDEX_");
			Nodeassociation obj = ((Nodeassociation)(this.getCache().get("NODEASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().nodeassociationSelectByPrimaryKey(ANodeassociationKey);
				if ((obj != null)) {
					this.getCache().put("NODEASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().nodeassociationSelectByPrimaryKey(ANodeassociationKey);
		}
	}
	
	/**
	 * <param name="nodeassociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Nodeassociation> nodeassociationSelectObjects(NodeassociationExample nodeassociationQueryCondition) throws CacheException {
		if (this.needCache("NODEASSOCIATION")) {
			String key = ("NODEASSOCIATION_" 
						+ ("queryObject_" + this.getNodeassociationExampleConditionSql(nodeassociationQueryCondition)));
			List<Nodeassociation> obj = ((List<Nodeassociation>)(this.getCache().get("NODEASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().nodeassociationSelectObjects(nodeassociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NODEASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().nodeassociationSelectObjects(nodeassociationQueryCondition);
		}
	}
	
	/**
	 * <param name="nodeassociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int nodeassociationQuerySelectObjectsCount(NodeassociationExample nodeassociationQueryCondition) throws CacheException {
		if (this.needCache("NODEASSOCIATION")) {
			String key = ("NODEASSOCIATION_" 
						+ ("queryCount_" + this.getNodeassociationExampleConditionSql(nodeassociationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("NODEASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().nodeassociationQuerySelectObjectsCount(nodeassociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NODEASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().nodeassociationQuerySelectObjectsCount(nodeassociationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Notification到数据库中
	 * <param name="notification">需要插入的新对象</param>
	 */
	public int notificationInsert(Notification notification) throws CacheException {
		int ret = this.getDao().notificationInsert(notification);
		if (this.needCache("NOTIFICATION")) {
			this.getCache().clear("NOTIFICATION");
		}
		String kvalue = "";
		kvalue = (kvalue + notification.getId());
		this.operatesLogSimpleAdd("NOTIFICATION", "插入", "ID", kvalue, notification, ret);
		return ret;
	}
	
	/**
	 * <param name="notification">从数据库中删除一个对象Notification</param>
	 * <param name="AId"></param>
	 */
	public int notificationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().notificationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATION")) {
				this.getCache().clear("NOTIFICATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("NOTIFICATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="notification">从数据库中删除一个对象Notification</param>
	 */
	public int notificationDeleteByCondition(NotificationExample notificationQueryCondition) throws CacheException {
		int ret = this.getDao().notificationDeleteByCondition(notificationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATION")) {
				this.getCache().clear("NOTIFICATION");
			}
		}
		String kvalue = this.getNotificationExampleConditionSql(notificationQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATION", "条件删除", "conditionSql", kvalue, notificationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Notification到数据库中
	 * <param name="notification">需要更新的Notification</param>
	 */
	public int notificationUpdate(Notification notification) throws CacheException {
		int ret = this.getDao().notificationUpdate(notification);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATION")) {
				this.getCache().clear("NOTIFICATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notification.getId());
		this.operatesLogSimpleAdd("NOTIFICATION", "更新", "ID", kvalue, notification, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Notification到数据库中
	 * <param name="notification">需要更新的Notification</param>
	 */
	public int notificationUpdateSelective(Notification notification) throws CacheException {
		int ret = this.getDao().notificationUpdateSelective(notification);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATION")) {
				this.getCache().clear("NOTIFICATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notification.getId());
		this.operatesLogSimpleAdd("NOTIFICATION", "部分更新", "ID", kvalue, notification, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Notification到数据库中
	 * <param name="notificationQueryCondition">附加的条件</param>
	 * <param name="notification">需要更新的Notification</param>
	 */
	public int notificationUpdateByCondition(Notification notification, NotificationExample notificationQueryCondition) throws CacheException {
		int ret = this.getDao().notificationUpdateByCondition(notification, notificationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATION")) {
				this.getCache().clear("NOTIFICATION");
			}
		}
		String kvalue = this.getNotificationExampleConditionSql(notificationQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATION", "条件更新", "conditionSql", kvalue, notification, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Notification到数据库中
	 * <param name="notificationQueryCondition">附加的条件</param>
	 * <param name="notification">需要更新的Notification</param>
	 */
	public int notificationUpdateSelectiveByCondition(Notification notification, NotificationExample notificationQueryCondition) throws CacheException {
		int ret = this.getDao().notificationUpdateSelectiveByCondition(notification, notificationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATION")) {
				this.getCache().clear("NOTIFICATION");
			}
		}
		String kvalue = this.getNotificationExampleConditionSql(notificationQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATION", "批量部分更新", "conditionSql", kvalue, notification, ret);
		return ret;
	}
	
	public String getNotificationExampleConditionSql(NotificationExample notificationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < notificationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			NotificationExample.Criteria item = notificationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					NotificationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="notification">从数据库中查询一个对象Notification</param>
	 * <param name="AId"></param>
	 */
	public Notification notificationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("NOTIFICATION")) {
			String key = ("NOTIFICATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Notification obj = ((Notification)(this.getCache().get("NOTIFICATION", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="notificationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Notification> notificationSelectObjects(NotificationExample notificationQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATION")) {
			String key = ("NOTIFICATION_" 
						+ ("queryObject_" + this.getNotificationExampleConditionSql(notificationQueryCondition)));
			List<Notification> obj = ((List<Notification>)(this.getCache().get("NOTIFICATION", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationSelectObjects(notificationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationSelectObjects(notificationQueryCondition);
		}
	}
	
	/**
	 * <param name="notificationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int notificationQuerySelectObjectsCount(NotificationExample notificationQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATION")) {
			String key = ("NOTIFICATION_" 
						+ ("queryCount_" + this.getNotificationExampleConditionSql(notificationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("NOTIFICATION", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationQuerySelectObjectsCount(notificationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationQuerySelectObjectsCount(notificationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Notificationinstance到数据库中
	 * <param name="notificationinstance">需要插入的新对象</param>
	 */
	public int notificationinstanceInsert(Notificationinstance notificationinstance) throws CacheException {
		int ret = this.getDao().notificationinstanceInsert(notificationinstance);
		if (this.needCache("NOTIFICATIONINSTANCE")) {
			this.getCache().clear("NOTIFICATIONINSTANCE");
		}
		String kvalue = "";
		kvalue = (kvalue + notificationinstance.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "插入", "ID", kvalue, notificationinstance, ret);
		return ret;
	}
	
	/**
	 * <param name="notificationinstance">从数据库中删除一个对象Notificationinstance</param>
	 * <param name="AId"></param>
	 */
	public int notificationinstanceDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().notificationinstanceDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONINSTANCE")) {
				this.getCache().clear("NOTIFICATIONINSTANCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="notificationinstance">从数据库中删除一个对象Notificationinstance</param>
	 */
	public int notificationinstanceDeleteByCondition(NotificationinstanceExample notificationinstanceQueryCondition) throws CacheException {
		int ret = this.getDao().notificationinstanceDeleteByCondition(notificationinstanceQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONINSTANCE")) {
				this.getCache().clear("NOTIFICATIONINSTANCE");
			}
		}
		String kvalue = this.getNotificationinstanceExampleConditionSql(notificationinstanceQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "条件删除", "conditionSql", kvalue, notificationinstanceQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Notificationinstance到数据库中
	 * <param name="notificationinstance">需要更新的Notificationinstance</param>
	 */
	public int notificationinstanceUpdate(Notificationinstance notificationinstance) throws CacheException {
		int ret = this.getDao().notificationinstanceUpdate(notificationinstance);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONINSTANCE")) {
				this.getCache().clear("NOTIFICATIONINSTANCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notificationinstance.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "更新", "ID", kvalue, notificationinstance, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Notificationinstance到数据库中
	 * <param name="notificationinstance">需要更新的Notificationinstance</param>
	 */
	public int notificationinstanceUpdateSelective(Notificationinstance notificationinstance) throws CacheException {
		int ret = this.getDao().notificationinstanceUpdateSelective(notificationinstance);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONINSTANCE")) {
				this.getCache().clear("NOTIFICATIONINSTANCE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notificationinstance.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "部分更新", "ID", kvalue, notificationinstance, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Notificationinstance到数据库中
	 * <param name="notificationinstanceQueryCondition">附加的条件</param>
	 * <param name="notificationinstance">需要更新的Notificationinstance</param>
	 */
	public int notificationinstanceUpdateByCondition(Notificationinstance notificationinstance, NotificationinstanceExample notificationinstanceQueryCondition) throws CacheException {
		int ret = this.getDao().notificationinstanceUpdateByCondition(notificationinstance, notificationinstanceQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONINSTANCE")) {
				this.getCache().clear("NOTIFICATIONINSTANCE");
			}
		}
		String kvalue = this.getNotificationinstanceExampleConditionSql(notificationinstanceQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "条件更新", "conditionSql", kvalue, notificationinstance, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Notificationinstance到数据库中
	 * <param name="notificationinstanceQueryCondition">附加的条件</param>
	 * <param name="notificationinstance">需要更新的Notificationinstance</param>
	 */
	public int notificationinstanceUpdateSelectiveByCondition(Notificationinstance notificationinstance, NotificationinstanceExample notificationinstanceQueryCondition) throws CacheException {
		int ret = this.getDao().notificationinstanceUpdateSelectiveByCondition(notificationinstance, notificationinstanceQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONINSTANCE")) {
				this.getCache().clear("NOTIFICATIONINSTANCE");
			}
		}
		String kvalue = this.getNotificationinstanceExampleConditionSql(notificationinstanceQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATIONINSTANCE", "批量部分更新", "conditionSql", kvalue, notificationinstance, ret);
		return ret;
	}
	
	public String getNotificationinstanceExampleConditionSql(NotificationinstanceExample notificationinstanceQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < notificationinstanceQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			NotificationinstanceExample.Criteria item = notificationinstanceQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					NotificationinstanceExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="notificationinstance">从数据库中查询一个对象Notificationinstance</param>
	 * <param name="AId"></param>
	 */
	public Notificationinstance notificationinstanceSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("NOTIFICATIONINSTANCE")) {
			String key = ("NOTIFICATIONINSTANCE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Notificationinstance obj = ((Notificationinstance)(this.getCache().get("NOTIFICATIONINSTANCE", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationinstanceSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONINSTANCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationinstanceSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="notificationinstanceQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Notificationinstance> notificationinstanceSelectObjects(NotificationinstanceExample notificationinstanceQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATIONINSTANCE")) {
			String key = ("NOTIFICATIONINSTANCE_" 
						+ ("queryObject_" + this.getNotificationinstanceExampleConditionSql(notificationinstanceQueryCondition)));
			List<Notificationinstance> obj = ((List<Notificationinstance>)(this.getCache().get("NOTIFICATIONINSTANCE", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationinstanceSelectObjects(notificationinstanceQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONINSTANCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationinstanceSelectObjects(notificationinstanceQueryCondition);
		}
	}
	
	/**
	 * <param name="notificationinstanceQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int notificationinstanceQuerySelectObjectsCount(NotificationinstanceExample notificationinstanceQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATIONINSTANCE")) {
			String key = ("NOTIFICATIONINSTANCE_" 
						+ ("queryCount_" + this.getNotificationinstanceExampleConditionSql(notificationinstanceQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("NOTIFICATIONINSTANCE", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationinstanceQuerySelectObjectsCount(notificationinstanceQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONINSTANCE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationinstanceQuerySelectObjectsCount(notificationinstanceQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Notificationscheme到数据库中
	 * <param name="notificationscheme">需要插入的新对象</param>
	 */
	public int notificationschemeInsert(Notificationscheme notificationscheme) throws CacheException {
		int ret = this.getDao().notificationschemeInsert(notificationscheme);
		if (this.needCache("NOTIFICATIONSCHEME")) {
			this.getCache().clear("NOTIFICATIONSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + notificationscheme.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "插入", "ID", kvalue, notificationscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="notificationscheme">从数据库中删除一个对象Notificationscheme</param>
	 * <param name="AId"></param>
	 */
	public int notificationschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().notificationschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="notificationscheme">从数据库中删除一个对象Notificationscheme</param>
	 */
	public int notificationschemeDeleteByCondition(NotificationschemeExample notificationschemeQueryCondition) throws CacheException {
		int ret = this.getDao().notificationschemeDeleteByCondition(notificationschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = this.getNotificationschemeExampleConditionSql(notificationschemeQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "条件删除", "conditionSql", kvalue, notificationschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Notificationscheme到数据库中
	 * <param name="notificationscheme">需要更新的Notificationscheme</param>
	 */
	public int notificationschemeUpdate(Notificationscheme notificationscheme) throws CacheException {
		int ret = this.getDao().notificationschemeUpdate(notificationscheme);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notificationscheme.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "更新", "ID", kvalue, notificationscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Notificationscheme到数据库中
	 * <param name="notificationscheme">需要更新的Notificationscheme</param>
	 */
	public int notificationschemeUpdateSelective(Notificationscheme notificationscheme) throws CacheException {
		int ret = this.getDao().notificationschemeUpdateSelective(notificationscheme);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notificationscheme.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "部分更新", "ID", kvalue, notificationscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Notificationscheme到数据库中
	 * <param name="notificationscheme">需要更新的Notificationscheme</param>
	 */
	public int notificationschemeUpdateWithBlobs(Notificationscheme notificationscheme) throws CacheException {
		int ret = this.getDao().notificationschemeUpdateWithBlobs(notificationscheme);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + notificationscheme.getId());
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "更新含Blob", "ID", kvalue, notificationscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Notificationscheme到数据库中
	 * <param name="notificationschemeQueryCondition">附加的条件</param>
	 * <param name="notificationscheme">需要更新的Notificationscheme</param>
	 */
	public int notificationschemeUpdateByCondition(Notificationscheme notificationscheme, NotificationschemeExample notificationschemeQueryCondition) throws CacheException {
		int ret = this.getDao().notificationschemeUpdateByCondition(notificationscheme, notificationschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = this.getNotificationschemeExampleConditionSql(notificationschemeQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "条件更新", "conditionSql", kvalue, notificationscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Notificationscheme到数据库中
	 * <param name="notificationschemeQueryCondition">附加的条件</param>
	 * <param name="notificationscheme">需要更新的Notificationscheme</param>
	 */
	public int notificationschemeUpdateSelectiveByCondition(Notificationscheme notificationscheme, NotificationschemeExample notificationschemeQueryCondition) throws CacheException {
		int ret = this.getDao().notificationschemeUpdateSelectiveByCondition(notificationscheme, notificationschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("NOTIFICATIONSCHEME")) {
				this.getCache().clear("NOTIFICATIONSCHEME");
			}
		}
		String kvalue = this.getNotificationschemeExampleConditionSql(notificationschemeQueryCondition);
		this.operatesLogSimpleAdd("NOTIFICATIONSCHEME", "批量部分更新", "conditionSql", kvalue, notificationscheme, ret);
		return ret;
	}
	
	public String getNotificationschemeExampleConditionSql(NotificationschemeExample notificationschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < notificationschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			NotificationschemeExample.Criteria item = notificationschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					NotificationschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="notificationscheme">从数据库中查询一个对象Notificationscheme</param>
	 * <param name="AId"></param>
	 */
	public Notificationscheme notificationschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("NOTIFICATIONSCHEME")) {
			String key = ("NOTIFICATIONSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Notificationscheme obj = ((Notificationscheme)(this.getCache().get("NOTIFICATIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="notificationschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Notificationscheme> notificationschemeSelectObjects(NotificationschemeExample notificationschemeQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATIONSCHEME")) {
			String key = ("NOTIFICATIONSCHEME_" 
						+ ("queryObject_" + this.getNotificationschemeExampleConditionSql(notificationschemeQueryCondition)));
			List<Notificationscheme> obj = ((List<Notificationscheme>)(this.getCache().get("NOTIFICATIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationschemeSelectObjects(notificationschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationschemeSelectObjects(notificationschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="notificationschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Notificationscheme> notificationschemeSelectObjectsWithBLOBs(NotificationschemeExample notificationschemeQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATIONSCHEME")) {
			String key = ("NOTIFICATIONSCHEME_" 
						+ ("queryObject_" + this.getNotificationschemeExampleConditionSql(notificationschemeQueryCondition)));
			List<Notificationscheme> obj = ((List<Notificationscheme>)(this.getCache().get("NOTIFICATIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationschemeSelectObjectsWithBLOBs(notificationschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationschemeSelectObjectsWithBLOBs(notificationschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="notificationschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int notificationschemeQuerySelectObjectsCount(NotificationschemeExample notificationschemeQueryCondition) throws CacheException {
		if (this.needCache("NOTIFICATIONSCHEME")) {
			String key = ("NOTIFICATIONSCHEME_" 
						+ ("queryCount_" + this.getNotificationschemeExampleConditionSql(notificationschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("NOTIFICATIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().notificationschemeQuerySelectObjectsCount(notificationschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("NOTIFICATIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().notificationschemeQuerySelectObjectsCount(notificationschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Oauthconsumer到数据库中
	 * <param name="oauthconsumer">需要插入的新对象</param>
	 */
	public int oauthconsumerInsert(OauthconsumerWithBLOBs oauthconsumer) throws CacheException {
		int ret = this.getDao().oauthconsumerInsert(oauthconsumer);
		if (this.needCache("OAUTHCONSUMER")) {
			this.getCache().clear("OAUTHCONSUMER");
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "插入", "ID", kvalue, oauthconsumer, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthconsumer">从数据库中删除一个对象Oauthconsumer</param>
	 * <param name="AId"></param>
	 */
	public int oauthconsumerDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().oauthconsumerDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthconsumer">从数据库中删除一个对象Oauthconsumer</param>
	 */
	public int oauthconsumerDeleteByCondition(OauthconsumerExample oauthconsumerQueryCondition) throws CacheException {
		int ret = this.getDao().oauthconsumerDeleteByCondition(oauthconsumerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = this.getOauthconsumerExampleConditionSql(oauthconsumerQueryCondition);
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "条件删除", "conditionSql", kvalue, oauthconsumerQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Oauthconsumer到数据库中
	 * <param name="oauthconsumer">需要更新的Oauthconsumer</param>
	 */
	public int oauthconsumerUpdate(OauthconsumerWithBLOBs oauthconsumer) throws CacheException {
		int ret = this.getDao().oauthconsumerUpdate(oauthconsumer);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "更新", "ID", kvalue, oauthconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Oauthconsumer到数据库中
	 * <param name="oauthconsumer">需要更新的Oauthconsumer</param>
	 */
	public int oauthconsumerUpdateSelective(OauthconsumerWithBLOBs oauthconsumer) throws CacheException {
		int ret = this.getDao().oauthconsumerUpdateSelective(oauthconsumer);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "部分更新", "ID", kvalue, oauthconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Oauthconsumer到数据库中
	 * <param name="oauthconsumer">需要更新的Oauthconsumer</param>
	 */
	public int oauthconsumerUpdateWithBlobs(OauthconsumerWithBLOBs oauthconsumer) throws CacheException {
		int ret = this.getDao().oauthconsumerUpdateWithBlobs(oauthconsumer);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "更新含Blob", "ID", kvalue, oauthconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthconsumer到数据库中
	 * <param name="oauthconsumerQueryCondition">附加的条件</param>
	 * <param name="oauthconsumer">需要更新的Oauthconsumer</param>
	 */
	public int oauthconsumerUpdateByCondition(OauthconsumerWithBLOBs oauthconsumer, OauthconsumerExample oauthconsumerQueryCondition) throws CacheException {
		int ret = this.getDao().oauthconsumerUpdateByCondition(oauthconsumer, oauthconsumerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = this.getOauthconsumerExampleConditionSql(oauthconsumerQueryCondition);
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "条件更新", "conditionSql", kvalue, oauthconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthconsumer到数据库中
	 * <param name="oauthconsumerQueryCondition">附加的条件</param>
	 * <param name="oauthconsumer">需要更新的Oauthconsumer</param>
	 */
	public int oauthconsumerUpdateSelectiveByCondition(OauthconsumerWithBLOBs oauthconsumer, OauthconsumerExample oauthconsumerQueryCondition) throws CacheException {
		int ret = this.getDao().oauthconsumerUpdateSelectiveByCondition(oauthconsumer, oauthconsumerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMER")) {
				this.getCache().clear("OAUTHCONSUMER");
			}
		}
		String kvalue = this.getOauthconsumerExampleConditionSql(oauthconsumerQueryCondition);
		this.operatesLogSimpleAdd("OAUTHCONSUMER", "批量部分更新", "conditionSql", kvalue, oauthconsumer, ret);
		return ret;
	}
	
	public String getOauthconsumerExampleConditionSql(OauthconsumerExample oauthconsumerQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < oauthconsumerQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OauthconsumerExample.Criteria item = oauthconsumerQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OauthconsumerExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="oauthconsumer">从数据库中查询一个对象Oauthconsumer</param>
	 * <param name="AId"></param>
	 */
	public Oauthconsumer oauthconsumerSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OAUTHCONSUMER")) {
			String key = ("OAUTHCONSUMER_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Oauthconsumer obj = ((Oauthconsumer)(this.getCache().get("OAUTHCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumerSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumerSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="oauthconsumerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Oauthconsumer> oauthconsumerSelectObjects(OauthconsumerExample oauthconsumerQueryCondition) throws CacheException {
		if (this.needCache("OAUTHCONSUMER")) {
			String key = ("OAUTHCONSUMER_" 
						+ ("queryObject_" + this.getOauthconsumerExampleConditionSql(oauthconsumerQueryCondition)));
			List<Oauthconsumer> obj = ((List<Oauthconsumer>)(this.getCache().get("OAUTHCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumerSelectObjects(oauthconsumerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumerSelectObjects(oauthconsumerQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthconsumerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OauthconsumerWithBLOBs> oauthconsumerSelectObjectsWithBLOBs(OauthconsumerExample oauthconsumerQueryCondition) throws CacheException {
		if (this.needCache("OAUTHCONSUMER")) {
			String key = ("OAUTHCONSUMER_" 
						+ ("queryObject_" + this.getOauthconsumerExampleConditionSql(oauthconsumerQueryCondition)));
			List<OauthconsumerWithBLOBs> obj = ((List<OauthconsumerWithBLOBs>)(this.getCache().get("OAUTHCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumerSelectObjectsWithBLOBs(oauthconsumerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumerSelectObjectsWithBLOBs(oauthconsumerQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthconsumerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int oauthconsumerQuerySelectObjectsCount(OauthconsumerExample oauthconsumerQueryCondition) throws CacheException {
		if (this.needCache("OAUTHCONSUMER")) {
			String key = ("OAUTHCONSUMER_" 
						+ ("queryCount_" + this.getOauthconsumerExampleConditionSql(oauthconsumerQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OAUTHCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumerQuerySelectObjectsCount(oauthconsumerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumerQuerySelectObjectsCount(oauthconsumerQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Oauthconsumertoken到数据库中
	 * <param name="oauthconsumertoken">需要插入的新对象</param>
	 */
	public int oauthconsumertokenInsert(Oauthconsumertoken oauthconsumertoken) throws CacheException {
		int ret = this.getDao().oauthconsumertokenInsert(oauthconsumertoken);
		if (this.needCache("OAUTHCONSUMERTOKEN")) {
			this.getCache().clear("OAUTHCONSUMERTOKEN");
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumertoken.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "插入", "ID", kvalue, oauthconsumertoken, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthconsumertoken">从数据库中删除一个对象Oauthconsumertoken</param>
	 * <param name="AId"></param>
	 */
	public int oauthconsumertokenDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().oauthconsumertokenDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMERTOKEN")) {
				this.getCache().clear("OAUTHCONSUMERTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthconsumertoken">从数据库中删除一个对象Oauthconsumertoken</param>
	 */
	public int oauthconsumertokenDeleteByCondition(OauthconsumertokenExample oauthconsumertokenQueryCondition) throws CacheException {
		int ret = this.getDao().oauthconsumertokenDeleteByCondition(oauthconsumertokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMERTOKEN")) {
				this.getCache().clear("OAUTHCONSUMERTOKEN");
			}
		}
		String kvalue = this.getOauthconsumertokenExampleConditionSql(oauthconsumertokenQueryCondition);
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "条件删除", "conditionSql", kvalue, oauthconsumertokenQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Oauthconsumertoken到数据库中
	 * <param name="oauthconsumertoken">需要更新的Oauthconsumertoken</param>
	 */
	public int oauthconsumertokenUpdate(Oauthconsumertoken oauthconsumertoken) throws CacheException {
		int ret = this.getDao().oauthconsumertokenUpdate(oauthconsumertoken);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMERTOKEN")) {
				this.getCache().clear("OAUTHCONSUMERTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumertoken.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "更新", "ID", kvalue, oauthconsumertoken, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Oauthconsumertoken到数据库中
	 * <param name="oauthconsumertoken">需要更新的Oauthconsumertoken</param>
	 */
	public int oauthconsumertokenUpdateSelective(Oauthconsumertoken oauthconsumertoken) throws CacheException {
		int ret = this.getDao().oauthconsumertokenUpdateSelective(oauthconsumertoken);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMERTOKEN")) {
				this.getCache().clear("OAUTHCONSUMERTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthconsumertoken.getId());
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "部分更新", "ID", kvalue, oauthconsumertoken, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthconsumertoken到数据库中
	 * <param name="oauthconsumertokenQueryCondition">附加的条件</param>
	 * <param name="oauthconsumertoken">需要更新的Oauthconsumertoken</param>
	 */
	public int oauthconsumertokenUpdateByCondition(Oauthconsumertoken oauthconsumertoken, OauthconsumertokenExample oauthconsumertokenQueryCondition) throws CacheException {
		int ret = this.getDao().oauthconsumertokenUpdateByCondition(oauthconsumertoken, oauthconsumertokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMERTOKEN")) {
				this.getCache().clear("OAUTHCONSUMERTOKEN");
			}
		}
		String kvalue = this.getOauthconsumertokenExampleConditionSql(oauthconsumertokenQueryCondition);
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "条件更新", "conditionSql", kvalue, oauthconsumertoken, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthconsumertoken到数据库中
	 * <param name="oauthconsumertokenQueryCondition">附加的条件</param>
	 * <param name="oauthconsumertoken">需要更新的Oauthconsumertoken</param>
	 */
	public int oauthconsumertokenUpdateSelectiveByCondition(Oauthconsumertoken oauthconsumertoken, OauthconsumertokenExample oauthconsumertokenQueryCondition) throws CacheException {
		int ret = this.getDao().oauthconsumertokenUpdateSelectiveByCondition(oauthconsumertoken, oauthconsumertokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHCONSUMERTOKEN")) {
				this.getCache().clear("OAUTHCONSUMERTOKEN");
			}
		}
		String kvalue = this.getOauthconsumertokenExampleConditionSql(oauthconsumertokenQueryCondition);
		this.operatesLogSimpleAdd("OAUTHCONSUMERTOKEN", "批量部分更新", "conditionSql", kvalue, oauthconsumertoken, ret);
		return ret;
	}
	
	public String getOauthconsumertokenExampleConditionSql(OauthconsumertokenExample oauthconsumertokenQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < oauthconsumertokenQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OauthconsumertokenExample.Criteria item = oauthconsumertokenQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OauthconsumertokenExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="oauthconsumertoken">从数据库中查询一个对象Oauthconsumertoken</param>
	 * <param name="AId"></param>
	 */
	public Oauthconsumertoken oauthconsumertokenSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OAUTHCONSUMERTOKEN")) {
			String key = ("OAUTHCONSUMERTOKEN_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Oauthconsumertoken obj = ((Oauthconsumertoken)(this.getCache().get("OAUTHCONSUMERTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumertokenSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMERTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumertokenSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="oauthconsumertokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Oauthconsumertoken> oauthconsumertokenSelectObjects(OauthconsumertokenExample oauthconsumertokenQueryCondition) throws CacheException {
		if (this.needCache("OAUTHCONSUMERTOKEN")) {
			String key = ("OAUTHCONSUMERTOKEN_" 
						+ ("queryObject_" + this.getOauthconsumertokenExampleConditionSql(oauthconsumertokenQueryCondition)));
			List<Oauthconsumertoken> obj = ((List<Oauthconsumertoken>)(this.getCache().get("OAUTHCONSUMERTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumertokenSelectObjects(oauthconsumertokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMERTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumertokenSelectObjects(oauthconsumertokenQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthconsumertokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int oauthconsumertokenQuerySelectObjectsCount(OauthconsumertokenExample oauthconsumertokenQueryCondition) throws CacheException {
		if (this.needCache("OAUTHCONSUMERTOKEN")) {
			String key = ("OAUTHCONSUMERTOKEN_" 
						+ ("queryCount_" + this.getOauthconsumertokenExampleConditionSql(oauthconsumertokenQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OAUTHCONSUMERTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthconsumertokenQuerySelectObjectsCount(oauthconsumertokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHCONSUMERTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthconsumertokenQuerySelectObjectsCount(oauthconsumertokenQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Oauthspconsumer到数据库中
	 * <param name="oauthspconsumer">需要插入的新对象</param>
	 */
	public int oauthspconsumerInsert(OauthspconsumerWithBLOBs oauthspconsumer) throws CacheException {
		int ret = this.getDao().oauthspconsumerInsert(oauthspconsumer);
		if (this.needCache("OAUTHSPCONSUMER")) {
			this.getCache().clear("OAUTHSPCONSUMER");
		}
		String kvalue = "";
		kvalue = (kvalue + oauthspconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "插入", "ID", kvalue, oauthspconsumer, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthspconsumer">从数据库中删除一个对象Oauthspconsumer</param>
	 * <param name="AId"></param>
	 */
	public int oauthspconsumerDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().oauthspconsumerDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthspconsumer">从数据库中删除一个对象Oauthspconsumer</param>
	 */
	public int oauthspconsumerDeleteByCondition(OauthspconsumerExample oauthspconsumerQueryCondition) throws CacheException {
		int ret = this.getDao().oauthspconsumerDeleteByCondition(oauthspconsumerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = this.getOauthspconsumerExampleConditionSql(oauthspconsumerQueryCondition);
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "条件删除", "conditionSql", kvalue, oauthspconsumerQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Oauthspconsumer到数据库中
	 * <param name="oauthspconsumer">需要更新的Oauthspconsumer</param>
	 */
	public int oauthspconsumerUpdate(OauthspconsumerWithBLOBs oauthspconsumer) throws CacheException {
		int ret = this.getDao().oauthspconsumerUpdate(oauthspconsumer);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthspconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "更新", "ID", kvalue, oauthspconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Oauthspconsumer到数据库中
	 * <param name="oauthspconsumer">需要更新的Oauthspconsumer</param>
	 */
	public int oauthspconsumerUpdateSelective(OauthspconsumerWithBLOBs oauthspconsumer) throws CacheException {
		int ret = this.getDao().oauthspconsumerUpdateSelective(oauthspconsumer);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthspconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "部分更新", "ID", kvalue, oauthspconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Oauthspconsumer到数据库中
	 * <param name="oauthspconsumer">需要更新的Oauthspconsumer</param>
	 */
	public int oauthspconsumerUpdateWithBlobs(OauthspconsumerWithBLOBs oauthspconsumer) throws CacheException {
		int ret = this.getDao().oauthspconsumerUpdateWithBlobs(oauthspconsumer);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthspconsumer.getId());
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "更新含Blob", "ID", kvalue, oauthspconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthspconsumer到数据库中
	 * <param name="oauthspconsumerQueryCondition">附加的条件</param>
	 * <param name="oauthspconsumer">需要更新的Oauthspconsumer</param>
	 */
	public int oauthspconsumerUpdateByCondition(OauthspconsumerWithBLOBs oauthspconsumer, OauthspconsumerExample oauthspconsumerQueryCondition) throws CacheException {
		int ret = this.getDao().oauthspconsumerUpdateByCondition(oauthspconsumer, oauthspconsumerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = this.getOauthspconsumerExampleConditionSql(oauthspconsumerQueryCondition);
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "条件更新", "conditionSql", kvalue, oauthspconsumer, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthspconsumer到数据库中
	 * <param name="oauthspconsumerQueryCondition">附加的条件</param>
	 * <param name="oauthspconsumer">需要更新的Oauthspconsumer</param>
	 */
	public int oauthspconsumerUpdateSelectiveByCondition(OauthspconsumerWithBLOBs oauthspconsumer, OauthspconsumerExample oauthspconsumerQueryCondition) throws CacheException {
		int ret = this.getDao().oauthspconsumerUpdateSelectiveByCondition(oauthspconsumer, oauthspconsumerQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPCONSUMER")) {
				this.getCache().clear("OAUTHSPCONSUMER");
			}
		}
		String kvalue = this.getOauthspconsumerExampleConditionSql(oauthspconsumerQueryCondition);
		this.operatesLogSimpleAdd("OAUTHSPCONSUMER", "批量部分更新", "conditionSql", kvalue, oauthspconsumer, ret);
		return ret;
	}
	
	public String getOauthspconsumerExampleConditionSql(OauthspconsumerExample oauthspconsumerQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < oauthspconsumerQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OauthspconsumerExample.Criteria item = oauthspconsumerQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OauthspconsumerExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="oauthspconsumer">从数据库中查询一个对象Oauthspconsumer</param>
	 * <param name="AId"></param>
	 */
	public Oauthspconsumer oauthspconsumerSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OAUTHSPCONSUMER")) {
			String key = ("OAUTHSPCONSUMER_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Oauthspconsumer obj = ((Oauthspconsumer)(this.getCache().get("OAUTHSPCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthspconsumerSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthspconsumerSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="oauthspconsumerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Oauthspconsumer> oauthspconsumerSelectObjects(OauthspconsumerExample oauthspconsumerQueryCondition) throws CacheException {
		if (this.needCache("OAUTHSPCONSUMER")) {
			String key = ("OAUTHSPCONSUMER_" 
						+ ("queryObject_" + this.getOauthspconsumerExampleConditionSql(oauthspconsumerQueryCondition)));
			List<Oauthspconsumer> obj = ((List<Oauthspconsumer>)(this.getCache().get("OAUTHSPCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthspconsumerSelectObjects(oauthspconsumerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthspconsumerSelectObjects(oauthspconsumerQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthspconsumerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OauthspconsumerWithBLOBs> oauthspconsumerSelectObjectsWithBLOBs(OauthspconsumerExample oauthspconsumerQueryCondition) throws CacheException {
		if (this.needCache("OAUTHSPCONSUMER")) {
			String key = ("OAUTHSPCONSUMER_" 
						+ ("queryObject_" + this.getOauthspconsumerExampleConditionSql(oauthspconsumerQueryCondition)));
			List<OauthspconsumerWithBLOBs> obj = ((List<OauthspconsumerWithBLOBs>)(this.getCache().get("OAUTHSPCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthspconsumerSelectObjectsWithBLOBs(oauthspconsumerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthspconsumerSelectObjectsWithBLOBs(oauthspconsumerQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthspconsumerQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int oauthspconsumerQuerySelectObjectsCount(OauthspconsumerExample oauthspconsumerQueryCondition) throws CacheException {
		if (this.needCache("OAUTHSPCONSUMER")) {
			String key = ("OAUTHSPCONSUMER_" 
						+ ("queryCount_" + this.getOauthspconsumerExampleConditionSql(oauthspconsumerQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OAUTHSPCONSUMER", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthspconsumerQuerySelectObjectsCount(oauthspconsumerQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPCONSUMER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthspconsumerQuerySelectObjectsCount(oauthspconsumerQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Oauthsptoken到数据库中
	 * <param name="oauthsptoken">需要插入的新对象</param>
	 */
	public int oauthsptokenInsert(Oauthsptoken oauthsptoken) throws CacheException {
		int ret = this.getDao().oauthsptokenInsert(oauthsptoken);
		if (this.needCache("OAUTHSPTOKEN")) {
			this.getCache().clear("OAUTHSPTOKEN");
		}
		String kvalue = "";
		kvalue = (kvalue + oauthsptoken.getId());
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "插入", "ID", kvalue, oauthsptoken, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthsptoken">从数据库中删除一个对象Oauthsptoken</param>
	 * <param name="AId"></param>
	 */
	public int oauthsptokenDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().oauthsptokenDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="oauthsptoken">从数据库中删除一个对象Oauthsptoken</param>
	 */
	public int oauthsptokenDeleteByCondition(OauthsptokenExample oauthsptokenQueryCondition) throws CacheException {
		int ret = this.getDao().oauthsptokenDeleteByCondition(oauthsptokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = this.getOauthsptokenExampleConditionSql(oauthsptokenQueryCondition);
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "条件删除", "conditionSql", kvalue, oauthsptokenQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Oauthsptoken到数据库中
	 * <param name="oauthsptoken">需要更新的Oauthsptoken</param>
	 */
	public int oauthsptokenUpdate(Oauthsptoken oauthsptoken) throws CacheException {
		int ret = this.getDao().oauthsptokenUpdate(oauthsptoken);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthsptoken.getId());
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "更新", "ID", kvalue, oauthsptoken, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Oauthsptoken到数据库中
	 * <param name="oauthsptoken">需要更新的Oauthsptoken</param>
	 */
	public int oauthsptokenUpdateSelective(Oauthsptoken oauthsptoken) throws CacheException {
		int ret = this.getDao().oauthsptokenUpdateSelective(oauthsptoken);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthsptoken.getId());
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "部分更新", "ID", kvalue, oauthsptoken, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Oauthsptoken到数据库中
	 * <param name="oauthsptoken">需要更新的Oauthsptoken</param>
	 */
	public int oauthsptokenUpdateWithBlobs(Oauthsptoken oauthsptoken) throws CacheException {
		int ret = this.getDao().oauthsptokenUpdateWithBlobs(oauthsptoken);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + oauthsptoken.getId());
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "更新含Blob", "ID", kvalue, oauthsptoken, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthsptoken到数据库中
	 * <param name="oauthsptokenQueryCondition">附加的条件</param>
	 * <param name="oauthsptoken">需要更新的Oauthsptoken</param>
	 */
	public int oauthsptokenUpdateByCondition(Oauthsptoken oauthsptoken, OauthsptokenExample oauthsptokenQueryCondition) throws CacheException {
		int ret = this.getDao().oauthsptokenUpdateByCondition(oauthsptoken, oauthsptokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = this.getOauthsptokenExampleConditionSql(oauthsptokenQueryCondition);
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "条件更新", "conditionSql", kvalue, oauthsptoken, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Oauthsptoken到数据库中
	 * <param name="oauthsptokenQueryCondition">附加的条件</param>
	 * <param name="oauthsptoken">需要更新的Oauthsptoken</param>
	 */
	public int oauthsptokenUpdateSelectiveByCondition(Oauthsptoken oauthsptoken, OauthsptokenExample oauthsptokenQueryCondition) throws CacheException {
		int ret = this.getDao().oauthsptokenUpdateSelectiveByCondition(oauthsptoken, oauthsptokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OAUTHSPTOKEN")) {
				this.getCache().clear("OAUTHSPTOKEN");
			}
		}
		String kvalue = this.getOauthsptokenExampleConditionSql(oauthsptokenQueryCondition);
		this.operatesLogSimpleAdd("OAUTHSPTOKEN", "批量部分更新", "conditionSql", kvalue, oauthsptoken, ret);
		return ret;
	}
	
	public String getOauthsptokenExampleConditionSql(OauthsptokenExample oauthsptokenQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < oauthsptokenQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OauthsptokenExample.Criteria item = oauthsptokenQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OauthsptokenExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="oauthsptoken">从数据库中查询一个对象Oauthsptoken</param>
	 * <param name="AId"></param>
	 */
	public Oauthsptoken oauthsptokenSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OAUTHSPTOKEN")) {
			String key = ("OAUTHSPTOKEN_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Oauthsptoken obj = ((Oauthsptoken)(this.getCache().get("OAUTHSPTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthsptokenSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthsptokenSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="oauthsptokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Oauthsptoken> oauthsptokenSelectObjects(OauthsptokenExample oauthsptokenQueryCondition) throws CacheException {
		if (this.needCache("OAUTHSPTOKEN")) {
			String key = ("OAUTHSPTOKEN_" 
						+ ("queryObject_" + this.getOauthsptokenExampleConditionSql(oauthsptokenQueryCondition)));
			List<Oauthsptoken> obj = ((List<Oauthsptoken>)(this.getCache().get("OAUTHSPTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthsptokenSelectObjects(oauthsptokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthsptokenSelectObjects(oauthsptokenQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthsptokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Oauthsptoken> oauthsptokenSelectObjectsWithBLOBs(OauthsptokenExample oauthsptokenQueryCondition) throws CacheException {
		if (this.needCache("OAUTHSPTOKEN")) {
			String key = ("OAUTHSPTOKEN_" 
						+ ("queryObject_" + this.getOauthsptokenExampleConditionSql(oauthsptokenQueryCondition)));
			List<Oauthsptoken> obj = ((List<Oauthsptoken>)(this.getCache().get("OAUTHSPTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthsptokenSelectObjectsWithBLOBs(oauthsptokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthsptokenSelectObjectsWithBLOBs(oauthsptokenQueryCondition);
		}
	}
	
	/**
	 * <param name="oauthsptokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int oauthsptokenQuerySelectObjectsCount(OauthsptokenExample oauthsptokenQueryCondition) throws CacheException {
		if (this.needCache("OAUTHSPTOKEN")) {
			String key = ("OAUTHSPTOKEN_" 
						+ ("queryCount_" + this.getOauthsptokenExampleConditionSql(oauthsptokenQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OAUTHSPTOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().oauthsptokenQuerySelectObjectsCount(oauthsptokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OAUTHSPTOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().oauthsptokenQuerySelectObjectsCount(oauthsptokenQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Optionconfiguration到数据库中
	 * <param name="optionconfiguration">需要插入的新对象</param>
	 */
	public int optionconfigurationInsert(Optionconfiguration optionconfiguration) throws CacheException {
		int ret = this.getDao().optionconfigurationInsert(optionconfiguration);
		if (this.needCache("OPTIONCONFIGURATION")) {
			this.getCache().clear("OPTIONCONFIGURATION");
		}
		String kvalue = "";
		kvalue = (kvalue + optionconfiguration.getId());
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "插入", "ID", kvalue, optionconfiguration, ret);
		return ret;
	}
	
	/**
	 * <param name="optionconfiguration">从数据库中删除一个对象Optionconfiguration</param>
	 * <param name="AId"></param>
	 */
	public int optionconfigurationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().optionconfigurationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OPTIONCONFIGURATION")) {
				this.getCache().clear("OPTIONCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="optionconfiguration">从数据库中删除一个对象Optionconfiguration</param>
	 */
	public int optionconfigurationDeleteByCondition(OptionconfigurationExample optionconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().optionconfigurationDeleteByCondition(optionconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OPTIONCONFIGURATION")) {
				this.getCache().clear("OPTIONCONFIGURATION");
			}
		}
		String kvalue = this.getOptionconfigurationExampleConditionSql(optionconfigurationQueryCondition);
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "条件删除", "conditionSql", kvalue, optionconfigurationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Optionconfiguration到数据库中
	 * <param name="optionconfiguration">需要更新的Optionconfiguration</param>
	 */
	public int optionconfigurationUpdate(Optionconfiguration optionconfiguration) throws CacheException {
		int ret = this.getDao().optionconfigurationUpdate(optionconfiguration);
		if ((ret > 0)) {
			if (this.needCache("OPTIONCONFIGURATION")) {
				this.getCache().clear("OPTIONCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + optionconfiguration.getId());
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "更新", "ID", kvalue, optionconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Optionconfiguration到数据库中
	 * <param name="optionconfiguration">需要更新的Optionconfiguration</param>
	 */
	public int optionconfigurationUpdateSelective(Optionconfiguration optionconfiguration) throws CacheException {
		int ret = this.getDao().optionconfigurationUpdateSelective(optionconfiguration);
		if ((ret > 0)) {
			if (this.needCache("OPTIONCONFIGURATION")) {
				this.getCache().clear("OPTIONCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + optionconfiguration.getId());
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "部分更新", "ID", kvalue, optionconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Optionconfiguration到数据库中
	 * <param name="optionconfigurationQueryCondition">附加的条件</param>
	 * <param name="optionconfiguration">需要更新的Optionconfiguration</param>
	 */
	public int optionconfigurationUpdateByCondition(Optionconfiguration optionconfiguration, OptionconfigurationExample optionconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().optionconfigurationUpdateByCondition(optionconfiguration, optionconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OPTIONCONFIGURATION")) {
				this.getCache().clear("OPTIONCONFIGURATION");
			}
		}
		String kvalue = this.getOptionconfigurationExampleConditionSql(optionconfigurationQueryCondition);
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "条件更新", "conditionSql", kvalue, optionconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Optionconfiguration到数据库中
	 * <param name="optionconfigurationQueryCondition">附加的条件</param>
	 * <param name="optionconfiguration">需要更新的Optionconfiguration</param>
	 */
	public int optionconfigurationUpdateSelectiveByCondition(Optionconfiguration optionconfiguration, OptionconfigurationExample optionconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().optionconfigurationUpdateSelectiveByCondition(optionconfiguration, optionconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OPTIONCONFIGURATION")) {
				this.getCache().clear("OPTIONCONFIGURATION");
			}
		}
		String kvalue = this.getOptionconfigurationExampleConditionSql(optionconfigurationQueryCondition);
		this.operatesLogSimpleAdd("OPTIONCONFIGURATION", "批量部分更新", "conditionSql", kvalue, optionconfiguration, ret);
		return ret;
	}
	
	public String getOptionconfigurationExampleConditionSql(OptionconfigurationExample optionconfigurationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < optionconfigurationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OptionconfigurationExample.Criteria item = optionconfigurationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OptionconfigurationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="optionconfiguration">从数据库中查询一个对象Optionconfiguration</param>
	 * <param name="AId"></param>
	 */
	public Optionconfiguration optionconfigurationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OPTIONCONFIGURATION")) {
			String key = ("OPTIONCONFIGURATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Optionconfiguration obj = ((Optionconfiguration)(this.getCache().get("OPTIONCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().optionconfigurationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OPTIONCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().optionconfigurationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="optionconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Optionconfiguration> optionconfigurationSelectObjects(OptionconfigurationExample optionconfigurationQueryCondition) throws CacheException {
		if (this.needCache("OPTIONCONFIGURATION")) {
			String key = ("OPTIONCONFIGURATION_" 
						+ ("queryObject_" + this.getOptionconfigurationExampleConditionSql(optionconfigurationQueryCondition)));
			List<Optionconfiguration> obj = ((List<Optionconfiguration>)(this.getCache().get("OPTIONCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().optionconfigurationSelectObjects(optionconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OPTIONCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().optionconfigurationSelectObjects(optionconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="optionconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int optionconfigurationQuerySelectObjectsCount(OptionconfigurationExample optionconfigurationQueryCondition) throws CacheException {
		if (this.needCache("OPTIONCONFIGURATION")) {
			String key = ("OPTIONCONFIGURATION_" 
						+ ("queryCount_" + this.getOptionconfigurationExampleConditionSql(optionconfigurationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OPTIONCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().optionconfigurationQuerySelectObjectsCount(optionconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OPTIONCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().optionconfigurationQuerySelectObjectsCount(optionconfigurationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象OsCurrentstep到数据库中
	 * <param name="osCurrentstep">需要插入的新对象</param>
	 */
	public int osCurrentstepInsert(OsCurrentstep osCurrentstep) throws CacheException {
		int ret = this.getDao().osCurrentstepInsert(osCurrentstep);
		if (this.needCache("OS_CURRENTSTEP")) {
			this.getCache().clear("OS_CURRENTSTEP");
		}
		String kvalue = "";
		kvalue = (kvalue + osCurrentstep.getId());
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "插入", "ID", kvalue, osCurrentstep, ret);
		return ret;
	}
	
	/**
	 * <param name="osCurrentstep">从数据库中删除一个对象OsCurrentstep</param>
	 * <param name="AId"></param>
	 */
	public int osCurrentstepDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().osCurrentstepDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP")) {
				this.getCache().clear("OS_CURRENTSTEP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="osCurrentstep">从数据库中删除一个对象OsCurrentstep</param>
	 */
	public int osCurrentstepDeleteByCondition(OsCurrentstepExample osCurrentstepQueryCondition) throws CacheException {
		int ret = this.getDao().osCurrentstepDeleteByCondition(osCurrentstepQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP")) {
				this.getCache().clear("OS_CURRENTSTEP");
			}
		}
		String kvalue = this.getOsCurrentstepExampleConditionSql(osCurrentstepQueryCondition);
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "条件删除", "conditionSql", kvalue, osCurrentstepQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象OsCurrentstep到数据库中
	 * <param name="osCurrentstep">需要更新的OsCurrentstep</param>
	 */
	public int osCurrentstepUpdate(OsCurrentstep osCurrentstep) throws CacheException {
		int ret = this.getDao().osCurrentstepUpdate(osCurrentstep);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP")) {
				this.getCache().clear("OS_CURRENTSTEP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + osCurrentstep.getId());
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "更新", "ID", kvalue, osCurrentstep, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性OsCurrentstep到数据库中
	 * <param name="osCurrentstep">需要更新的OsCurrentstep</param>
	 */
	public int osCurrentstepUpdateSelective(OsCurrentstep osCurrentstep) throws CacheException {
		int ret = this.getDao().osCurrentstepUpdateSelective(osCurrentstep);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP")) {
				this.getCache().clear("OS_CURRENTSTEP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + osCurrentstep.getId());
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "部分更新", "ID", kvalue, osCurrentstep, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象OsCurrentstep到数据库中
	 * <param name="osCurrentstepQueryCondition">附加的条件</param>
	 * <param name="osCurrentstep">需要更新的OsCurrentstep</param>
	 */
	public int osCurrentstepUpdateByCondition(OsCurrentstep osCurrentstep, OsCurrentstepExample osCurrentstepQueryCondition) throws CacheException {
		int ret = this.getDao().osCurrentstepUpdateByCondition(osCurrentstep, osCurrentstepQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP")) {
				this.getCache().clear("OS_CURRENTSTEP");
			}
		}
		String kvalue = this.getOsCurrentstepExampleConditionSql(osCurrentstepQueryCondition);
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "条件更新", "conditionSql", kvalue, osCurrentstep, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象OsCurrentstep到数据库中
	 * <param name="osCurrentstepQueryCondition">附加的条件</param>
	 * <param name="osCurrentstep">需要更新的OsCurrentstep</param>
	 */
	public int osCurrentstepUpdateSelectiveByCondition(OsCurrentstep osCurrentstep, OsCurrentstepExample osCurrentstepQueryCondition) throws CacheException {
		int ret = this.getDao().osCurrentstepUpdateSelectiveByCondition(osCurrentstep, osCurrentstepQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP")) {
				this.getCache().clear("OS_CURRENTSTEP");
			}
		}
		String kvalue = this.getOsCurrentstepExampleConditionSql(osCurrentstepQueryCondition);
		this.operatesLogSimpleAdd("OS_CURRENTSTEP", "批量部分更新", "conditionSql", kvalue, osCurrentstep, ret);
		return ret;
	}
	
	public String getOsCurrentstepExampleConditionSql(OsCurrentstepExample osCurrentstepQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < osCurrentstepQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OsCurrentstepExample.Criteria item = osCurrentstepQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OsCurrentstepExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="osCurrentstep">从数据库中查询一个对象OsCurrentstep</param>
	 * <param name="AId"></param>
	 */
	public OsCurrentstep osCurrentstepSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OS_CURRENTSTEP")) {
			String key = ("OS_CURRENTSTEP_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			OsCurrentstep obj = ((OsCurrentstep)(this.getCache().get("OS_CURRENTSTEP", key)));
			if ((obj == null)) {
				obj = this.getDao().osCurrentstepSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OS_CURRENTSTEP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osCurrentstepSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="osCurrentstepQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OsCurrentstep> osCurrentstepSelectObjects(OsCurrentstepExample osCurrentstepQueryCondition) throws CacheException {
		if (this.needCache("OS_CURRENTSTEP")) {
			String key = ("OS_CURRENTSTEP_" 
						+ ("queryObject_" + this.getOsCurrentstepExampleConditionSql(osCurrentstepQueryCondition)));
			List<OsCurrentstep> obj = ((List<OsCurrentstep>)(this.getCache().get("OS_CURRENTSTEP", key)));
			if ((obj == null)) {
				obj = this.getDao().osCurrentstepSelectObjects(osCurrentstepQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_CURRENTSTEP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osCurrentstepSelectObjects(osCurrentstepQueryCondition);
		}
	}
	
	/**
	 * <param name="osCurrentstepQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int osCurrentstepQuerySelectObjectsCount(OsCurrentstepExample osCurrentstepQueryCondition) throws CacheException {
		if (this.needCache("OS_CURRENTSTEP")) {
			String key = ("OS_CURRENTSTEP_" 
						+ ("queryCount_" + this.getOsCurrentstepExampleConditionSql(osCurrentstepQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OS_CURRENTSTEP", key)));
			if ((obj == null)) {
				obj = this.getDao().osCurrentstepQuerySelectObjectsCount(osCurrentstepQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_CURRENTSTEP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osCurrentstepQuerySelectObjectsCount(osCurrentstepQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象OsCurrentstepPrev到数据库中
	 * <param name="osCurrentstepPrev">需要插入的新对象</param>
	 */
	public int osCurrentstepPrevInsert(OsCurrentstepPrevKey osCurrentstepPrev) throws CacheException {
		int ret = this.getDao().osCurrentstepPrevInsert(osCurrentstepPrev);
		if (this.needCache("OS_CURRENTSTEP_PREV")) {
			this.getCache().clear("OS_CURRENTSTEP_PREV");
		}
		String kvalue = "";
		kvalue = (kvalue + osCurrentstepPrev.getId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + osCurrentstepPrev.getPreviousId());
		this.operatesLogSimpleAdd("OS_CURRENTSTEP_PREV", "插入", "ID,PREVIOUS_ID", kvalue, osCurrentstepPrev, ret);
		return ret;
	}
	
	/**
	 * <param name="osCurrentstepPrev">从数据库中删除一个对象OsCurrentstepPrev</param>
	 * <param name="AOsCurrentstepPrevKey"> 主键类</param>
	 */
	public int osCurrentstepPrevDeleteByPrimaryKey(OsCurrentstepPrevKey AOsCurrentstepPrevKey) throws CacheException {
		int ret = this.getDao().osCurrentstepPrevDeleteByPrimaryKey(AOsCurrentstepPrevKey);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP_PREV")) {
				this.getCache().clear("OS_CURRENTSTEP_PREV");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AOsCurrentstepPrevKey.getId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + AOsCurrentstepPrevKey.getPreviousId());
		this.operatesLogSimpleAdd("OS_CURRENTSTEP_PREV", "删除", "ID,PREVIOUS_ID", kvalue, AOsCurrentstepPrevKey, ret);
		return ret;
	}
	
	/**
	 * <param name="osCurrentstepPrev">从数据库中删除一个对象OsCurrentstepPrev</param>
	 */
	public int osCurrentstepPrevDeleteByCondition(OsCurrentstepPrevExample osCurrentstepPrevQueryCondition) throws CacheException {
		int ret = this.getDao().osCurrentstepPrevDeleteByCondition(osCurrentstepPrevQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_CURRENTSTEP_PREV")) {
				this.getCache().clear("OS_CURRENTSTEP_PREV");
			}
		}
		String kvalue = this.getOsCurrentstepPrevExampleConditionSql(osCurrentstepPrevQueryCondition);
		this.operatesLogSimpleAdd("OS_CURRENTSTEP_PREV", "条件删除", "conditionSql", kvalue, osCurrentstepPrevQueryCondition, ret);
		return ret;
	}
	
	public String getOsCurrentstepPrevExampleConditionSql(OsCurrentstepPrevExample osCurrentstepPrevQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < osCurrentstepPrevQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OsCurrentstepPrevExample.Criteria item = osCurrentstepPrevQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OsCurrentstepPrevExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="osCurrentstepPrevQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OsCurrentstepPrevKey> osCurrentstepPrevSelectObjects(OsCurrentstepPrevExample osCurrentstepPrevQueryCondition) throws CacheException {
		if (this.needCache("OS_CURRENTSTEP_PREV")) {
			String key = ("OS_CURRENTSTEP_PREV_" 
						+ ("queryObject_" + this.getOsCurrentstepPrevExampleConditionSql(osCurrentstepPrevQueryCondition)));
			List<OsCurrentstepPrevKey> obj = ((List<OsCurrentstepPrevKey>)(this.getCache().get("OS_CURRENTSTEP_PREV", key)));
			if ((obj == null)) {
				obj = this.getDao().osCurrentstepPrevSelectObjects(osCurrentstepPrevQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_CURRENTSTEP_PREV", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osCurrentstepPrevSelectObjects(osCurrentstepPrevQueryCondition);
		}
	}
	
	/**
	 * <param name="osCurrentstepPrevQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int osCurrentstepPrevQuerySelectObjectsCount(OsCurrentstepPrevExample osCurrentstepPrevQueryCondition) throws CacheException {
		if (this.needCache("OS_CURRENTSTEP_PREV")) {
			String key = ("OS_CURRENTSTEP_PREV_" 
						+ ("queryCount_" + this.getOsCurrentstepPrevExampleConditionSql(osCurrentstepPrevQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OS_CURRENTSTEP_PREV", key)));
			if ((obj == null)) {
				obj = this.getDao().osCurrentstepPrevQuerySelectObjectsCount(osCurrentstepPrevQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_CURRENTSTEP_PREV", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osCurrentstepPrevQuerySelectObjectsCount(osCurrentstepPrevQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象OsHistorystep到数据库中
	 * <param name="osHistorystep">需要插入的新对象</param>
	 */
	public int osHistorystepInsert(OsHistorystep osHistorystep) throws CacheException {
		int ret = this.getDao().osHistorystepInsert(osHistorystep);
		if (this.needCache("OS_HISTORYSTEP")) {
			this.getCache().clear("OS_HISTORYSTEP");
		}
		String kvalue = "";
		kvalue = (kvalue + osHistorystep.getId());
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "插入", "ID", kvalue, osHistorystep, ret);
		return ret;
	}
	
	/**
	 * <param name="osHistorystep">从数据库中删除一个对象OsHistorystep</param>
	 * <param name="AId"></param>
	 */
	public int osHistorystepDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().osHistorystepDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP")) {
				this.getCache().clear("OS_HISTORYSTEP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="osHistorystep">从数据库中删除一个对象OsHistorystep</param>
	 */
	public int osHistorystepDeleteByCondition(OsHistorystepExample osHistorystepQueryCondition) throws CacheException {
		int ret = this.getDao().osHistorystepDeleteByCondition(osHistorystepQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP")) {
				this.getCache().clear("OS_HISTORYSTEP");
			}
		}
		String kvalue = this.getOsHistorystepExampleConditionSql(osHistorystepQueryCondition);
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "条件删除", "conditionSql", kvalue, osHistorystepQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象OsHistorystep到数据库中
	 * <param name="osHistorystep">需要更新的OsHistorystep</param>
	 */
	public int osHistorystepUpdate(OsHistorystep osHistorystep) throws CacheException {
		int ret = this.getDao().osHistorystepUpdate(osHistorystep);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP")) {
				this.getCache().clear("OS_HISTORYSTEP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + osHistorystep.getId());
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "更新", "ID", kvalue, osHistorystep, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性OsHistorystep到数据库中
	 * <param name="osHistorystep">需要更新的OsHistorystep</param>
	 */
	public int osHistorystepUpdateSelective(OsHistorystep osHistorystep) throws CacheException {
		int ret = this.getDao().osHistorystepUpdateSelective(osHistorystep);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP")) {
				this.getCache().clear("OS_HISTORYSTEP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + osHistorystep.getId());
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "部分更新", "ID", kvalue, osHistorystep, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象OsHistorystep到数据库中
	 * <param name="osHistorystepQueryCondition">附加的条件</param>
	 * <param name="osHistorystep">需要更新的OsHistorystep</param>
	 */
	public int osHistorystepUpdateByCondition(OsHistorystep osHistorystep, OsHistorystepExample osHistorystepQueryCondition) throws CacheException {
		int ret = this.getDao().osHistorystepUpdateByCondition(osHistorystep, osHistorystepQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP")) {
				this.getCache().clear("OS_HISTORYSTEP");
			}
		}
		String kvalue = this.getOsHistorystepExampleConditionSql(osHistorystepQueryCondition);
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "条件更新", "conditionSql", kvalue, osHistorystep, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象OsHistorystep到数据库中
	 * <param name="osHistorystepQueryCondition">附加的条件</param>
	 * <param name="osHistorystep">需要更新的OsHistorystep</param>
	 */
	public int osHistorystepUpdateSelectiveByCondition(OsHistorystep osHistorystep, OsHistorystepExample osHistorystepQueryCondition) throws CacheException {
		int ret = this.getDao().osHistorystepUpdateSelectiveByCondition(osHistorystep, osHistorystepQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP")) {
				this.getCache().clear("OS_HISTORYSTEP");
			}
		}
		String kvalue = this.getOsHistorystepExampleConditionSql(osHistorystepQueryCondition);
		this.operatesLogSimpleAdd("OS_HISTORYSTEP", "批量部分更新", "conditionSql", kvalue, osHistorystep, ret);
		return ret;
	}
	
	public String getOsHistorystepExampleConditionSql(OsHistorystepExample osHistorystepQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < osHistorystepQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OsHistorystepExample.Criteria item = osHistorystepQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OsHistorystepExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="osHistorystep">从数据库中查询一个对象OsHistorystep</param>
	 * <param name="AId"></param>
	 */
	public OsHistorystep osHistorystepSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OS_HISTORYSTEP")) {
			String key = ("OS_HISTORYSTEP_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			OsHistorystep obj = ((OsHistorystep)(this.getCache().get("OS_HISTORYSTEP", key)));
			if ((obj == null)) {
				obj = this.getDao().osHistorystepSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OS_HISTORYSTEP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osHistorystepSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="osHistorystepQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OsHistorystep> osHistorystepSelectObjects(OsHistorystepExample osHistorystepQueryCondition) throws CacheException {
		if (this.needCache("OS_HISTORYSTEP")) {
			String key = ("OS_HISTORYSTEP_" 
						+ ("queryObject_" + this.getOsHistorystepExampleConditionSql(osHistorystepQueryCondition)));
			List<OsHistorystep> obj = ((List<OsHistorystep>)(this.getCache().get("OS_HISTORYSTEP", key)));
			if ((obj == null)) {
				obj = this.getDao().osHistorystepSelectObjects(osHistorystepQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_HISTORYSTEP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osHistorystepSelectObjects(osHistorystepQueryCondition);
		}
	}
	
	/**
	 * <param name="osHistorystepQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int osHistorystepQuerySelectObjectsCount(OsHistorystepExample osHistorystepQueryCondition) throws CacheException {
		if (this.needCache("OS_HISTORYSTEP")) {
			String key = ("OS_HISTORYSTEP_" 
						+ ("queryCount_" + this.getOsHistorystepExampleConditionSql(osHistorystepQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OS_HISTORYSTEP", key)));
			if ((obj == null)) {
				obj = this.getDao().osHistorystepQuerySelectObjectsCount(osHistorystepQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_HISTORYSTEP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osHistorystepQuerySelectObjectsCount(osHistorystepQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象OsHistorystepPrev到数据库中
	 * <param name="osHistorystepPrev">需要插入的新对象</param>
	 */
	public int osHistorystepPrevInsert(OsHistorystepPrevKey osHistorystepPrev) throws CacheException {
		int ret = this.getDao().osHistorystepPrevInsert(osHistorystepPrev);
		if (this.needCache("OS_HISTORYSTEP_PREV")) {
			this.getCache().clear("OS_HISTORYSTEP_PREV");
		}
		String kvalue = "";
		kvalue = (kvalue + osHistorystepPrev.getId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + osHistorystepPrev.getPreviousId());
		this.operatesLogSimpleAdd("OS_HISTORYSTEP_PREV", "插入", "ID,PREVIOUS_ID", kvalue, osHistorystepPrev, ret);
		return ret;
	}
	
	/**
	 * <param name="osHistorystepPrev">从数据库中删除一个对象OsHistorystepPrev</param>
	 * <param name="AOsHistorystepPrevKey"> 主键类</param>
	 */
	public int osHistorystepPrevDeleteByPrimaryKey(OsHistorystepPrevKey AOsHistorystepPrevKey) throws CacheException {
		int ret = this.getDao().osHistorystepPrevDeleteByPrimaryKey(AOsHistorystepPrevKey);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP_PREV")) {
				this.getCache().clear("OS_HISTORYSTEP_PREV");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AOsHistorystepPrevKey.getId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + AOsHistorystepPrevKey.getPreviousId());
		this.operatesLogSimpleAdd("OS_HISTORYSTEP_PREV", "删除", "ID,PREVIOUS_ID", kvalue, AOsHistorystepPrevKey, ret);
		return ret;
	}
	
	/**
	 * <param name="osHistorystepPrev">从数据库中删除一个对象OsHistorystepPrev</param>
	 */
	public int osHistorystepPrevDeleteByCondition(OsHistorystepPrevExample osHistorystepPrevQueryCondition) throws CacheException {
		int ret = this.getDao().osHistorystepPrevDeleteByCondition(osHistorystepPrevQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_HISTORYSTEP_PREV")) {
				this.getCache().clear("OS_HISTORYSTEP_PREV");
			}
		}
		String kvalue = this.getOsHistorystepPrevExampleConditionSql(osHistorystepPrevQueryCondition);
		this.operatesLogSimpleAdd("OS_HISTORYSTEP_PREV", "条件删除", "conditionSql", kvalue, osHistorystepPrevQueryCondition, ret);
		return ret;
	}
	
	public String getOsHistorystepPrevExampleConditionSql(OsHistorystepPrevExample osHistorystepPrevQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < osHistorystepPrevQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OsHistorystepPrevExample.Criteria item = osHistorystepPrevQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OsHistorystepPrevExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="osHistorystepPrevQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OsHistorystepPrevKey> osHistorystepPrevSelectObjects(OsHistorystepPrevExample osHistorystepPrevQueryCondition) throws CacheException {
		if (this.needCache("OS_HISTORYSTEP_PREV")) {
			String key = ("OS_HISTORYSTEP_PREV_" 
						+ ("queryObject_" + this.getOsHistorystepPrevExampleConditionSql(osHistorystepPrevQueryCondition)));
			List<OsHistorystepPrevKey> obj = ((List<OsHistorystepPrevKey>)(this.getCache().get("OS_HISTORYSTEP_PREV", key)));
			if ((obj == null)) {
				obj = this.getDao().osHistorystepPrevSelectObjects(osHistorystepPrevQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_HISTORYSTEP_PREV", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osHistorystepPrevSelectObjects(osHistorystepPrevQueryCondition);
		}
	}
	
	/**
	 * <param name="osHistorystepPrevQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int osHistorystepPrevQuerySelectObjectsCount(OsHistorystepPrevExample osHistorystepPrevQueryCondition) throws CacheException {
		if (this.needCache("OS_HISTORYSTEP_PREV")) {
			String key = ("OS_HISTORYSTEP_PREV_" 
						+ ("queryCount_" + this.getOsHistorystepPrevExampleConditionSql(osHistorystepPrevQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OS_HISTORYSTEP_PREV", key)));
			if ((obj == null)) {
				obj = this.getDao().osHistorystepPrevQuerySelectObjectsCount(osHistorystepPrevQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_HISTORYSTEP_PREV", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osHistorystepPrevQuerySelectObjectsCount(osHistorystepPrevQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象OsWfentry到数据库中
	 * <param name="osWfentry">需要插入的新对象</param>
	 */
	public int osWfentryInsert(OsWfentry osWfentry) throws CacheException {
		int ret = this.getDao().osWfentryInsert(osWfentry);
		if (this.needCache("OS_WFENTRY")) {
			this.getCache().clear("OS_WFENTRY");
		}
		String kvalue = "";
		kvalue = (kvalue + osWfentry.getId());
		this.operatesLogSimpleAdd("OS_WFENTRY", "插入", "ID", kvalue, osWfentry, ret);
		return ret;
	}
	
	/**
	 * <param name="osWfentry">从数据库中删除一个对象OsWfentry</param>
	 * <param name="AId"></param>
	 */
	public int osWfentryDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().osWfentryDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("OS_WFENTRY")) {
				this.getCache().clear("OS_WFENTRY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("OS_WFENTRY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="osWfentry">从数据库中删除一个对象OsWfentry</param>
	 */
	public int osWfentryDeleteByCondition(OsWfentryExample osWfentryQueryCondition) throws CacheException {
		int ret = this.getDao().osWfentryDeleteByCondition(osWfentryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_WFENTRY")) {
				this.getCache().clear("OS_WFENTRY");
			}
		}
		String kvalue = this.getOsWfentryExampleConditionSql(osWfentryQueryCondition);
		this.operatesLogSimpleAdd("OS_WFENTRY", "条件删除", "conditionSql", kvalue, osWfentryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象OsWfentry到数据库中
	 * <param name="osWfentry">需要更新的OsWfentry</param>
	 */
	public int osWfentryUpdate(OsWfentry osWfentry) throws CacheException {
		int ret = this.getDao().osWfentryUpdate(osWfentry);
		if ((ret > 0)) {
			if (this.needCache("OS_WFENTRY")) {
				this.getCache().clear("OS_WFENTRY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + osWfentry.getId());
		this.operatesLogSimpleAdd("OS_WFENTRY", "更新", "ID", kvalue, osWfentry, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性OsWfentry到数据库中
	 * <param name="osWfentry">需要更新的OsWfentry</param>
	 */
	public int osWfentryUpdateSelective(OsWfentry osWfentry) throws CacheException {
		int ret = this.getDao().osWfentryUpdateSelective(osWfentry);
		if ((ret > 0)) {
			if (this.needCache("OS_WFENTRY")) {
				this.getCache().clear("OS_WFENTRY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + osWfentry.getId());
		this.operatesLogSimpleAdd("OS_WFENTRY", "部分更新", "ID", kvalue, osWfentry, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象OsWfentry到数据库中
	 * <param name="osWfentryQueryCondition">附加的条件</param>
	 * <param name="osWfentry">需要更新的OsWfentry</param>
	 */
	public int osWfentryUpdateByCondition(OsWfentry osWfentry, OsWfentryExample osWfentryQueryCondition) throws CacheException {
		int ret = this.getDao().osWfentryUpdateByCondition(osWfentry, osWfentryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_WFENTRY")) {
				this.getCache().clear("OS_WFENTRY");
			}
		}
		String kvalue = this.getOsWfentryExampleConditionSql(osWfentryQueryCondition);
		this.operatesLogSimpleAdd("OS_WFENTRY", "条件更新", "conditionSql", kvalue, osWfentry, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象OsWfentry到数据库中
	 * <param name="osWfentryQueryCondition">附加的条件</param>
	 * <param name="osWfentry">需要更新的OsWfentry</param>
	 */
	public int osWfentryUpdateSelectiveByCondition(OsWfentry osWfentry, OsWfentryExample osWfentryQueryCondition) throws CacheException {
		int ret = this.getDao().osWfentryUpdateSelectiveByCondition(osWfentry, osWfentryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("OS_WFENTRY")) {
				this.getCache().clear("OS_WFENTRY");
			}
		}
		String kvalue = this.getOsWfentryExampleConditionSql(osWfentryQueryCondition);
		this.operatesLogSimpleAdd("OS_WFENTRY", "批量部分更新", "conditionSql", kvalue, osWfentry, ret);
		return ret;
	}
	
	public String getOsWfentryExampleConditionSql(OsWfentryExample osWfentryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < osWfentryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			OsWfentryExample.Criteria item = osWfentryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					OsWfentryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="osWfentry">从数据库中查询一个对象OsWfentry</param>
	 * <param name="AId"></param>
	 */
	public OsWfentry osWfentrySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("OS_WFENTRY")) {
			String key = ("OS_WFENTRY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			OsWfentry obj = ((OsWfentry)(this.getCache().get("OS_WFENTRY", key)));
			if ((obj == null)) {
				obj = this.getDao().osWfentrySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("OS_WFENTRY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osWfentrySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="osWfentryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<OsWfentry> osWfentrySelectObjects(OsWfentryExample osWfentryQueryCondition) throws CacheException {
		if (this.needCache("OS_WFENTRY")) {
			String key = ("OS_WFENTRY_" 
						+ ("queryObject_" + this.getOsWfentryExampleConditionSql(osWfentryQueryCondition)));
			List<OsWfentry> obj = ((List<OsWfentry>)(this.getCache().get("OS_WFENTRY", key)));
			if ((obj == null)) {
				obj = this.getDao().osWfentrySelectObjects(osWfentryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_WFENTRY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osWfentrySelectObjects(osWfentryQueryCondition);
		}
	}
	
	/**
	 * <param name="osWfentryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int osWfentryQuerySelectObjectsCount(OsWfentryExample osWfentryQueryCondition) throws CacheException {
		if (this.needCache("OS_WFENTRY")) {
			String key = ("OS_WFENTRY_" 
						+ ("queryCount_" + this.getOsWfentryExampleConditionSql(osWfentryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("OS_WFENTRY", key)));
			if ((obj == null)) {
				obj = this.getDao().osWfentryQuerySelectObjectsCount(osWfentryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("OS_WFENTRY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().osWfentryQuerySelectObjectsCount(osWfentryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Permissionscheme到数据库中
	 * <param name="permissionscheme">需要插入的新对象</param>
	 */
	public int permissionschemeInsert(Permissionscheme permissionscheme) throws CacheException {
		int ret = this.getDao().permissionschemeInsert(permissionscheme);
		if (this.needCache("PERMISSIONSCHEME")) {
			this.getCache().clear("PERMISSIONSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + permissionscheme.getId());
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "插入", "ID", kvalue, permissionscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="permissionscheme">从数据库中删除一个对象Permissionscheme</param>
	 * <param name="AId"></param>
	 */
	public int permissionschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().permissionschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="permissionscheme">从数据库中删除一个对象Permissionscheme</param>
	 */
	public int permissionschemeDeleteByCondition(PermissionschemeExample permissionschemeQueryCondition) throws CacheException {
		int ret = this.getDao().permissionschemeDeleteByCondition(permissionschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = this.getPermissionschemeExampleConditionSql(permissionschemeQueryCondition);
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "条件删除", "conditionSql", kvalue, permissionschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Permissionscheme到数据库中
	 * <param name="permissionscheme">需要更新的Permissionscheme</param>
	 */
	public int permissionschemeUpdate(Permissionscheme permissionscheme) throws CacheException {
		int ret = this.getDao().permissionschemeUpdate(permissionscheme);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + permissionscheme.getId());
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "更新", "ID", kvalue, permissionscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Permissionscheme到数据库中
	 * <param name="permissionscheme">需要更新的Permissionscheme</param>
	 */
	public int permissionschemeUpdateSelective(Permissionscheme permissionscheme) throws CacheException {
		int ret = this.getDao().permissionschemeUpdateSelective(permissionscheme);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + permissionscheme.getId());
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "部分更新", "ID", kvalue, permissionscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Permissionscheme到数据库中
	 * <param name="permissionscheme">需要更新的Permissionscheme</param>
	 */
	public int permissionschemeUpdateWithBlobs(Permissionscheme permissionscheme) throws CacheException {
		int ret = this.getDao().permissionschemeUpdateWithBlobs(permissionscheme);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + permissionscheme.getId());
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "更新含Blob", "ID", kvalue, permissionscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Permissionscheme到数据库中
	 * <param name="permissionschemeQueryCondition">附加的条件</param>
	 * <param name="permissionscheme">需要更新的Permissionscheme</param>
	 */
	public int permissionschemeUpdateByCondition(Permissionscheme permissionscheme, PermissionschemeExample permissionschemeQueryCondition) throws CacheException {
		int ret = this.getDao().permissionschemeUpdateByCondition(permissionscheme, permissionschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = this.getPermissionschemeExampleConditionSql(permissionschemeQueryCondition);
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "条件更新", "conditionSql", kvalue, permissionscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Permissionscheme到数据库中
	 * <param name="permissionschemeQueryCondition">附加的条件</param>
	 * <param name="permissionscheme">需要更新的Permissionscheme</param>
	 */
	public int permissionschemeUpdateSelectiveByCondition(Permissionscheme permissionscheme, PermissionschemeExample permissionschemeQueryCondition) throws CacheException {
		int ret = this.getDao().permissionschemeUpdateSelectiveByCondition(permissionscheme, permissionschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PERMISSIONSCHEME")) {
				this.getCache().clear("PERMISSIONSCHEME");
			}
		}
		String kvalue = this.getPermissionschemeExampleConditionSql(permissionschemeQueryCondition);
		this.operatesLogSimpleAdd("PERMISSIONSCHEME", "批量部分更新", "conditionSql", kvalue, permissionscheme, ret);
		return ret;
	}
	
	public String getPermissionschemeExampleConditionSql(PermissionschemeExample permissionschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < permissionschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PermissionschemeExample.Criteria item = permissionschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PermissionschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="permissionscheme">从数据库中查询一个对象Permissionscheme</param>
	 * <param name="AId"></param>
	 */
	public Permissionscheme permissionschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PERMISSIONSCHEME")) {
			String key = ("PERMISSIONSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Permissionscheme obj = ((Permissionscheme)(this.getCache().get("PERMISSIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().permissionschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PERMISSIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().permissionschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="permissionschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Permissionscheme> permissionschemeSelectObjects(PermissionschemeExample permissionschemeQueryCondition) throws CacheException {
		if (this.needCache("PERMISSIONSCHEME")) {
			String key = ("PERMISSIONSCHEME_" 
						+ ("queryObject_" + this.getPermissionschemeExampleConditionSql(permissionschemeQueryCondition)));
			List<Permissionscheme> obj = ((List<Permissionscheme>)(this.getCache().get("PERMISSIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().permissionschemeSelectObjects(permissionschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PERMISSIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().permissionschemeSelectObjects(permissionschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="permissionschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Permissionscheme> permissionschemeSelectObjectsWithBLOBs(PermissionschemeExample permissionschemeQueryCondition) throws CacheException {
		if (this.needCache("PERMISSIONSCHEME")) {
			String key = ("PERMISSIONSCHEME_" 
						+ ("queryObject_" + this.getPermissionschemeExampleConditionSql(permissionschemeQueryCondition)));
			List<Permissionscheme> obj = ((List<Permissionscheme>)(this.getCache().get("PERMISSIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().permissionschemeSelectObjectsWithBLOBs(permissionschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PERMISSIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().permissionschemeSelectObjectsWithBLOBs(permissionschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="permissionschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int permissionschemeQuerySelectObjectsCount(PermissionschemeExample permissionschemeQueryCondition) throws CacheException {
		if (this.needCache("PERMISSIONSCHEME")) {
			String key = ("PERMISSIONSCHEME_" 
						+ ("queryCount_" + this.getPermissionschemeExampleConditionSql(permissionschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PERMISSIONSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().permissionschemeQuerySelectObjectsCount(permissionschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PERMISSIONSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().permissionschemeQuerySelectObjectsCount(permissionschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Pluginversion到数据库中
	 * <param name="pluginversion">需要插入的新对象</param>
	 */
	public int pluginversionInsert(Pluginversion pluginversion) throws CacheException {
		int ret = this.getDao().pluginversionInsert(pluginversion);
		if (this.needCache("PLUGINVERSION")) {
			this.getCache().clear("PLUGINVERSION");
		}
		String kvalue = "";
		kvalue = (kvalue + pluginversion.getId());
		this.operatesLogSimpleAdd("PLUGINVERSION", "插入", "ID", kvalue, pluginversion, ret);
		return ret;
	}
	
	/**
	 * <param name="pluginversion">从数据库中删除一个对象Pluginversion</param>
	 * <param name="AId"></param>
	 */
	public int pluginversionDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().pluginversionDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PLUGINVERSION")) {
				this.getCache().clear("PLUGINVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PLUGINVERSION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="pluginversion">从数据库中删除一个对象Pluginversion</param>
	 */
	public int pluginversionDeleteByCondition(PluginversionExample pluginversionQueryCondition) throws CacheException {
		int ret = this.getDao().pluginversionDeleteByCondition(pluginversionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PLUGINVERSION")) {
				this.getCache().clear("PLUGINVERSION");
			}
		}
		String kvalue = this.getPluginversionExampleConditionSql(pluginversionQueryCondition);
		this.operatesLogSimpleAdd("PLUGINVERSION", "条件删除", "conditionSql", kvalue, pluginversionQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Pluginversion到数据库中
	 * <param name="pluginversion">需要更新的Pluginversion</param>
	 */
	public int pluginversionUpdate(Pluginversion pluginversion) throws CacheException {
		int ret = this.getDao().pluginversionUpdate(pluginversion);
		if ((ret > 0)) {
			if (this.needCache("PLUGINVERSION")) {
				this.getCache().clear("PLUGINVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + pluginversion.getId());
		this.operatesLogSimpleAdd("PLUGINVERSION", "更新", "ID", kvalue, pluginversion, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Pluginversion到数据库中
	 * <param name="pluginversion">需要更新的Pluginversion</param>
	 */
	public int pluginversionUpdateSelective(Pluginversion pluginversion) throws CacheException {
		int ret = this.getDao().pluginversionUpdateSelective(pluginversion);
		if ((ret > 0)) {
			if (this.needCache("PLUGINVERSION")) {
				this.getCache().clear("PLUGINVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + pluginversion.getId());
		this.operatesLogSimpleAdd("PLUGINVERSION", "部分更新", "ID", kvalue, pluginversion, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Pluginversion到数据库中
	 * <param name="pluginversionQueryCondition">附加的条件</param>
	 * <param name="pluginversion">需要更新的Pluginversion</param>
	 */
	public int pluginversionUpdateByCondition(Pluginversion pluginversion, PluginversionExample pluginversionQueryCondition) throws CacheException {
		int ret = this.getDao().pluginversionUpdateByCondition(pluginversion, pluginversionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PLUGINVERSION")) {
				this.getCache().clear("PLUGINVERSION");
			}
		}
		String kvalue = this.getPluginversionExampleConditionSql(pluginversionQueryCondition);
		this.operatesLogSimpleAdd("PLUGINVERSION", "条件更新", "conditionSql", kvalue, pluginversion, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Pluginversion到数据库中
	 * <param name="pluginversionQueryCondition">附加的条件</param>
	 * <param name="pluginversion">需要更新的Pluginversion</param>
	 */
	public int pluginversionUpdateSelectiveByCondition(Pluginversion pluginversion, PluginversionExample pluginversionQueryCondition) throws CacheException {
		int ret = this.getDao().pluginversionUpdateSelectiveByCondition(pluginversion, pluginversionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PLUGINVERSION")) {
				this.getCache().clear("PLUGINVERSION");
			}
		}
		String kvalue = this.getPluginversionExampleConditionSql(pluginversionQueryCondition);
		this.operatesLogSimpleAdd("PLUGINVERSION", "批量部分更新", "conditionSql", kvalue, pluginversion, ret);
		return ret;
	}
	
	public String getPluginversionExampleConditionSql(PluginversionExample pluginversionQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < pluginversionQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PluginversionExample.Criteria item = pluginversionQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PluginversionExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="pluginversion">从数据库中查询一个对象Pluginversion</param>
	 * <param name="AId"></param>
	 */
	public Pluginversion pluginversionSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PLUGINVERSION")) {
			String key = ("PLUGINVERSION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Pluginversion obj = ((Pluginversion)(this.getCache().get("PLUGINVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().pluginversionSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PLUGINVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().pluginversionSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="pluginversionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Pluginversion> pluginversionSelectObjects(PluginversionExample pluginversionQueryCondition) throws CacheException {
		if (this.needCache("PLUGINVERSION")) {
			String key = ("PLUGINVERSION_" 
						+ ("queryObject_" + this.getPluginversionExampleConditionSql(pluginversionQueryCondition)));
			List<Pluginversion> obj = ((List<Pluginversion>)(this.getCache().get("PLUGINVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().pluginversionSelectObjects(pluginversionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PLUGINVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().pluginversionSelectObjects(pluginversionQueryCondition);
		}
	}
	
	/**
	 * <param name="pluginversionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int pluginversionQuerySelectObjectsCount(PluginversionExample pluginversionQueryCondition) throws CacheException {
		if (this.needCache("PLUGINVERSION")) {
			String key = ("PLUGINVERSION_" 
						+ ("queryCount_" + this.getPluginversionExampleConditionSql(pluginversionQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PLUGINVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().pluginversionQuerySelectObjectsCount(pluginversionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PLUGINVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().pluginversionQuerySelectObjectsCount(pluginversionQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Portalpage到数据库中
	 * <param name="portalpage">需要插入的新对象</param>
	 */
	public int portalpageInsert(Portalpage portalpage) throws CacheException {
		int ret = this.getDao().portalpageInsert(portalpage);
		if (this.needCache("PORTALPAGE")) {
			this.getCache().clear("PORTALPAGE");
		}
		String kvalue = "";
		kvalue = (kvalue + portalpage.getId());
		this.operatesLogSimpleAdd("PORTALPAGE", "插入", "ID", kvalue, portalpage, ret);
		return ret;
	}
	
	/**
	 * <param name="portalpage">从数据库中删除一个对象Portalpage</param>
	 * <param name="AId"></param>
	 */
	public int portalpageDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().portalpageDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PORTALPAGE")) {
				this.getCache().clear("PORTALPAGE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PORTALPAGE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="portalpage">从数据库中删除一个对象Portalpage</param>
	 */
	public int portalpageDeleteByCondition(PortalpageExample portalpageQueryCondition) throws CacheException {
		int ret = this.getDao().portalpageDeleteByCondition(portalpageQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PORTALPAGE")) {
				this.getCache().clear("PORTALPAGE");
			}
		}
		String kvalue = this.getPortalpageExampleConditionSql(portalpageQueryCondition);
		this.operatesLogSimpleAdd("PORTALPAGE", "条件删除", "conditionSql", kvalue, portalpageQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Portalpage到数据库中
	 * <param name="portalpage">需要更新的Portalpage</param>
	 */
	public int portalpageUpdate(Portalpage portalpage) throws CacheException {
		int ret = this.getDao().portalpageUpdate(portalpage);
		if ((ret > 0)) {
			if (this.needCache("PORTALPAGE")) {
				this.getCache().clear("PORTALPAGE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + portalpage.getId());
		this.operatesLogSimpleAdd("PORTALPAGE", "更新", "ID", kvalue, portalpage, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Portalpage到数据库中
	 * <param name="portalpage">需要更新的Portalpage</param>
	 */
	public int portalpageUpdateSelective(Portalpage portalpage) throws CacheException {
		int ret = this.getDao().portalpageUpdateSelective(portalpage);
		if ((ret > 0)) {
			if (this.needCache("PORTALPAGE")) {
				this.getCache().clear("PORTALPAGE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + portalpage.getId());
		this.operatesLogSimpleAdd("PORTALPAGE", "部分更新", "ID", kvalue, portalpage, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Portalpage到数据库中
	 * <param name="portalpageQueryCondition">附加的条件</param>
	 * <param name="portalpage">需要更新的Portalpage</param>
	 */
	public int portalpageUpdateByCondition(Portalpage portalpage, PortalpageExample portalpageQueryCondition) throws CacheException {
		int ret = this.getDao().portalpageUpdateByCondition(portalpage, portalpageQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PORTALPAGE")) {
				this.getCache().clear("PORTALPAGE");
			}
		}
		String kvalue = this.getPortalpageExampleConditionSql(portalpageQueryCondition);
		this.operatesLogSimpleAdd("PORTALPAGE", "条件更新", "conditionSql", kvalue, portalpage, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Portalpage到数据库中
	 * <param name="portalpageQueryCondition">附加的条件</param>
	 * <param name="portalpage">需要更新的Portalpage</param>
	 */
	public int portalpageUpdateSelectiveByCondition(Portalpage portalpage, PortalpageExample portalpageQueryCondition) throws CacheException {
		int ret = this.getDao().portalpageUpdateSelectiveByCondition(portalpage, portalpageQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PORTALPAGE")) {
				this.getCache().clear("PORTALPAGE");
			}
		}
		String kvalue = this.getPortalpageExampleConditionSql(portalpageQueryCondition);
		this.operatesLogSimpleAdd("PORTALPAGE", "批量部分更新", "conditionSql", kvalue, portalpage, ret);
		return ret;
	}
	
	public String getPortalpageExampleConditionSql(PortalpageExample portalpageQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < portalpageQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PortalpageExample.Criteria item = portalpageQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PortalpageExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="portalpage">从数据库中查询一个对象Portalpage</param>
	 * <param name="AId"></param>
	 */
	public Portalpage portalpageSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PORTALPAGE")) {
			String key = ("PORTALPAGE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Portalpage obj = ((Portalpage)(this.getCache().get("PORTALPAGE", key)));
			if ((obj == null)) {
				obj = this.getDao().portalpageSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PORTALPAGE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portalpageSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="portalpageQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Portalpage> portalpageSelectObjects(PortalpageExample portalpageQueryCondition) throws CacheException {
		if (this.needCache("PORTALPAGE")) {
			String key = ("PORTALPAGE_" 
						+ ("queryObject_" + this.getPortalpageExampleConditionSql(portalpageQueryCondition)));
			List<Portalpage> obj = ((List<Portalpage>)(this.getCache().get("PORTALPAGE", key)));
			if ((obj == null)) {
				obj = this.getDao().portalpageSelectObjects(portalpageQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PORTALPAGE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portalpageSelectObjects(portalpageQueryCondition);
		}
	}
	
	/**
	 * <param name="portalpageQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int portalpageQuerySelectObjectsCount(PortalpageExample portalpageQueryCondition) throws CacheException {
		if (this.needCache("PORTALPAGE")) {
			String key = ("PORTALPAGE_" 
						+ ("queryCount_" + this.getPortalpageExampleConditionSql(portalpageQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PORTALPAGE", key)));
			if ((obj == null)) {
				obj = this.getDao().portalpageQuerySelectObjectsCount(portalpageQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PORTALPAGE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portalpageQuerySelectObjectsCount(portalpageQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Portletconfiguration到数据库中
	 * <param name="portletconfiguration">需要插入的新对象</param>
	 */
	public int portletconfigurationInsert(Portletconfiguration portletconfiguration) throws CacheException {
		int ret = this.getDao().portletconfigurationInsert(portletconfiguration);
		if (this.needCache("PORTLETCONFIGURATION")) {
			this.getCache().clear("PORTLETCONFIGURATION");
		}
		String kvalue = "";
		kvalue = (kvalue + portletconfiguration.getId());
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "插入", "ID", kvalue, portletconfiguration, ret);
		return ret;
	}
	
	/**
	 * <param name="portletconfiguration">从数据库中删除一个对象Portletconfiguration</param>
	 * <param name="AId"></param>
	 */
	public int portletconfigurationDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().portletconfigurationDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="portletconfiguration">从数据库中删除一个对象Portletconfiguration</param>
	 */
	public int portletconfigurationDeleteByCondition(PortletconfigurationExample portletconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().portletconfigurationDeleteByCondition(portletconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = this.getPortletconfigurationExampleConditionSql(portletconfigurationQueryCondition);
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "条件删除", "conditionSql", kvalue, portletconfigurationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Portletconfiguration到数据库中
	 * <param name="portletconfiguration">需要更新的Portletconfiguration</param>
	 */
	public int portletconfigurationUpdate(Portletconfiguration portletconfiguration) throws CacheException {
		int ret = this.getDao().portletconfigurationUpdate(portletconfiguration);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + portletconfiguration.getId());
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "更新", "ID", kvalue, portletconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Portletconfiguration到数据库中
	 * <param name="portletconfiguration">需要更新的Portletconfiguration</param>
	 */
	public int portletconfigurationUpdateSelective(Portletconfiguration portletconfiguration) throws CacheException {
		int ret = this.getDao().portletconfigurationUpdateSelective(portletconfiguration);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + portletconfiguration.getId());
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "部分更新", "ID", kvalue, portletconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Portletconfiguration到数据库中
	 * <param name="portletconfiguration">需要更新的Portletconfiguration</param>
	 */
	public int portletconfigurationUpdateWithBlobs(Portletconfiguration portletconfiguration) throws CacheException {
		int ret = this.getDao().portletconfigurationUpdateWithBlobs(portletconfiguration);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + portletconfiguration.getId());
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "更新含Blob", "ID", kvalue, portletconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Portletconfiguration到数据库中
	 * <param name="portletconfigurationQueryCondition">附加的条件</param>
	 * <param name="portletconfiguration">需要更新的Portletconfiguration</param>
	 */
	public int portletconfigurationUpdateByCondition(Portletconfiguration portletconfiguration, PortletconfigurationExample portletconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().portletconfigurationUpdateByCondition(portletconfiguration, portletconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = this.getPortletconfigurationExampleConditionSql(portletconfigurationQueryCondition);
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "条件更新", "conditionSql", kvalue, portletconfiguration, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Portletconfiguration到数据库中
	 * <param name="portletconfigurationQueryCondition">附加的条件</param>
	 * <param name="portletconfiguration">需要更新的Portletconfiguration</param>
	 */
	public int portletconfigurationUpdateSelectiveByCondition(Portletconfiguration portletconfiguration, PortletconfigurationExample portletconfigurationQueryCondition) throws CacheException {
		int ret = this.getDao().portletconfigurationUpdateSelectiveByCondition(portletconfiguration, portletconfigurationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PORTLETCONFIGURATION")) {
				this.getCache().clear("PORTLETCONFIGURATION");
			}
		}
		String kvalue = this.getPortletconfigurationExampleConditionSql(portletconfigurationQueryCondition);
		this.operatesLogSimpleAdd("PORTLETCONFIGURATION", "批量部分更新", "conditionSql", kvalue, portletconfiguration, ret);
		return ret;
	}
	
	public String getPortletconfigurationExampleConditionSql(PortletconfigurationExample portletconfigurationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < portletconfigurationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PortletconfigurationExample.Criteria item = portletconfigurationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PortletconfigurationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="portletconfiguration">从数据库中查询一个对象Portletconfiguration</param>
	 * <param name="AId"></param>
	 */
	public Portletconfiguration portletconfigurationSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PORTLETCONFIGURATION")) {
			String key = ("PORTLETCONFIGURATION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Portletconfiguration obj = ((Portletconfiguration)(this.getCache().get("PORTLETCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().portletconfigurationSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PORTLETCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portletconfigurationSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="portletconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Portletconfiguration> portletconfigurationSelectObjects(PortletconfigurationExample portletconfigurationQueryCondition) throws CacheException {
		if (this.needCache("PORTLETCONFIGURATION")) {
			String key = ("PORTLETCONFIGURATION_" 
						+ ("queryObject_" + this.getPortletconfigurationExampleConditionSql(portletconfigurationQueryCondition)));
			List<Portletconfiguration> obj = ((List<Portletconfiguration>)(this.getCache().get("PORTLETCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().portletconfigurationSelectObjects(portletconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PORTLETCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portletconfigurationSelectObjects(portletconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="portletconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Portletconfiguration> portletconfigurationSelectObjectsWithBLOBs(PortletconfigurationExample portletconfigurationQueryCondition) throws CacheException {
		if (this.needCache("PORTLETCONFIGURATION")) {
			String key = ("PORTLETCONFIGURATION_" 
						+ ("queryObject_" + this.getPortletconfigurationExampleConditionSql(portletconfigurationQueryCondition)));
			List<Portletconfiguration> obj = ((List<Portletconfiguration>)(this.getCache().get("PORTLETCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().portletconfigurationSelectObjectsWithBLOBs(portletconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PORTLETCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portletconfigurationSelectObjectsWithBLOBs(portletconfigurationQueryCondition);
		}
	}
	
	/**
	 * <param name="portletconfigurationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int portletconfigurationQuerySelectObjectsCount(PortletconfigurationExample portletconfigurationQueryCondition) throws CacheException {
		if (this.needCache("PORTLETCONFIGURATION")) {
			String key = ("PORTLETCONFIGURATION_" 
						+ ("queryCount_" + this.getPortletconfigurationExampleConditionSql(portletconfigurationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PORTLETCONFIGURATION", key)));
			if ((obj == null)) {
				obj = this.getDao().portletconfigurationQuerySelectObjectsCount(portletconfigurationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PORTLETCONFIGURATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().portletconfigurationQuerySelectObjectsCount(portletconfigurationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Priority到数据库中
	 * <param name="priority">需要插入的新对象</param>
	 */
	public int priorityInsert(Priority priority) throws CacheException {
		int ret = this.getDao().priorityInsert(priority);
		if (this.needCache("PRIORITY")) {
			this.getCache().clear("PRIORITY");
		}
		String kvalue = "";
		kvalue = (kvalue + priority.getId());
		this.operatesLogSimpleAdd("PRIORITY", "插入", "ID", kvalue, priority, ret);
		return ret;
	}
	
	/**
	 * <param name="priority">从数据库中删除一个对象Priority</param>
	 * <param name="AId"></param>
	 */
	public int priorityDeleteByPrimaryKey(String AId) throws CacheException {
		int ret = this.getDao().priorityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PRIORITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="priority">从数据库中删除一个对象Priority</param>
	 */
	public int priorityDeleteByCondition(PriorityExample priorityQueryCondition) throws CacheException {
		int ret = this.getDao().priorityDeleteByCondition(priorityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = this.getPriorityExampleConditionSql(priorityQueryCondition);
		this.operatesLogSimpleAdd("PRIORITY", "条件删除", "conditionSql", kvalue, priorityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Priority到数据库中
	 * <param name="priority">需要更新的Priority</param>
	 */
	public int priorityUpdate(Priority priority) throws CacheException {
		int ret = this.getDao().priorityUpdate(priority);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + priority.getId());
		this.operatesLogSimpleAdd("PRIORITY", "更新", "ID", kvalue, priority, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Priority到数据库中
	 * <param name="priority">需要更新的Priority</param>
	 */
	public int priorityUpdateSelective(Priority priority) throws CacheException {
		int ret = this.getDao().priorityUpdateSelective(priority);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + priority.getId());
		this.operatesLogSimpleAdd("PRIORITY", "部分更新", "ID", kvalue, priority, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Priority到数据库中
	 * <param name="priority">需要更新的Priority</param>
	 */
	public int priorityUpdateWithBlobs(Priority priority) throws CacheException {
		int ret = this.getDao().priorityUpdateWithBlobs(priority);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + priority.getId());
		this.operatesLogSimpleAdd("PRIORITY", "更新含Blob", "ID", kvalue, priority, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Priority到数据库中
	 * <param name="priorityQueryCondition">附加的条件</param>
	 * <param name="priority">需要更新的Priority</param>
	 */
	public int priorityUpdateByCondition(Priority priority, PriorityExample priorityQueryCondition) throws CacheException {
		int ret = this.getDao().priorityUpdateByCondition(priority, priorityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = this.getPriorityExampleConditionSql(priorityQueryCondition);
		this.operatesLogSimpleAdd("PRIORITY", "条件更新", "conditionSql", kvalue, priority, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Priority到数据库中
	 * <param name="priorityQueryCondition">附加的条件</param>
	 * <param name="priority">需要更新的Priority</param>
	 */
	public int priorityUpdateSelectiveByCondition(Priority priority, PriorityExample priorityQueryCondition) throws CacheException {
		int ret = this.getDao().priorityUpdateSelectiveByCondition(priority, priorityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PRIORITY")) {
				this.getCache().clear("PRIORITY");
			}
		}
		String kvalue = this.getPriorityExampleConditionSql(priorityQueryCondition);
		this.operatesLogSimpleAdd("PRIORITY", "批量部分更新", "conditionSql", kvalue, priority, ret);
		return ret;
	}
	
	public String getPriorityExampleConditionSql(PriorityExample priorityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < priorityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PriorityExample.Criteria item = priorityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PriorityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="priority">从数据库中查询一个对象Priority</param>
	 * <param name="AId"></param>
	 */
	public Priority prioritySelectByPrimaryKey(String AId) throws CacheException {
		if (this.needCache("PRIORITY")) {
			String key = ("PRIORITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Priority obj = ((Priority)(this.getCache().get("PRIORITY", key)));
			if ((obj == null)) {
				obj = this.getDao().prioritySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PRIORITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().prioritySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="priorityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Priority> prioritySelectObjects(PriorityExample priorityQueryCondition) throws CacheException {
		if (this.needCache("PRIORITY")) {
			String key = ("PRIORITY_" 
						+ ("queryObject_" + this.getPriorityExampleConditionSql(priorityQueryCondition)));
			List<Priority> obj = ((List<Priority>)(this.getCache().get("PRIORITY", key)));
			if ((obj == null)) {
				obj = this.getDao().prioritySelectObjects(priorityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PRIORITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().prioritySelectObjects(priorityQueryCondition);
		}
	}
	
	/**
	 * <param name="priorityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Priority> prioritySelectObjectsWithBLOBs(PriorityExample priorityQueryCondition) throws CacheException {
		if (this.needCache("PRIORITY")) {
			String key = ("PRIORITY_" 
						+ ("queryObject_" + this.getPriorityExampleConditionSql(priorityQueryCondition)));
			List<Priority> obj = ((List<Priority>)(this.getCache().get("PRIORITY", key)));
			if ((obj == null)) {
				obj = this.getDao().prioritySelectObjectsWithBLOBs(priorityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PRIORITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().prioritySelectObjectsWithBLOBs(priorityQueryCondition);
		}
	}
	
	/**
	 * <param name="priorityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int priorityQuerySelectObjectsCount(PriorityExample priorityQueryCondition) throws CacheException {
		if (this.needCache("PRIORITY")) {
			String key = ("PRIORITY_" 
						+ ("queryCount_" + this.getPriorityExampleConditionSql(priorityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PRIORITY", key)));
			if ((obj == null)) {
				obj = this.getDao().priorityQuerySelectObjectsCount(priorityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PRIORITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().priorityQuerySelectObjectsCount(priorityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Project到数据库中
	 * <param name="project">需要插入的新对象</param>
	 */
	public int projectInsert(Project project) throws CacheException {
		int ret = this.getDao().projectInsert(project);
		if (this.needCache("PROJECT")) {
			this.getCache().clear("PROJECT");
		}
		String kvalue = "";
		kvalue = (kvalue + project.getId());
		this.operatesLogSimpleAdd("PROJECT", "插入", "ID", kvalue, project, ret);
		return ret;
	}
	
	/**
	 * <param name="project">从数据库中删除一个对象Project</param>
	 * <param name="AId"></param>
	 */
	public int projectDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().projectDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROJECT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="project">从数据库中删除一个对象Project</param>
	 */
	public int projectDeleteByCondition(ProjectExample projectQueryCondition) throws CacheException {
		int ret = this.getDao().projectDeleteByCondition(projectQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = this.getProjectExampleConditionSql(projectQueryCondition);
		this.operatesLogSimpleAdd("PROJECT", "条件删除", "conditionSql", kvalue, projectQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Project到数据库中
	 * <param name="project">需要更新的Project</param>
	 */
	public int projectUpdate(Project project) throws CacheException {
		int ret = this.getDao().projectUpdate(project);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + project.getId());
		this.operatesLogSimpleAdd("PROJECT", "更新", "ID", kvalue, project, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Project到数据库中
	 * <param name="project">需要更新的Project</param>
	 */
	public int projectUpdateSelective(Project project) throws CacheException {
		int ret = this.getDao().projectUpdateSelective(project);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + project.getId());
		this.operatesLogSimpleAdd("PROJECT", "部分更新", "ID", kvalue, project, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Project到数据库中
	 * <param name="project">需要更新的Project</param>
	 */
	public int projectUpdateWithBlobs(Project project) throws CacheException {
		int ret = this.getDao().projectUpdateWithBlobs(project);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + project.getId());
		this.operatesLogSimpleAdd("PROJECT", "更新含Blob", "ID", kvalue, project, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Project到数据库中
	 * <param name="projectQueryCondition">附加的条件</param>
	 * <param name="project">需要更新的Project</param>
	 */
	public int projectUpdateByCondition(Project project, ProjectExample projectQueryCondition) throws CacheException {
		int ret = this.getDao().projectUpdateByCondition(project, projectQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = this.getProjectExampleConditionSql(projectQueryCondition);
		this.operatesLogSimpleAdd("PROJECT", "条件更新", "conditionSql", kvalue, project, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Project到数据库中
	 * <param name="projectQueryCondition">附加的条件</param>
	 * <param name="project">需要更新的Project</param>
	 */
	public int projectUpdateSelectiveByCondition(Project project, ProjectExample projectQueryCondition) throws CacheException {
		int ret = this.getDao().projectUpdateSelectiveByCondition(project, projectQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECT")) {
				this.getCache().clear("PROJECT");
			}
		}
		String kvalue = this.getProjectExampleConditionSql(projectQueryCondition);
		this.operatesLogSimpleAdd("PROJECT", "批量部分更新", "conditionSql", kvalue, project, ret);
		return ret;
	}
	
	public String getProjectExampleConditionSql(ProjectExample projectQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < projectQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ProjectExample.Criteria item = projectQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ProjectExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="project">从数据库中查询一个对象Project</param>
	 * <param name="AId"></param>
	 */
	public Project projectSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROJECT")) {
			String key = ("PROJECT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Project obj = ((Project)(this.getCache().get("PROJECT", key)));
			if ((obj == null)) {
				obj = this.getDao().projectSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROJECT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="projectQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Project> projectSelectObjects(ProjectExample projectQueryCondition) throws CacheException {
		if (this.needCache("PROJECT")) {
			String key = ("PROJECT_" 
						+ ("queryObject_" + this.getProjectExampleConditionSql(projectQueryCondition)));
			List<Project> obj = ((List<Project>)(this.getCache().get("PROJECT", key)));
			if ((obj == null)) {
				obj = this.getDao().projectSelectObjects(projectQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectSelectObjects(projectQueryCondition);
		}
	}
	
	/**
	 * <param name="projectQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Project> projectSelectObjectsWithBLOBs(ProjectExample projectQueryCondition) throws CacheException {
		if (this.needCache("PROJECT")) {
			String key = ("PROJECT_" 
						+ ("queryObject_" + this.getProjectExampleConditionSql(projectQueryCondition)));
			List<Project> obj = ((List<Project>)(this.getCache().get("PROJECT", key)));
			if ((obj == null)) {
				obj = this.getDao().projectSelectObjectsWithBLOBs(projectQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectSelectObjectsWithBLOBs(projectQueryCondition);
		}
	}
	
	/**
	 * <param name="projectQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int projectQuerySelectObjectsCount(ProjectExample projectQueryCondition) throws CacheException {
		if (this.needCache("PROJECT")) {
			String key = ("PROJECT_" 
						+ ("queryCount_" + this.getProjectExampleConditionSql(projectQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROJECT", key)));
			if ((obj == null)) {
				obj = this.getDao().projectQuerySelectObjectsCount(projectQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectQuerySelectObjectsCount(projectQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Projectcategory到数据库中
	 * <param name="projectcategory">需要插入的新对象</param>
	 */
	public int projectcategoryInsert(Projectcategory projectcategory) throws CacheException {
		int ret = this.getDao().projectcategoryInsert(projectcategory);
		if (this.needCache("PROJECTCATEGORY")) {
			this.getCache().clear("PROJECTCATEGORY");
		}
		String kvalue = "";
		kvalue = (kvalue + projectcategory.getId());
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "插入", "ID", kvalue, projectcategory, ret);
		return ret;
	}
	
	/**
	 * <param name="projectcategory">从数据库中删除一个对象Projectcategory</param>
	 * <param name="AId"></param>
	 */
	public int projectcategoryDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().projectcategoryDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="projectcategory">从数据库中删除一个对象Projectcategory</param>
	 */
	public int projectcategoryDeleteByCondition(ProjectcategoryExample projectcategoryQueryCondition) throws CacheException {
		int ret = this.getDao().projectcategoryDeleteByCondition(projectcategoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = this.getProjectcategoryExampleConditionSql(projectcategoryQueryCondition);
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "条件删除", "conditionSql", kvalue, projectcategoryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Projectcategory到数据库中
	 * <param name="projectcategory">需要更新的Projectcategory</param>
	 */
	public int projectcategoryUpdate(Projectcategory projectcategory) throws CacheException {
		int ret = this.getDao().projectcategoryUpdate(projectcategory);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectcategory.getId());
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "更新", "ID", kvalue, projectcategory, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Projectcategory到数据库中
	 * <param name="projectcategory">需要更新的Projectcategory</param>
	 */
	public int projectcategoryUpdateSelective(Projectcategory projectcategory) throws CacheException {
		int ret = this.getDao().projectcategoryUpdateSelective(projectcategory);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectcategory.getId());
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "部分更新", "ID", kvalue, projectcategory, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Projectcategory到数据库中
	 * <param name="projectcategory">需要更新的Projectcategory</param>
	 */
	public int projectcategoryUpdateWithBlobs(Projectcategory projectcategory) throws CacheException {
		int ret = this.getDao().projectcategoryUpdateWithBlobs(projectcategory);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectcategory.getId());
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "更新含Blob", "ID", kvalue, projectcategory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectcategory到数据库中
	 * <param name="projectcategoryQueryCondition">附加的条件</param>
	 * <param name="projectcategory">需要更新的Projectcategory</param>
	 */
	public int projectcategoryUpdateByCondition(Projectcategory projectcategory, ProjectcategoryExample projectcategoryQueryCondition) throws CacheException {
		int ret = this.getDao().projectcategoryUpdateByCondition(projectcategory, projectcategoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = this.getProjectcategoryExampleConditionSql(projectcategoryQueryCondition);
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "条件更新", "conditionSql", kvalue, projectcategory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectcategory到数据库中
	 * <param name="projectcategoryQueryCondition">附加的条件</param>
	 * <param name="projectcategory">需要更新的Projectcategory</param>
	 */
	public int projectcategoryUpdateSelectiveByCondition(Projectcategory projectcategory, ProjectcategoryExample projectcategoryQueryCondition) throws CacheException {
		int ret = this.getDao().projectcategoryUpdateSelectiveByCondition(projectcategory, projectcategoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTCATEGORY")) {
				this.getCache().clear("PROJECTCATEGORY");
			}
		}
		String kvalue = this.getProjectcategoryExampleConditionSql(projectcategoryQueryCondition);
		this.operatesLogSimpleAdd("PROJECTCATEGORY", "批量部分更新", "conditionSql", kvalue, projectcategory, ret);
		return ret;
	}
	
	public String getProjectcategoryExampleConditionSql(ProjectcategoryExample projectcategoryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < projectcategoryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ProjectcategoryExample.Criteria item = projectcategoryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ProjectcategoryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="projectcategory">从数据库中查询一个对象Projectcategory</param>
	 * <param name="AId"></param>
	 */
	public Projectcategory projectcategorySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROJECTCATEGORY")) {
			String key = ("PROJECTCATEGORY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Projectcategory obj = ((Projectcategory)(this.getCache().get("PROJECTCATEGORY", key)));
			if ((obj == null)) {
				obj = this.getDao().projectcategorySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROJECTCATEGORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectcategorySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="projectcategoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectcategory> projectcategorySelectObjects(ProjectcategoryExample projectcategoryQueryCondition) throws CacheException {
		if (this.needCache("PROJECTCATEGORY")) {
			String key = ("PROJECTCATEGORY_" 
						+ ("queryObject_" + this.getProjectcategoryExampleConditionSql(projectcategoryQueryCondition)));
			List<Projectcategory> obj = ((List<Projectcategory>)(this.getCache().get("PROJECTCATEGORY", key)));
			if ((obj == null)) {
				obj = this.getDao().projectcategorySelectObjects(projectcategoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTCATEGORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectcategorySelectObjects(projectcategoryQueryCondition);
		}
	}
	
	/**
	 * <param name="projectcategoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectcategory> projectcategorySelectObjectsWithBLOBs(ProjectcategoryExample projectcategoryQueryCondition) throws CacheException {
		if (this.needCache("PROJECTCATEGORY")) {
			String key = ("PROJECTCATEGORY_" 
						+ ("queryObject_" + this.getProjectcategoryExampleConditionSql(projectcategoryQueryCondition)));
			List<Projectcategory> obj = ((List<Projectcategory>)(this.getCache().get("PROJECTCATEGORY", key)));
			if ((obj == null)) {
				obj = this.getDao().projectcategorySelectObjectsWithBLOBs(projectcategoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTCATEGORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectcategorySelectObjectsWithBLOBs(projectcategoryQueryCondition);
		}
	}
	
	/**
	 * <param name="projectcategoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int projectcategoryQuerySelectObjectsCount(ProjectcategoryExample projectcategoryQueryCondition) throws CacheException {
		if (this.needCache("PROJECTCATEGORY")) {
			String key = ("PROJECTCATEGORY_" 
						+ ("queryCount_" + this.getProjectcategoryExampleConditionSql(projectcategoryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROJECTCATEGORY", key)));
			if ((obj == null)) {
				obj = this.getDao().projectcategoryQuerySelectObjectsCount(projectcategoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTCATEGORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectcategoryQuerySelectObjectsCount(projectcategoryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Projectrole到数据库中
	 * <param name="projectrole">需要插入的新对象</param>
	 */
	public int projectroleInsert(Projectrole projectrole) throws CacheException {
		int ret = this.getDao().projectroleInsert(projectrole);
		if (this.needCache("PROJECTROLE")) {
			this.getCache().clear("PROJECTROLE");
		}
		String kvalue = "";
		kvalue = (kvalue + projectrole.getId());
		this.operatesLogSimpleAdd("PROJECTROLE", "插入", "ID", kvalue, projectrole, ret);
		return ret;
	}
	
	/**
	 * <param name="projectrole">从数据库中删除一个对象Projectrole</param>
	 * <param name="AId"></param>
	 */
	public int projectroleDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().projectroleDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROJECTROLE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="projectrole">从数据库中删除一个对象Projectrole</param>
	 */
	public int projectroleDeleteByCondition(ProjectroleExample projectroleQueryCondition) throws CacheException {
		int ret = this.getDao().projectroleDeleteByCondition(projectroleQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = this.getProjectroleExampleConditionSql(projectroleQueryCondition);
		this.operatesLogSimpleAdd("PROJECTROLE", "条件删除", "conditionSql", kvalue, projectroleQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Projectrole到数据库中
	 * <param name="projectrole">需要更新的Projectrole</param>
	 */
	public int projectroleUpdate(Projectrole projectrole) throws CacheException {
		int ret = this.getDao().projectroleUpdate(projectrole);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectrole.getId());
		this.operatesLogSimpleAdd("PROJECTROLE", "更新", "ID", kvalue, projectrole, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Projectrole到数据库中
	 * <param name="projectrole">需要更新的Projectrole</param>
	 */
	public int projectroleUpdateSelective(Projectrole projectrole) throws CacheException {
		int ret = this.getDao().projectroleUpdateSelective(projectrole);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectrole.getId());
		this.operatesLogSimpleAdd("PROJECTROLE", "部分更新", "ID", kvalue, projectrole, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Projectrole到数据库中
	 * <param name="projectrole">需要更新的Projectrole</param>
	 */
	public int projectroleUpdateWithBlobs(Projectrole projectrole) throws CacheException {
		int ret = this.getDao().projectroleUpdateWithBlobs(projectrole);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectrole.getId());
		this.operatesLogSimpleAdd("PROJECTROLE", "更新含Blob", "ID", kvalue, projectrole, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectrole到数据库中
	 * <param name="projectroleQueryCondition">附加的条件</param>
	 * <param name="projectrole">需要更新的Projectrole</param>
	 */
	public int projectroleUpdateByCondition(Projectrole projectrole, ProjectroleExample projectroleQueryCondition) throws CacheException {
		int ret = this.getDao().projectroleUpdateByCondition(projectrole, projectroleQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = this.getProjectroleExampleConditionSql(projectroleQueryCondition);
		this.operatesLogSimpleAdd("PROJECTROLE", "条件更新", "conditionSql", kvalue, projectrole, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectrole到数据库中
	 * <param name="projectroleQueryCondition">附加的条件</param>
	 * <param name="projectrole">需要更新的Projectrole</param>
	 */
	public int projectroleUpdateSelectiveByCondition(Projectrole projectrole, ProjectroleExample projectroleQueryCondition) throws CacheException {
		int ret = this.getDao().projectroleUpdateSelectiveByCondition(projectrole, projectroleQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLE")) {
				this.getCache().clear("PROJECTROLE");
			}
		}
		String kvalue = this.getProjectroleExampleConditionSql(projectroleQueryCondition);
		this.operatesLogSimpleAdd("PROJECTROLE", "批量部分更新", "conditionSql", kvalue, projectrole, ret);
		return ret;
	}
	
	public String getProjectroleExampleConditionSql(ProjectroleExample projectroleQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < projectroleQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ProjectroleExample.Criteria item = projectroleQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ProjectroleExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="projectrole">从数据库中查询一个对象Projectrole</param>
	 * <param name="AId"></param>
	 */
	public Projectrole projectroleSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROJECTROLE")) {
			String key = ("PROJECTROLE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Projectrole obj = ((Projectrole)(this.getCache().get("PROJECTROLE", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="projectroleQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectrole> projectroleSelectObjects(ProjectroleExample projectroleQueryCondition) throws CacheException {
		if (this.needCache("PROJECTROLE")) {
			String key = ("PROJECTROLE_" 
						+ ("queryObject_" + this.getProjectroleExampleConditionSql(projectroleQueryCondition)));
			List<Projectrole> obj = ((List<Projectrole>)(this.getCache().get("PROJECTROLE", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleSelectObjects(projectroleQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleSelectObjects(projectroleQueryCondition);
		}
	}
	
	/**
	 * <param name="projectroleQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectrole> projectroleSelectObjectsWithBLOBs(ProjectroleExample projectroleQueryCondition) throws CacheException {
		if (this.needCache("PROJECTROLE")) {
			String key = ("PROJECTROLE_" 
						+ ("queryObject_" + this.getProjectroleExampleConditionSql(projectroleQueryCondition)));
			List<Projectrole> obj = ((List<Projectrole>)(this.getCache().get("PROJECTROLE", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleSelectObjectsWithBLOBs(projectroleQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleSelectObjectsWithBLOBs(projectroleQueryCondition);
		}
	}
	
	/**
	 * <param name="projectroleQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int projectroleQuerySelectObjectsCount(ProjectroleExample projectroleQueryCondition) throws CacheException {
		if (this.needCache("PROJECTROLE")) {
			String key = ("PROJECTROLE_" 
						+ ("queryCount_" + this.getProjectroleExampleConditionSql(projectroleQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROJECTROLE", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleQuerySelectObjectsCount(projectroleQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleQuerySelectObjectsCount(projectroleQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Projectroleactor到数据库中
	 * <param name="projectroleactor">需要插入的新对象</param>
	 */
	public int projectroleactorInsert(Projectroleactor projectroleactor) throws CacheException {
		int ret = this.getDao().projectroleactorInsert(projectroleactor);
		if (this.needCache("PROJECTROLEACTOR")) {
			this.getCache().clear("PROJECTROLEACTOR");
		}
		String kvalue = "";
		kvalue = (kvalue + projectroleactor.getId());
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "插入", "ID", kvalue, projectroleactor, ret);
		return ret;
	}
	
	/**
	 * <param name="projectroleactor">从数据库中删除一个对象Projectroleactor</param>
	 * <param name="AId"></param>
	 */
	public int projectroleactorDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().projectroleactorDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLEACTOR")) {
				this.getCache().clear("PROJECTROLEACTOR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="projectroleactor">从数据库中删除一个对象Projectroleactor</param>
	 */
	public int projectroleactorDeleteByCondition(ProjectroleactorExample projectroleactorQueryCondition) throws CacheException {
		int ret = this.getDao().projectroleactorDeleteByCondition(projectroleactorQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLEACTOR")) {
				this.getCache().clear("PROJECTROLEACTOR");
			}
		}
		String kvalue = this.getProjectroleactorExampleConditionSql(projectroleactorQueryCondition);
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "条件删除", "conditionSql", kvalue, projectroleactorQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Projectroleactor到数据库中
	 * <param name="projectroleactor">需要更新的Projectroleactor</param>
	 */
	public int projectroleactorUpdate(Projectroleactor projectroleactor) throws CacheException {
		int ret = this.getDao().projectroleactorUpdate(projectroleactor);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLEACTOR")) {
				this.getCache().clear("PROJECTROLEACTOR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectroleactor.getId());
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "更新", "ID", kvalue, projectroleactor, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Projectroleactor到数据库中
	 * <param name="projectroleactor">需要更新的Projectroleactor</param>
	 */
	public int projectroleactorUpdateSelective(Projectroleactor projectroleactor) throws CacheException {
		int ret = this.getDao().projectroleactorUpdateSelective(projectroleactor);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLEACTOR")) {
				this.getCache().clear("PROJECTROLEACTOR");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectroleactor.getId());
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "部分更新", "ID", kvalue, projectroleactor, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectroleactor到数据库中
	 * <param name="projectroleactorQueryCondition">附加的条件</param>
	 * <param name="projectroleactor">需要更新的Projectroleactor</param>
	 */
	public int projectroleactorUpdateByCondition(Projectroleactor projectroleactor, ProjectroleactorExample projectroleactorQueryCondition) throws CacheException {
		int ret = this.getDao().projectroleactorUpdateByCondition(projectroleactor, projectroleactorQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLEACTOR")) {
				this.getCache().clear("PROJECTROLEACTOR");
			}
		}
		String kvalue = this.getProjectroleactorExampleConditionSql(projectroleactorQueryCondition);
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "条件更新", "conditionSql", kvalue, projectroleactor, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectroleactor到数据库中
	 * <param name="projectroleactorQueryCondition">附加的条件</param>
	 * <param name="projectroleactor">需要更新的Projectroleactor</param>
	 */
	public int projectroleactorUpdateSelectiveByCondition(Projectroleactor projectroleactor, ProjectroleactorExample projectroleactorQueryCondition) throws CacheException {
		int ret = this.getDao().projectroleactorUpdateSelectiveByCondition(projectroleactor, projectroleactorQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTROLEACTOR")) {
				this.getCache().clear("PROJECTROLEACTOR");
			}
		}
		String kvalue = this.getProjectroleactorExampleConditionSql(projectroleactorQueryCondition);
		this.operatesLogSimpleAdd("PROJECTROLEACTOR", "批量部分更新", "conditionSql", kvalue, projectroleactor, ret);
		return ret;
	}
	
	public String getProjectroleactorExampleConditionSql(ProjectroleactorExample projectroleactorQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < projectroleactorQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ProjectroleactorExample.Criteria item = projectroleactorQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ProjectroleactorExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="projectroleactor">从数据库中查询一个对象Projectroleactor</param>
	 * <param name="AId"></param>
	 */
	public Projectroleactor projectroleactorSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROJECTROLEACTOR")) {
			String key = ("PROJECTROLEACTOR_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Projectroleactor obj = ((Projectroleactor)(this.getCache().get("PROJECTROLEACTOR", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleactorSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLEACTOR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleactorSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="projectroleactorQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectroleactor> projectroleactorSelectObjects(ProjectroleactorExample projectroleactorQueryCondition) throws CacheException {
		if (this.needCache("PROJECTROLEACTOR")) {
			String key = ("PROJECTROLEACTOR_" 
						+ ("queryObject_" + this.getProjectroleactorExampleConditionSql(projectroleactorQueryCondition)));
			List<Projectroleactor> obj = ((List<Projectroleactor>)(this.getCache().get("PROJECTROLEACTOR", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleactorSelectObjects(projectroleactorQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLEACTOR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleactorSelectObjects(projectroleactorQueryCondition);
		}
	}
	
	/**
	 * <param name="projectroleactorQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int projectroleactorQuerySelectObjectsCount(ProjectroleactorExample projectroleactorQueryCondition) throws CacheException {
		if (this.needCache("PROJECTROLEACTOR")) {
			String key = ("PROJECTROLEACTOR_" 
						+ ("queryCount_" + this.getProjectroleactorExampleConditionSql(projectroleactorQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROJECTROLEACTOR", key)));
			if ((obj == null)) {
				obj = this.getDao().projectroleactorQuerySelectObjectsCount(projectroleactorQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTROLEACTOR", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectroleactorQuerySelectObjectsCount(projectroleactorQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Projectversion到数据库中
	 * <param name="projectversion">需要插入的新对象</param>
	 */
	public int projectversionInsert(Projectversion projectversion) throws CacheException {
		int ret = this.getDao().projectversionInsert(projectversion);
		if (this.needCache("PROJECTVERSION")) {
			this.getCache().clear("PROJECTVERSION");
		}
		String kvalue = "";
		kvalue = (kvalue + projectversion.getId());
		this.operatesLogSimpleAdd("PROJECTVERSION", "插入", "ID", kvalue, projectversion, ret);
		return ret;
	}
	
	/**
	 * <param name="projectversion">从数据库中删除一个对象Projectversion</param>
	 * <param name="AId"></param>
	 */
	public int projectversionDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().projectversionDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROJECTVERSION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="projectversion">从数据库中删除一个对象Projectversion</param>
	 */
	public int projectversionDeleteByCondition(ProjectversionExample projectversionQueryCondition) throws CacheException {
		int ret = this.getDao().projectversionDeleteByCondition(projectversionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = this.getProjectversionExampleConditionSql(projectversionQueryCondition);
		this.operatesLogSimpleAdd("PROJECTVERSION", "条件删除", "conditionSql", kvalue, projectversionQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Projectversion到数据库中
	 * <param name="projectversion">需要更新的Projectversion</param>
	 */
	public int projectversionUpdate(Projectversion projectversion) throws CacheException {
		int ret = this.getDao().projectversionUpdate(projectversion);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectversion.getId());
		this.operatesLogSimpleAdd("PROJECTVERSION", "更新", "ID", kvalue, projectversion, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Projectversion到数据库中
	 * <param name="projectversion">需要更新的Projectversion</param>
	 */
	public int projectversionUpdateSelective(Projectversion projectversion) throws CacheException {
		int ret = this.getDao().projectversionUpdateSelective(projectversion);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectversion.getId());
		this.operatesLogSimpleAdd("PROJECTVERSION", "部分更新", "ID", kvalue, projectversion, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Projectversion到数据库中
	 * <param name="projectversion">需要更新的Projectversion</param>
	 */
	public int projectversionUpdateWithBlobs(Projectversion projectversion) throws CacheException {
		int ret = this.getDao().projectversionUpdateWithBlobs(projectversion);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + projectversion.getId());
		this.operatesLogSimpleAdd("PROJECTVERSION", "更新含Blob", "ID", kvalue, projectversion, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectversion到数据库中
	 * <param name="projectversionQueryCondition">附加的条件</param>
	 * <param name="projectversion">需要更新的Projectversion</param>
	 */
	public int projectversionUpdateByCondition(Projectversion projectversion, ProjectversionExample projectversionQueryCondition) throws CacheException {
		int ret = this.getDao().projectversionUpdateByCondition(projectversion, projectversionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = this.getProjectversionExampleConditionSql(projectversionQueryCondition);
		this.operatesLogSimpleAdd("PROJECTVERSION", "条件更新", "conditionSql", kvalue, projectversion, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Projectversion到数据库中
	 * <param name="projectversionQueryCondition">附加的条件</param>
	 * <param name="projectversion">需要更新的Projectversion</param>
	 */
	public int projectversionUpdateSelectiveByCondition(Projectversion projectversion, ProjectversionExample projectversionQueryCondition) throws CacheException {
		int ret = this.getDao().projectversionUpdateSelectiveByCondition(projectversion, projectversionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROJECTVERSION")) {
				this.getCache().clear("PROJECTVERSION");
			}
		}
		String kvalue = this.getProjectversionExampleConditionSql(projectversionQueryCondition);
		this.operatesLogSimpleAdd("PROJECTVERSION", "批量部分更新", "conditionSql", kvalue, projectversion, ret);
		return ret;
	}
	
	public String getProjectversionExampleConditionSql(ProjectversionExample projectversionQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < projectversionQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ProjectversionExample.Criteria item = projectversionQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ProjectversionExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="projectversion">从数据库中查询一个对象Projectversion</param>
	 * <param name="AId"></param>
	 */
	public Projectversion projectversionSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROJECTVERSION")) {
			String key = ("PROJECTVERSION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Projectversion obj = ((Projectversion)(this.getCache().get("PROJECTVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().projectversionSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROJECTVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectversionSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="projectversionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectversion> projectversionSelectObjects(ProjectversionExample projectversionQueryCondition) throws CacheException {
		if (this.needCache("PROJECTVERSION")) {
			String key = ("PROJECTVERSION_" 
						+ ("queryObject_" + this.getProjectversionExampleConditionSql(projectversionQueryCondition)));
			List<Projectversion> obj = ((List<Projectversion>)(this.getCache().get("PROJECTVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().projectversionSelectObjects(projectversionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectversionSelectObjects(projectversionQueryCondition);
		}
	}
	
	/**
	 * <param name="projectversionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Projectversion> projectversionSelectObjectsWithBLOBs(ProjectversionExample projectversionQueryCondition) throws CacheException {
		if (this.needCache("PROJECTVERSION")) {
			String key = ("PROJECTVERSION_" 
						+ ("queryObject_" + this.getProjectversionExampleConditionSql(projectversionQueryCondition)));
			List<Projectversion> obj = ((List<Projectversion>)(this.getCache().get("PROJECTVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().projectversionSelectObjectsWithBLOBs(projectversionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectversionSelectObjectsWithBLOBs(projectversionQueryCondition);
		}
	}
	
	/**
	 * <param name="projectversionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int projectversionQuerySelectObjectsCount(ProjectversionExample projectversionQueryCondition) throws CacheException {
		if (this.needCache("PROJECTVERSION")) {
			String key = ("PROJECTVERSION_" 
						+ ("queryCount_" + this.getProjectversionExampleConditionSql(projectversionQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROJECTVERSION", key)));
			if ((obj == null)) {
				obj = this.getDao().projectversionQuerySelectObjectsCount(projectversionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROJECTVERSION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().projectversionQuerySelectObjectsCount(projectversionQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertydata到数据库中
	 * <param name="propertydata">需要插入的新对象</param>
	 */
	public int propertydataInsert(Propertydata propertydata) throws CacheException {
		int ret = this.getDao().propertydataInsert(propertydata);
		if (this.needCache("PROPERTYDATA")) {
			this.getCache().clear("PROPERTYDATA");
		}
		String kvalue = "";
		kvalue = (kvalue + propertydata.getId());
		this.operatesLogSimpleAdd("PROPERTYDATA", "插入", "ID", kvalue, propertydata, ret);
		return ret;
	}
	
	/**
	 * <param name="propertydata">从数据库中删除一个对象Propertydata</param>
	 * <param name="AId"></param>
	 */
	public int propertydataDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertydataDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATA")) {
				this.getCache().clear("PROPERTYDATA");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYDATA", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertydata">从数据库中删除一个对象Propertydata</param>
	 */
	public int propertydataDeleteByCondition(PropertydataExample propertydataQueryCondition) throws CacheException {
		int ret = this.getDao().propertydataDeleteByCondition(propertydataQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATA")) {
				this.getCache().clear("PROPERTYDATA");
			}
		}
		String kvalue = this.getPropertydataExampleConditionSql(propertydataQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDATA", "条件删除", "conditionSql", kvalue, propertydataQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Propertydata到数据库中
	 * <param name="propertydata">需要更新的Propertydata</param>
	 */
	public int propertydataUpdateWithBlobs(Propertydata propertydata) throws CacheException {
		int ret = this.getDao().propertydataUpdateWithBlobs(propertydata);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATA")) {
				this.getCache().clear("PROPERTYDATA");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertydata.getId());
		this.operatesLogSimpleAdd("PROPERTYDATA", "更新含Blob", "ID", kvalue, propertydata, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertydata到数据库中
	 * <param name="propertydataQueryCondition">附加的条件</param>
	 * <param name="propertydata">需要更新的Propertydata</param>
	 */
	public int propertydataUpdateByCondition(Propertydata propertydata, PropertydataExample propertydataQueryCondition) throws CacheException {
		int ret = this.getDao().propertydataUpdateByCondition(propertydata, propertydataQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATA")) {
				this.getCache().clear("PROPERTYDATA");
			}
		}
		String kvalue = this.getPropertydataExampleConditionSql(propertydataQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDATA", "条件更新", "conditionSql", kvalue, propertydata, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertydata到数据库中
	 * <param name="propertydataQueryCondition">附加的条件</param>
	 * <param name="propertydata">需要更新的Propertydata</param>
	 */
	public int propertydataUpdateSelectiveByCondition(Propertydata propertydata, PropertydataExample propertydataQueryCondition) throws CacheException {
		int ret = this.getDao().propertydataUpdateSelectiveByCondition(propertydata, propertydataQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATA")) {
				this.getCache().clear("PROPERTYDATA");
			}
		}
		String kvalue = this.getPropertydataExampleConditionSql(propertydataQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDATA", "批量部分更新", "conditionSql", kvalue, propertydata, ret);
		return ret;
	}
	
	public String getPropertydataExampleConditionSql(PropertydataExample propertydataQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertydataQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertydataExample.Criteria item = propertydataQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertydataExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertydata">从数据库中查询一个对象Propertydata</param>
	 * <param name="AId"></param>
	 */
	public Propertydata propertydataSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYDATA")) {
			String key = ("PROPERTYDATA_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertydata obj = ((Propertydata)(this.getCache().get("PROPERTYDATA", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydataSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDATA", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydataSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertydataQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertydata> propertydataSelectObjects(PropertydataExample propertydataQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYDATA")) {
			String key = ("PROPERTYDATA_" 
						+ ("queryObject_" + this.getPropertydataExampleConditionSql(propertydataQueryCondition)));
			List<Propertydata> obj = ((List<Propertydata>)(this.getCache().get("PROPERTYDATA", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydataSelectObjects(propertydataQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDATA", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydataSelectObjects(propertydataQueryCondition);
		}
	}
	
	/**
	 * <param name="propertydataQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertydataQuerySelectObjectsCount(PropertydataExample propertydataQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYDATA")) {
			String key = ("PROPERTYDATA_" 
						+ ("queryCount_" + this.getPropertydataExampleConditionSql(propertydataQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYDATA", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydataQuerySelectObjectsCount(propertydataQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDATA", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydataQuerySelectObjectsCount(propertydataQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertydate到数据库中
	 * <param name="propertydate">需要插入的新对象</param>
	 */
	public int propertydateInsert(Propertydate propertydate) throws CacheException {
		int ret = this.getDao().propertydateInsert(propertydate);
		if (this.needCache("PROPERTYDATE")) {
			this.getCache().clear("PROPERTYDATE");
		}
		String kvalue = "";
		kvalue = (kvalue + propertydate.getId());
		this.operatesLogSimpleAdd("PROPERTYDATE", "插入", "ID", kvalue, propertydate, ret);
		return ret;
	}
	
	/**
	 * <param name="propertydate">从数据库中删除一个对象Propertydate</param>
	 * <param name="AId"></param>
	 */
	public int propertydateDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertydateDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATE")) {
				this.getCache().clear("PROPERTYDATE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYDATE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertydate">从数据库中删除一个对象Propertydate</param>
	 */
	public int propertydateDeleteByCondition(PropertydateExample propertydateQueryCondition) throws CacheException {
		int ret = this.getDao().propertydateDeleteByCondition(propertydateQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATE")) {
				this.getCache().clear("PROPERTYDATE");
			}
		}
		String kvalue = this.getPropertydateExampleConditionSql(propertydateQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDATE", "条件删除", "conditionSql", kvalue, propertydateQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Propertydate到数据库中
	 * <param name="propertydate">需要更新的Propertydate</param>
	 */
	public int propertydateUpdate(Propertydate propertydate) throws CacheException {
		int ret = this.getDao().propertydateUpdate(propertydate);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATE")) {
				this.getCache().clear("PROPERTYDATE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertydate.getId());
		this.operatesLogSimpleAdd("PROPERTYDATE", "更新", "ID", kvalue, propertydate, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Propertydate到数据库中
	 * <param name="propertydate">需要更新的Propertydate</param>
	 */
	public int propertydateUpdateSelective(Propertydate propertydate) throws CacheException {
		int ret = this.getDao().propertydateUpdateSelective(propertydate);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATE")) {
				this.getCache().clear("PROPERTYDATE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertydate.getId());
		this.operatesLogSimpleAdd("PROPERTYDATE", "部分更新", "ID", kvalue, propertydate, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertydate到数据库中
	 * <param name="propertydateQueryCondition">附加的条件</param>
	 * <param name="propertydate">需要更新的Propertydate</param>
	 */
	public int propertydateUpdateByCondition(Propertydate propertydate, PropertydateExample propertydateQueryCondition) throws CacheException {
		int ret = this.getDao().propertydateUpdateByCondition(propertydate, propertydateQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATE")) {
				this.getCache().clear("PROPERTYDATE");
			}
		}
		String kvalue = this.getPropertydateExampleConditionSql(propertydateQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDATE", "条件更新", "conditionSql", kvalue, propertydate, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertydate到数据库中
	 * <param name="propertydateQueryCondition">附加的条件</param>
	 * <param name="propertydate">需要更新的Propertydate</param>
	 */
	public int propertydateUpdateSelectiveByCondition(Propertydate propertydate, PropertydateExample propertydateQueryCondition) throws CacheException {
		int ret = this.getDao().propertydateUpdateSelectiveByCondition(propertydate, propertydateQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDATE")) {
				this.getCache().clear("PROPERTYDATE");
			}
		}
		String kvalue = this.getPropertydateExampleConditionSql(propertydateQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDATE", "批量部分更新", "conditionSql", kvalue, propertydate, ret);
		return ret;
	}
	
	public String getPropertydateExampleConditionSql(PropertydateExample propertydateQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertydateQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertydateExample.Criteria item = propertydateQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertydateExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertydate">从数据库中查询一个对象Propertydate</param>
	 * <param name="AId"></param>
	 */
	public Propertydate propertydateSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYDATE")) {
			String key = ("PROPERTYDATE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertydate obj = ((Propertydate)(this.getCache().get("PROPERTYDATE", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydateSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDATE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydateSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertydateQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertydate> propertydateSelectObjects(PropertydateExample propertydateQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYDATE")) {
			String key = ("PROPERTYDATE_" 
						+ ("queryObject_" + this.getPropertydateExampleConditionSql(propertydateQueryCondition)));
			List<Propertydate> obj = ((List<Propertydate>)(this.getCache().get("PROPERTYDATE", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydateSelectObjects(propertydateQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDATE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydateSelectObjects(propertydateQueryCondition);
		}
	}
	
	/**
	 * <param name="propertydateQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertydateQuerySelectObjectsCount(PropertydateExample propertydateQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYDATE")) {
			String key = ("PROPERTYDATE_" 
						+ ("queryCount_" + this.getPropertydateExampleConditionSql(propertydateQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYDATE", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydateQuerySelectObjectsCount(propertydateQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDATE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydateQuerySelectObjectsCount(propertydateQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertydecimal到数据库中
	 * <param name="propertydecimal">需要插入的新对象</param>
	 */
	public int propertydecimalInsert(Propertydecimal propertydecimal) throws CacheException {
		int ret = this.getDao().propertydecimalInsert(propertydecimal);
		if (this.needCache("PROPERTYDECIMAL")) {
			this.getCache().clear("PROPERTYDECIMAL");
		}
		String kvalue = "";
		kvalue = (kvalue + propertydecimal.getId());
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "插入", "ID", kvalue, propertydecimal, ret);
		return ret;
	}
	
	/**
	 * <param name="propertydecimal">从数据库中删除一个对象Propertydecimal</param>
	 * <param name="AId"></param>
	 */
	public int propertydecimalDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertydecimalDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDECIMAL")) {
				this.getCache().clear("PROPERTYDECIMAL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertydecimal">从数据库中删除一个对象Propertydecimal</param>
	 */
	public int propertydecimalDeleteByCondition(PropertydecimalExample propertydecimalQueryCondition) throws CacheException {
		int ret = this.getDao().propertydecimalDeleteByCondition(propertydecimalQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDECIMAL")) {
				this.getCache().clear("PROPERTYDECIMAL");
			}
		}
		String kvalue = this.getPropertydecimalExampleConditionSql(propertydecimalQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "条件删除", "conditionSql", kvalue, propertydecimalQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Propertydecimal到数据库中
	 * <param name="propertydecimal">需要更新的Propertydecimal</param>
	 */
	public int propertydecimalUpdate(Propertydecimal propertydecimal) throws CacheException {
		int ret = this.getDao().propertydecimalUpdate(propertydecimal);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDECIMAL")) {
				this.getCache().clear("PROPERTYDECIMAL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertydecimal.getId());
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "更新", "ID", kvalue, propertydecimal, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Propertydecimal到数据库中
	 * <param name="propertydecimal">需要更新的Propertydecimal</param>
	 */
	public int propertydecimalUpdateSelective(Propertydecimal propertydecimal) throws CacheException {
		int ret = this.getDao().propertydecimalUpdateSelective(propertydecimal);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDECIMAL")) {
				this.getCache().clear("PROPERTYDECIMAL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertydecimal.getId());
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "部分更新", "ID", kvalue, propertydecimal, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertydecimal到数据库中
	 * <param name="propertydecimalQueryCondition">附加的条件</param>
	 * <param name="propertydecimal">需要更新的Propertydecimal</param>
	 */
	public int propertydecimalUpdateByCondition(Propertydecimal propertydecimal, PropertydecimalExample propertydecimalQueryCondition) throws CacheException {
		int ret = this.getDao().propertydecimalUpdateByCondition(propertydecimal, propertydecimalQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDECIMAL")) {
				this.getCache().clear("PROPERTYDECIMAL");
			}
		}
		String kvalue = this.getPropertydecimalExampleConditionSql(propertydecimalQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "条件更新", "conditionSql", kvalue, propertydecimal, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertydecimal到数据库中
	 * <param name="propertydecimalQueryCondition">附加的条件</param>
	 * <param name="propertydecimal">需要更新的Propertydecimal</param>
	 */
	public int propertydecimalUpdateSelectiveByCondition(Propertydecimal propertydecimal, PropertydecimalExample propertydecimalQueryCondition) throws CacheException {
		int ret = this.getDao().propertydecimalUpdateSelectiveByCondition(propertydecimal, propertydecimalQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYDECIMAL")) {
				this.getCache().clear("PROPERTYDECIMAL");
			}
		}
		String kvalue = this.getPropertydecimalExampleConditionSql(propertydecimalQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYDECIMAL", "批量部分更新", "conditionSql", kvalue, propertydecimal, ret);
		return ret;
	}
	
	public String getPropertydecimalExampleConditionSql(PropertydecimalExample propertydecimalQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertydecimalQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertydecimalExample.Criteria item = propertydecimalQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertydecimalExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertydecimal">从数据库中查询一个对象Propertydecimal</param>
	 * <param name="AId"></param>
	 */
	public Propertydecimal propertydecimalSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYDECIMAL")) {
			String key = ("PROPERTYDECIMAL_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertydecimal obj = ((Propertydecimal)(this.getCache().get("PROPERTYDECIMAL", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydecimalSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDECIMAL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydecimalSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertydecimalQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertydecimal> propertydecimalSelectObjects(PropertydecimalExample propertydecimalQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYDECIMAL")) {
			String key = ("PROPERTYDECIMAL_" 
						+ ("queryObject_" + this.getPropertydecimalExampleConditionSql(propertydecimalQueryCondition)));
			List<Propertydecimal> obj = ((List<Propertydecimal>)(this.getCache().get("PROPERTYDECIMAL", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydecimalSelectObjects(propertydecimalQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDECIMAL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydecimalSelectObjects(propertydecimalQueryCondition);
		}
	}
	
	/**
	 * <param name="propertydecimalQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertydecimalQuerySelectObjectsCount(PropertydecimalExample propertydecimalQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYDECIMAL")) {
			String key = ("PROPERTYDECIMAL_" 
						+ ("queryCount_" + this.getPropertydecimalExampleConditionSql(propertydecimalQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYDECIMAL", key)));
			if ((obj == null)) {
				obj = this.getDao().propertydecimalQuerySelectObjectsCount(propertydecimalQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYDECIMAL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertydecimalQuerySelectObjectsCount(propertydecimalQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertyentry到数据库中
	 * <param name="propertyentry">需要插入的新对象</param>
	 */
	public int propertyentryInsert(Propertyentry propertyentry) throws CacheException {
		int ret = this.getDao().propertyentryInsert(propertyentry);
		if (this.needCache("PROPERTYENTRY")) {
			this.getCache().clear("PROPERTYENTRY");
		}
		String kvalue = "";
		kvalue = (kvalue + propertyentry.getId());
		this.operatesLogSimpleAdd("PROPERTYENTRY", "插入", "ID", kvalue, propertyentry, ret);
		return ret;
	}
	
	/**
	 * <param name="propertyentry">从数据库中删除一个对象Propertyentry</param>
	 * <param name="AId"></param>
	 */
	public int propertyentryDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertyentryDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYENTRY")) {
				this.getCache().clear("PROPERTYENTRY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYENTRY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertyentry">从数据库中删除一个对象Propertyentry</param>
	 */
	public int propertyentryDeleteByCondition(PropertyentryExample propertyentryQueryCondition) throws CacheException {
		int ret = this.getDao().propertyentryDeleteByCondition(propertyentryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYENTRY")) {
				this.getCache().clear("PROPERTYENTRY");
			}
		}
		String kvalue = this.getPropertyentryExampleConditionSql(propertyentryQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYENTRY", "条件删除", "conditionSql", kvalue, propertyentryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Propertyentry到数据库中
	 * <param name="propertyentry">需要更新的Propertyentry</param>
	 */
	public int propertyentryUpdate(Propertyentry propertyentry) throws CacheException {
		int ret = this.getDao().propertyentryUpdate(propertyentry);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYENTRY")) {
				this.getCache().clear("PROPERTYENTRY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertyentry.getId());
		this.operatesLogSimpleAdd("PROPERTYENTRY", "更新", "ID", kvalue, propertyentry, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Propertyentry到数据库中
	 * <param name="propertyentry">需要更新的Propertyentry</param>
	 */
	public int propertyentryUpdateSelective(Propertyentry propertyentry) throws CacheException {
		int ret = this.getDao().propertyentryUpdateSelective(propertyentry);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYENTRY")) {
				this.getCache().clear("PROPERTYENTRY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertyentry.getId());
		this.operatesLogSimpleAdd("PROPERTYENTRY", "部分更新", "ID", kvalue, propertyentry, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertyentry到数据库中
	 * <param name="propertyentryQueryCondition">附加的条件</param>
	 * <param name="propertyentry">需要更新的Propertyentry</param>
	 */
	public int propertyentryUpdateByCondition(Propertyentry propertyentry, PropertyentryExample propertyentryQueryCondition) throws CacheException {
		int ret = this.getDao().propertyentryUpdateByCondition(propertyentry, propertyentryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYENTRY")) {
				this.getCache().clear("PROPERTYENTRY");
			}
		}
		String kvalue = this.getPropertyentryExampleConditionSql(propertyentryQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYENTRY", "条件更新", "conditionSql", kvalue, propertyentry, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertyentry到数据库中
	 * <param name="propertyentryQueryCondition">附加的条件</param>
	 * <param name="propertyentry">需要更新的Propertyentry</param>
	 */
	public int propertyentryUpdateSelectiveByCondition(Propertyentry propertyentry, PropertyentryExample propertyentryQueryCondition) throws CacheException {
		int ret = this.getDao().propertyentryUpdateSelectiveByCondition(propertyentry, propertyentryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYENTRY")) {
				this.getCache().clear("PROPERTYENTRY");
			}
		}
		String kvalue = this.getPropertyentryExampleConditionSql(propertyentryQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYENTRY", "批量部分更新", "conditionSql", kvalue, propertyentry, ret);
		return ret;
	}
	
	public String getPropertyentryExampleConditionSql(PropertyentryExample propertyentryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertyentryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertyentryExample.Criteria item = propertyentryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertyentryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertyentry">从数据库中查询一个对象Propertyentry</param>
	 * <param name="AId"></param>
	 */
	public Propertyentry propertyentrySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYENTRY")) {
			String key = ("PROPERTYENTRY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertyentry obj = ((Propertyentry)(this.getCache().get("PROPERTYENTRY", key)));
			if ((obj == null)) {
				obj = this.getDao().propertyentrySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYENTRY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertyentrySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertyentryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertyentry> propertyentrySelectObjects(PropertyentryExample propertyentryQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYENTRY")) {
			String key = ("PROPERTYENTRY_" 
						+ ("queryObject_" + this.getPropertyentryExampleConditionSql(propertyentryQueryCondition)));
			List<Propertyentry> obj = ((List<Propertyentry>)(this.getCache().get("PROPERTYENTRY", key)));
			if ((obj == null)) {
				obj = this.getDao().propertyentrySelectObjects(propertyentryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYENTRY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertyentrySelectObjects(propertyentryQueryCondition);
		}
	}
	
	/**
	 * <param name="propertyentryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertyentryQuerySelectObjectsCount(PropertyentryExample propertyentryQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYENTRY")) {
			String key = ("PROPERTYENTRY_" 
						+ ("queryCount_" + this.getPropertyentryExampleConditionSql(propertyentryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYENTRY", key)));
			if ((obj == null)) {
				obj = this.getDao().propertyentryQuerySelectObjectsCount(propertyentryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYENTRY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertyentryQuerySelectObjectsCount(propertyentryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertynumber到数据库中
	 * <param name="propertynumber">需要插入的新对象</param>
	 */
	public int propertynumberInsert(Propertynumber propertynumber) throws CacheException {
		int ret = this.getDao().propertynumberInsert(propertynumber);
		if (this.needCache("PROPERTYNUMBER")) {
			this.getCache().clear("PROPERTYNUMBER");
		}
		String kvalue = "";
		kvalue = (kvalue + propertynumber.getId());
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "插入", "ID", kvalue, propertynumber, ret);
		return ret;
	}
	
	/**
	 * <param name="propertynumber">从数据库中删除一个对象Propertynumber</param>
	 * <param name="AId"></param>
	 */
	public int propertynumberDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertynumberDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYNUMBER")) {
				this.getCache().clear("PROPERTYNUMBER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertynumber">从数据库中删除一个对象Propertynumber</param>
	 */
	public int propertynumberDeleteByCondition(PropertynumberExample propertynumberQueryCondition) throws CacheException {
		int ret = this.getDao().propertynumberDeleteByCondition(propertynumberQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYNUMBER")) {
				this.getCache().clear("PROPERTYNUMBER");
			}
		}
		String kvalue = this.getPropertynumberExampleConditionSql(propertynumberQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "条件删除", "conditionSql", kvalue, propertynumberQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Propertynumber到数据库中
	 * <param name="propertynumber">需要更新的Propertynumber</param>
	 */
	public int propertynumberUpdate(Propertynumber propertynumber) throws CacheException {
		int ret = this.getDao().propertynumberUpdate(propertynumber);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYNUMBER")) {
				this.getCache().clear("PROPERTYNUMBER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertynumber.getId());
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "更新", "ID", kvalue, propertynumber, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Propertynumber到数据库中
	 * <param name="propertynumber">需要更新的Propertynumber</param>
	 */
	public int propertynumberUpdateSelective(Propertynumber propertynumber) throws CacheException {
		int ret = this.getDao().propertynumberUpdateSelective(propertynumber);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYNUMBER")) {
				this.getCache().clear("PROPERTYNUMBER");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertynumber.getId());
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "部分更新", "ID", kvalue, propertynumber, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertynumber到数据库中
	 * <param name="propertynumberQueryCondition">附加的条件</param>
	 * <param name="propertynumber">需要更新的Propertynumber</param>
	 */
	public int propertynumberUpdateByCondition(Propertynumber propertynumber, PropertynumberExample propertynumberQueryCondition) throws CacheException {
		int ret = this.getDao().propertynumberUpdateByCondition(propertynumber, propertynumberQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYNUMBER")) {
				this.getCache().clear("PROPERTYNUMBER");
			}
		}
		String kvalue = this.getPropertynumberExampleConditionSql(propertynumberQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "条件更新", "conditionSql", kvalue, propertynumber, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertynumber到数据库中
	 * <param name="propertynumberQueryCondition">附加的条件</param>
	 * <param name="propertynumber">需要更新的Propertynumber</param>
	 */
	public int propertynumberUpdateSelectiveByCondition(Propertynumber propertynumber, PropertynumberExample propertynumberQueryCondition) throws CacheException {
		int ret = this.getDao().propertynumberUpdateSelectiveByCondition(propertynumber, propertynumberQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYNUMBER")) {
				this.getCache().clear("PROPERTYNUMBER");
			}
		}
		String kvalue = this.getPropertynumberExampleConditionSql(propertynumberQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYNUMBER", "批量部分更新", "conditionSql", kvalue, propertynumber, ret);
		return ret;
	}
	
	public String getPropertynumberExampleConditionSql(PropertynumberExample propertynumberQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertynumberQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertynumberExample.Criteria item = propertynumberQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertynumberExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertynumber">从数据库中查询一个对象Propertynumber</param>
	 * <param name="AId"></param>
	 */
	public Propertynumber propertynumberSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYNUMBER")) {
			String key = ("PROPERTYNUMBER_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertynumber obj = ((Propertynumber)(this.getCache().get("PROPERTYNUMBER", key)));
			if ((obj == null)) {
				obj = this.getDao().propertynumberSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYNUMBER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertynumberSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertynumberQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertynumber> propertynumberSelectObjects(PropertynumberExample propertynumberQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYNUMBER")) {
			String key = ("PROPERTYNUMBER_" 
						+ ("queryObject_" + this.getPropertynumberExampleConditionSql(propertynumberQueryCondition)));
			List<Propertynumber> obj = ((List<Propertynumber>)(this.getCache().get("PROPERTYNUMBER", key)));
			if ((obj == null)) {
				obj = this.getDao().propertynumberSelectObjects(propertynumberQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYNUMBER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertynumberSelectObjects(propertynumberQueryCondition);
		}
	}
	
	/**
	 * <param name="propertynumberQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertynumberQuerySelectObjectsCount(PropertynumberExample propertynumberQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYNUMBER")) {
			String key = ("PROPERTYNUMBER_" 
						+ ("queryCount_" + this.getPropertynumberExampleConditionSql(propertynumberQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYNUMBER", key)));
			if ((obj == null)) {
				obj = this.getDao().propertynumberQuerySelectObjectsCount(propertynumberQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYNUMBER", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertynumberQuerySelectObjectsCount(propertynumberQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertystring到数据库中
	 * <param name="propertystring">需要插入的新对象</param>
	 */
	public int propertystringInsert(Propertystring propertystring) throws CacheException {
		int ret = this.getDao().propertystringInsert(propertystring);
		if (this.needCache("PROPERTYSTRING")) {
			this.getCache().clear("PROPERTYSTRING");
		}
		String kvalue = "";
		kvalue = (kvalue + propertystring.getId());
		this.operatesLogSimpleAdd("PROPERTYSTRING", "插入", "ID", kvalue, propertystring, ret);
		return ret;
	}
	
	/**
	 * <param name="propertystring">从数据库中删除一个对象Propertystring</param>
	 * <param name="AId"></param>
	 */
	public int propertystringDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertystringDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYSTRING")) {
				this.getCache().clear("PROPERTYSTRING");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYSTRING", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertystring">从数据库中删除一个对象Propertystring</param>
	 */
	public int propertystringDeleteByCondition(PropertystringExample propertystringQueryCondition) throws CacheException {
		int ret = this.getDao().propertystringDeleteByCondition(propertystringQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYSTRING")) {
				this.getCache().clear("PROPERTYSTRING");
			}
		}
		String kvalue = this.getPropertystringExampleConditionSql(propertystringQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYSTRING", "条件删除", "conditionSql", kvalue, propertystringQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Propertystring到数据库中
	 * <param name="propertystring">需要更新的Propertystring</param>
	 */
	public int propertystringUpdateWithBlobs(Propertystring propertystring) throws CacheException {
		int ret = this.getDao().propertystringUpdateWithBlobs(propertystring);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYSTRING")) {
				this.getCache().clear("PROPERTYSTRING");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertystring.getId());
		this.operatesLogSimpleAdd("PROPERTYSTRING", "更新含Blob", "ID", kvalue, propertystring, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertystring到数据库中
	 * <param name="propertystringQueryCondition">附加的条件</param>
	 * <param name="propertystring">需要更新的Propertystring</param>
	 */
	public int propertystringUpdateByCondition(Propertystring propertystring, PropertystringExample propertystringQueryCondition) throws CacheException {
		int ret = this.getDao().propertystringUpdateByCondition(propertystring, propertystringQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYSTRING")) {
				this.getCache().clear("PROPERTYSTRING");
			}
		}
		String kvalue = this.getPropertystringExampleConditionSql(propertystringQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYSTRING", "条件更新", "conditionSql", kvalue, propertystring, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertystring到数据库中
	 * <param name="propertystringQueryCondition">附加的条件</param>
	 * <param name="propertystring">需要更新的Propertystring</param>
	 */
	public int propertystringUpdateSelectiveByCondition(Propertystring propertystring, PropertystringExample propertystringQueryCondition) throws CacheException {
		int ret = this.getDao().propertystringUpdateSelectiveByCondition(propertystring, propertystringQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYSTRING")) {
				this.getCache().clear("PROPERTYSTRING");
			}
		}
		String kvalue = this.getPropertystringExampleConditionSql(propertystringQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYSTRING", "批量部分更新", "conditionSql", kvalue, propertystring, ret);
		return ret;
	}
	
	public String getPropertystringExampleConditionSql(PropertystringExample propertystringQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertystringQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertystringExample.Criteria item = propertystringQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertystringExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertystring">从数据库中查询一个对象Propertystring</param>
	 * <param name="AId"></param>
	 */
	public Propertystring propertystringSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYSTRING")) {
			String key = ("PROPERTYSTRING_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertystring obj = ((Propertystring)(this.getCache().get("PROPERTYSTRING", key)));
			if ((obj == null)) {
				obj = this.getDao().propertystringSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYSTRING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertystringSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertystringQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertystring> propertystringSelectObjects(PropertystringExample propertystringQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYSTRING")) {
			String key = ("PROPERTYSTRING_" 
						+ ("queryObject_" + this.getPropertystringExampleConditionSql(propertystringQueryCondition)));
			List<Propertystring> obj = ((List<Propertystring>)(this.getCache().get("PROPERTYSTRING", key)));
			if ((obj == null)) {
				obj = this.getDao().propertystringSelectObjects(propertystringQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYSTRING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertystringSelectObjects(propertystringQueryCondition);
		}
	}
	
	/**
	 * <param name="propertystringQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertystring> propertystringSelectObjectsWithBLOBs(PropertystringExample propertystringQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYSTRING")) {
			String key = ("PROPERTYSTRING_" 
						+ ("queryObject_" + this.getPropertystringExampleConditionSql(propertystringQueryCondition)));
			List<Propertystring> obj = ((List<Propertystring>)(this.getCache().get("PROPERTYSTRING", key)));
			if ((obj == null)) {
				obj = this.getDao().propertystringSelectObjectsWithBLOBs(propertystringQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYSTRING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertystringSelectObjectsWithBLOBs(propertystringQueryCondition);
		}
	}
	
	/**
	 * <param name="propertystringQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertystringQuerySelectObjectsCount(PropertystringExample propertystringQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYSTRING")) {
			String key = ("PROPERTYSTRING_" 
						+ ("queryCount_" + this.getPropertystringExampleConditionSql(propertystringQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYSTRING", key)));
			if ((obj == null)) {
				obj = this.getDao().propertystringQuerySelectObjectsCount(propertystringQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYSTRING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertystringQuerySelectObjectsCount(propertystringQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Propertytext到数据库中
	 * <param name="propertytext">需要插入的新对象</param>
	 */
	public int propertytextInsert(Propertytext propertytext) throws CacheException {
		int ret = this.getDao().propertytextInsert(propertytext);
		if (this.needCache("PROPERTYTEXT")) {
			this.getCache().clear("PROPERTYTEXT");
		}
		String kvalue = "";
		kvalue = (kvalue + propertytext.getId());
		this.operatesLogSimpleAdd("PROPERTYTEXT", "插入", "ID", kvalue, propertytext, ret);
		return ret;
	}
	
	/**
	 * <param name="propertytext">从数据库中删除一个对象Propertytext</param>
	 * <param name="AId"></param>
	 */
	public int propertytextDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().propertytextDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYTEXT")) {
				this.getCache().clear("PROPERTYTEXT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("PROPERTYTEXT", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="propertytext">从数据库中删除一个对象Propertytext</param>
	 */
	public int propertytextDeleteByCondition(PropertytextExample propertytextQueryCondition) throws CacheException {
		int ret = this.getDao().propertytextDeleteByCondition(propertytextQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYTEXT")) {
				this.getCache().clear("PROPERTYTEXT");
			}
		}
		String kvalue = this.getPropertytextExampleConditionSql(propertytextQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYTEXT", "条件删除", "conditionSql", kvalue, propertytextQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Propertytext到数据库中
	 * <param name="propertytext">需要更新的Propertytext</param>
	 */
	public int propertytextUpdateWithBlobs(Propertytext propertytext) throws CacheException {
		int ret = this.getDao().propertytextUpdateWithBlobs(propertytext);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYTEXT")) {
				this.getCache().clear("PROPERTYTEXT");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + propertytext.getId());
		this.operatesLogSimpleAdd("PROPERTYTEXT", "更新含Blob", "ID", kvalue, propertytext, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertytext到数据库中
	 * <param name="propertytextQueryCondition">附加的条件</param>
	 * <param name="propertytext">需要更新的Propertytext</param>
	 */
	public int propertytextUpdateByCondition(Propertytext propertytext, PropertytextExample propertytextQueryCondition) throws CacheException {
		int ret = this.getDao().propertytextUpdateByCondition(propertytext, propertytextQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYTEXT")) {
				this.getCache().clear("PROPERTYTEXT");
			}
		}
		String kvalue = this.getPropertytextExampleConditionSql(propertytextQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYTEXT", "条件更新", "conditionSql", kvalue, propertytext, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Propertytext到数据库中
	 * <param name="propertytextQueryCondition">附加的条件</param>
	 * <param name="propertytext">需要更新的Propertytext</param>
	 */
	public int propertytextUpdateSelectiveByCondition(Propertytext propertytext, PropertytextExample propertytextQueryCondition) throws CacheException {
		int ret = this.getDao().propertytextUpdateSelectiveByCondition(propertytext, propertytextQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("PROPERTYTEXT")) {
				this.getCache().clear("PROPERTYTEXT");
			}
		}
		String kvalue = this.getPropertytextExampleConditionSql(propertytextQueryCondition);
		this.operatesLogSimpleAdd("PROPERTYTEXT", "批量部分更新", "conditionSql", kvalue, propertytext, ret);
		return ret;
	}
	
	public String getPropertytextExampleConditionSql(PropertytextExample propertytextQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < propertytextQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			PropertytextExample.Criteria item = propertytextQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					PropertytextExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="propertytext">从数据库中查询一个对象Propertytext</param>
	 * <param name="AId"></param>
	 */
	public Propertytext propertytextSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("PROPERTYTEXT")) {
			String key = ("PROPERTYTEXT_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Propertytext obj = ((Propertytext)(this.getCache().get("PROPERTYTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().propertytextSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("PROPERTYTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertytextSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="propertytextQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertytext> propertytextSelectObjects(PropertytextExample propertytextQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYTEXT")) {
			String key = ("PROPERTYTEXT_" 
						+ ("queryObject_" + this.getPropertytextExampleConditionSql(propertytextQueryCondition)));
			List<Propertytext> obj = ((List<Propertytext>)(this.getCache().get("PROPERTYTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().propertytextSelectObjects(propertytextQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertytextSelectObjects(propertytextQueryCondition);
		}
	}
	
	/**
	 * <param name="propertytextQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Propertytext> propertytextSelectObjectsWithBLOBs(PropertytextExample propertytextQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYTEXT")) {
			String key = ("PROPERTYTEXT_" 
						+ ("queryObject_" + this.getPropertytextExampleConditionSql(propertytextQueryCondition)));
			List<Propertytext> obj = ((List<Propertytext>)(this.getCache().get("PROPERTYTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().propertytextSelectObjectsWithBLOBs(propertytextQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertytextSelectObjectsWithBLOBs(propertytextQueryCondition);
		}
	}
	
	/**
	 * <param name="propertytextQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int propertytextQuerySelectObjectsCount(PropertytextExample propertytextQueryCondition) throws CacheException {
		if (this.needCache("PROPERTYTEXT")) {
			String key = ("PROPERTYTEXT_" 
						+ ("queryCount_" + this.getPropertytextExampleConditionSql(propertytextQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("PROPERTYTEXT", key)));
			if ((obj == null)) {
				obj = this.getDao().propertytextQuerySelectObjectsCount(propertytextQueryCondition);
				if ((obj != null)) {
					this.getCache().put("PROPERTYTEXT", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().propertytextQuerySelectObjectsCount(propertytextQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzCalendars到数据库中
	 * <param name="qrtzCalendars">需要插入的新对象</param>
	 */
	public int qrtzCalendarsInsert(QrtzCalendars qrtzCalendars) throws CacheException {
		int ret = this.getDao().qrtzCalendarsInsert(qrtzCalendars);
		if (this.needCache("QRTZ_CALENDARS")) {
			this.getCache().clear("QRTZ_CALENDARS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCalendars.getCalendarName());
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "插入", "CALENDAR_NAME", kvalue, qrtzCalendars, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzCalendars">从数据库中删除一个对象QrtzCalendars</param>
	 * <param name="ACalendarName"></param>
	 */
	public int qrtzCalendarsDeleteByPrimaryKey(String ACalendarName) throws CacheException {
		int ret = this.getDao().qrtzCalendarsDeleteByPrimaryKey(ACalendarName);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ACalendarName);
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "删除", "CALENDAR_NAME", kvalue, ACalendarName, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzCalendars">从数据库中删除一个对象QrtzCalendars</param>
	 */
	public int qrtzCalendarsDeleteByCondition(QrtzCalendarsExample qrtzCalendarsQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzCalendarsDeleteByCondition(qrtzCalendarsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = this.getQrtzCalendarsExampleConditionSql(qrtzCalendarsQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "条件删除", "conditionSql", kvalue, qrtzCalendarsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzCalendars到数据库中
	 * <param name="qrtzCalendars">需要更新的QrtzCalendars</param>
	 */
	public int qrtzCalendarsUpdate(QrtzCalendars qrtzCalendars) throws CacheException {
		int ret = this.getDao().qrtzCalendarsUpdate(qrtzCalendars);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCalendars.getCalendarName());
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "更新", "CALENDAR_NAME", kvalue, qrtzCalendars, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzCalendars到数据库中
	 * <param name="qrtzCalendars">需要更新的QrtzCalendars</param>
	 */
	public int qrtzCalendarsUpdateSelective(QrtzCalendars qrtzCalendars) throws CacheException {
		int ret = this.getDao().qrtzCalendarsUpdateSelective(qrtzCalendars);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCalendars.getCalendarName());
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "部分更新", "CALENDAR_NAME", kvalue, qrtzCalendars, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段QrtzCalendars到数据库中
	 * <param name="qrtzCalendars">需要更新的QrtzCalendars</param>
	 */
	public int qrtzCalendarsUpdateWithBlobs(QrtzCalendars qrtzCalendars) throws CacheException {
		int ret = this.getDao().qrtzCalendarsUpdateWithBlobs(qrtzCalendars);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCalendars.getCalendarName());
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "更新含Blob", "CALENDAR_NAME", kvalue, qrtzCalendars, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzCalendars到数据库中
	 * <param name="qrtzCalendarsQueryCondition">附加的条件</param>
	 * <param name="qrtzCalendars">需要更新的QrtzCalendars</param>
	 */
	public int qrtzCalendarsUpdateByCondition(QrtzCalendars qrtzCalendars, QrtzCalendarsExample qrtzCalendarsQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzCalendarsUpdateByCondition(qrtzCalendars, qrtzCalendarsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = this.getQrtzCalendarsExampleConditionSql(qrtzCalendarsQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "条件更新", "conditionSql", kvalue, qrtzCalendars, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzCalendars到数据库中
	 * <param name="qrtzCalendarsQueryCondition">附加的条件</param>
	 * <param name="qrtzCalendars">需要更新的QrtzCalendars</param>
	 */
	public int qrtzCalendarsUpdateSelectiveByCondition(QrtzCalendars qrtzCalendars, QrtzCalendarsExample qrtzCalendarsQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzCalendarsUpdateSelectiveByCondition(qrtzCalendars, qrtzCalendarsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CALENDARS")) {
				this.getCache().clear("QRTZ_CALENDARS");
			}
		}
		String kvalue = this.getQrtzCalendarsExampleConditionSql(qrtzCalendarsQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_CALENDARS", "批量部分更新", "conditionSql", kvalue, qrtzCalendars, ret);
		return ret;
	}
	
	public String getQrtzCalendarsExampleConditionSql(QrtzCalendarsExample qrtzCalendarsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzCalendarsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzCalendarsExample.Criteria item = qrtzCalendarsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzCalendarsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzCalendars">从数据库中查询一个对象QrtzCalendars</param>
	 * <param name="ACalendarName"></param>
	 */
	public QrtzCalendars qrtzCalendarsSelectByPrimaryKey(String ACalendarName) throws CacheException {
		if (this.needCache("QRTZ_CALENDARS")) {
			String key = ("QRTZ_CALENDARS_" 
						+ (("_BYUNIINDEX_" + ACalendarName) 
						+ "_"));
			QrtzCalendars obj = ((QrtzCalendars)(this.getCache().get("QRTZ_CALENDARS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCalendarsSelectByPrimaryKey(ACalendarName);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CALENDARS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCalendarsSelectByPrimaryKey(ACalendarName);
		}
	}
	
	/**
	 * <param name="qrtzCalendarsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzCalendars> qrtzCalendarsSelectObjects(QrtzCalendarsExample qrtzCalendarsQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_CALENDARS")) {
			String key = ("QRTZ_CALENDARS_" 
						+ ("queryObject_" + this.getQrtzCalendarsExampleConditionSql(qrtzCalendarsQueryCondition)));
			List<QrtzCalendars> obj = ((List<QrtzCalendars>)(this.getCache().get("QRTZ_CALENDARS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCalendarsSelectObjects(qrtzCalendarsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CALENDARS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCalendarsSelectObjects(qrtzCalendarsQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzCalendarsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzCalendars> qrtzCalendarsSelectObjectsWithBLOBs(QrtzCalendarsExample qrtzCalendarsQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_CALENDARS")) {
			String key = ("QRTZ_CALENDARS_" 
						+ ("queryObject_" + this.getQrtzCalendarsExampleConditionSql(qrtzCalendarsQueryCondition)));
			List<QrtzCalendars> obj = ((List<QrtzCalendars>)(this.getCache().get("QRTZ_CALENDARS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCalendarsSelectObjectsWithBLOBs(qrtzCalendarsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CALENDARS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCalendarsSelectObjectsWithBLOBs(qrtzCalendarsQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzCalendarsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzCalendarsQuerySelectObjectsCount(QrtzCalendarsExample qrtzCalendarsQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_CALENDARS")) {
			String key = ("QRTZ_CALENDARS_" 
						+ ("queryCount_" + this.getQrtzCalendarsExampleConditionSql(qrtzCalendarsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_CALENDARS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCalendarsQuerySelectObjectsCount(qrtzCalendarsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CALENDARS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCalendarsQuerySelectObjectsCount(qrtzCalendarsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzCronTriggers到数据库中
	 * <param name="qrtzCronTriggers">需要插入的新对象</param>
	 */
	public int qrtzCronTriggersInsert(QrtzCronTriggers qrtzCronTriggers) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersInsert(qrtzCronTriggers);
		if (this.needCache("QRTZ_CRON_TRIGGERS")) {
			this.getCache().clear("QRTZ_CRON_TRIGGERS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCronTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "插入", "ID", kvalue, qrtzCronTriggers, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzCronTriggers">从数据库中删除一个对象QrtzCronTriggers</param>
	 * <param name="AId"></param>
	 */
	public int qrtzCronTriggersDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CRON_TRIGGERS")) {
				this.getCache().clear("QRTZ_CRON_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzCronTriggers">从数据库中删除一个对象QrtzCronTriggers</param>
	 */
	public int qrtzCronTriggersDeleteByCondition(QrtzCronTriggersExample qrtzCronTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersDeleteByCondition(qrtzCronTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CRON_TRIGGERS")) {
				this.getCache().clear("QRTZ_CRON_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzCronTriggersExampleConditionSql(qrtzCronTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "条件删除", "conditionSql", kvalue, qrtzCronTriggersQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzCronTriggers到数据库中
	 * <param name="qrtzCronTriggers">需要更新的QrtzCronTriggers</param>
	 */
	public int qrtzCronTriggersUpdate(QrtzCronTriggers qrtzCronTriggers) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersUpdate(qrtzCronTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CRON_TRIGGERS")) {
				this.getCache().clear("QRTZ_CRON_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCronTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "更新", "ID", kvalue, qrtzCronTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzCronTriggers到数据库中
	 * <param name="qrtzCronTriggers">需要更新的QrtzCronTriggers</param>
	 */
	public int qrtzCronTriggersUpdateSelective(QrtzCronTriggers qrtzCronTriggers) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersUpdateSelective(qrtzCronTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CRON_TRIGGERS")) {
				this.getCache().clear("QRTZ_CRON_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzCronTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "部分更新", "ID", kvalue, qrtzCronTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzCronTriggers到数据库中
	 * <param name="qrtzCronTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzCronTriggers">需要更新的QrtzCronTriggers</param>
	 */
	public int qrtzCronTriggersUpdateByCondition(QrtzCronTriggers qrtzCronTriggers, QrtzCronTriggersExample qrtzCronTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersUpdateByCondition(qrtzCronTriggers, qrtzCronTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CRON_TRIGGERS")) {
				this.getCache().clear("QRTZ_CRON_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzCronTriggersExampleConditionSql(qrtzCronTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "条件更新", "conditionSql", kvalue, qrtzCronTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzCronTriggers到数据库中
	 * <param name="qrtzCronTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzCronTriggers">需要更新的QrtzCronTriggers</param>
	 */
	public int qrtzCronTriggersUpdateSelectiveByCondition(QrtzCronTriggers qrtzCronTriggers, QrtzCronTriggersExample qrtzCronTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzCronTriggersUpdateSelectiveByCondition(qrtzCronTriggers, qrtzCronTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_CRON_TRIGGERS")) {
				this.getCache().clear("QRTZ_CRON_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzCronTriggersExampleConditionSql(qrtzCronTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_CRON_TRIGGERS", "批量部分更新", "conditionSql", kvalue, qrtzCronTriggers, ret);
		return ret;
	}
	
	public String getQrtzCronTriggersExampleConditionSql(QrtzCronTriggersExample qrtzCronTriggersQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzCronTriggersQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzCronTriggersExample.Criteria item = qrtzCronTriggersQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzCronTriggersExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzCronTriggers">从数据库中查询一个对象QrtzCronTriggers</param>
	 * <param name="AId"></param>
	 */
	public QrtzCronTriggers qrtzCronTriggersSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("QRTZ_CRON_TRIGGERS")) {
			String key = ("QRTZ_CRON_TRIGGERS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			QrtzCronTriggers obj = ((QrtzCronTriggers)(this.getCache().get("QRTZ_CRON_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCronTriggersSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CRON_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCronTriggersSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="qrtzCronTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzCronTriggers> qrtzCronTriggersSelectObjects(QrtzCronTriggersExample qrtzCronTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_CRON_TRIGGERS")) {
			String key = ("QRTZ_CRON_TRIGGERS_" 
						+ ("queryObject_" + this.getQrtzCronTriggersExampleConditionSql(qrtzCronTriggersQueryCondition)));
			List<QrtzCronTriggers> obj = ((List<QrtzCronTriggers>)(this.getCache().get("QRTZ_CRON_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCronTriggersSelectObjects(qrtzCronTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CRON_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCronTriggersSelectObjects(qrtzCronTriggersQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzCronTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzCronTriggersQuerySelectObjectsCount(QrtzCronTriggersExample qrtzCronTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_CRON_TRIGGERS")) {
			String key = ("QRTZ_CRON_TRIGGERS_" 
						+ ("queryCount_" + this.getQrtzCronTriggersExampleConditionSql(qrtzCronTriggersQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_CRON_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzCronTriggersQuerySelectObjectsCount(qrtzCronTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_CRON_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzCronTriggersQuerySelectObjectsCount(qrtzCronTriggersQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzFiredTriggers到数据库中
	 * <param name="qrtzFiredTriggers">需要插入的新对象</param>
	 */
	public int qrtzFiredTriggersInsert(QrtzFiredTriggers qrtzFiredTriggers) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersInsert(qrtzFiredTriggers);
		if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
			this.getCache().clear("QRTZ_FIRED_TRIGGERS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzFiredTriggers.getEntryId());
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "插入", "ENTRY_ID", kvalue, qrtzFiredTriggers, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzFiredTriggers">从数据库中删除一个对象QrtzFiredTriggers</param>
	 * <param name="AEntryId"></param>
	 */
	public int qrtzFiredTriggersDeleteByPrimaryKey(String AEntryId) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersDeleteByPrimaryKey(AEntryId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
				this.getCache().clear("QRTZ_FIRED_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AEntryId);
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "删除", "ENTRY_ID", kvalue, AEntryId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzFiredTriggers">从数据库中删除一个对象QrtzFiredTriggers</param>
	 */
	public int qrtzFiredTriggersDeleteByCondition(QrtzFiredTriggersExample qrtzFiredTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersDeleteByCondition(qrtzFiredTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
				this.getCache().clear("QRTZ_FIRED_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzFiredTriggersExampleConditionSql(qrtzFiredTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "条件删除", "conditionSql", kvalue, qrtzFiredTriggersQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzFiredTriggers到数据库中
	 * <param name="qrtzFiredTriggers">需要更新的QrtzFiredTriggers</param>
	 */
	public int qrtzFiredTriggersUpdate(QrtzFiredTriggers qrtzFiredTriggers) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersUpdate(qrtzFiredTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
				this.getCache().clear("QRTZ_FIRED_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzFiredTriggers.getEntryId());
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "更新", "ENTRY_ID", kvalue, qrtzFiredTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzFiredTriggers到数据库中
	 * <param name="qrtzFiredTriggers">需要更新的QrtzFiredTriggers</param>
	 */
	public int qrtzFiredTriggersUpdateSelective(QrtzFiredTriggers qrtzFiredTriggers) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersUpdateSelective(qrtzFiredTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
				this.getCache().clear("QRTZ_FIRED_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzFiredTriggers.getEntryId());
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "部分更新", "ENTRY_ID", kvalue, qrtzFiredTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzFiredTriggers到数据库中
	 * <param name="qrtzFiredTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzFiredTriggers">需要更新的QrtzFiredTriggers</param>
	 */
	public int qrtzFiredTriggersUpdateByCondition(QrtzFiredTriggers qrtzFiredTriggers, QrtzFiredTriggersExample qrtzFiredTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersUpdateByCondition(qrtzFiredTriggers, qrtzFiredTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
				this.getCache().clear("QRTZ_FIRED_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzFiredTriggersExampleConditionSql(qrtzFiredTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "条件更新", "conditionSql", kvalue, qrtzFiredTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzFiredTriggers到数据库中
	 * <param name="qrtzFiredTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzFiredTriggers">需要更新的QrtzFiredTriggers</param>
	 */
	public int qrtzFiredTriggersUpdateSelectiveByCondition(QrtzFiredTriggers qrtzFiredTriggers, QrtzFiredTriggersExample qrtzFiredTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzFiredTriggersUpdateSelectiveByCondition(qrtzFiredTriggers, qrtzFiredTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
				this.getCache().clear("QRTZ_FIRED_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzFiredTriggersExampleConditionSql(qrtzFiredTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_FIRED_TRIGGERS", "批量部分更新", "conditionSql", kvalue, qrtzFiredTriggers, ret);
		return ret;
	}
	
	public String getQrtzFiredTriggersExampleConditionSql(QrtzFiredTriggersExample qrtzFiredTriggersQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzFiredTriggersQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzFiredTriggersExample.Criteria item = qrtzFiredTriggersQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzFiredTriggersExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzFiredTriggers">从数据库中查询一个对象QrtzFiredTriggers</param>
	 * <param name="AEntryId"></param>
	 */
	public QrtzFiredTriggers qrtzFiredTriggersSelectByPrimaryKey(String AEntryId) throws CacheException {
		if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
			String key = ("QRTZ_FIRED_TRIGGERS_" 
						+ (("_BYUNIINDEX_" + AEntryId) 
						+ "_"));
			QrtzFiredTriggers obj = ((QrtzFiredTriggers)(this.getCache().get("QRTZ_FIRED_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzFiredTriggersSelectByPrimaryKey(AEntryId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_FIRED_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzFiredTriggersSelectByPrimaryKey(AEntryId);
		}
	}
	
	/**
	 * <param name="qrtzFiredTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzFiredTriggers> qrtzFiredTriggersSelectObjects(QrtzFiredTriggersExample qrtzFiredTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
			String key = ("QRTZ_FIRED_TRIGGERS_" 
						+ ("queryObject_" + this.getQrtzFiredTriggersExampleConditionSql(qrtzFiredTriggersQueryCondition)));
			List<QrtzFiredTriggers> obj = ((List<QrtzFiredTriggers>)(this.getCache().get("QRTZ_FIRED_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzFiredTriggersSelectObjects(qrtzFiredTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_FIRED_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzFiredTriggersSelectObjects(qrtzFiredTriggersQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzFiredTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzFiredTriggersQuerySelectObjectsCount(QrtzFiredTriggersExample qrtzFiredTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_FIRED_TRIGGERS")) {
			String key = ("QRTZ_FIRED_TRIGGERS_" 
						+ ("queryCount_" + this.getQrtzFiredTriggersExampleConditionSql(qrtzFiredTriggersQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_FIRED_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzFiredTriggersQuerySelectObjectsCount(qrtzFiredTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_FIRED_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzFiredTriggersQuerySelectObjectsCount(qrtzFiredTriggersQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzJobDetails到数据库中
	 * <param name="qrtzJobDetails">需要插入的新对象</param>
	 */
	public int qrtzJobDetailsInsert(QrtzJobDetails qrtzJobDetails) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsInsert(qrtzJobDetails);
		if (this.needCache("QRTZ_JOB_DETAILS")) {
			this.getCache().clear("QRTZ_JOB_DETAILS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzJobDetails.getId());
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "插入", "ID", kvalue, qrtzJobDetails, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzJobDetails">从数据库中删除一个对象QrtzJobDetails</param>
	 * <param name="AId"></param>
	 */
	public int qrtzJobDetailsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_DETAILS")) {
				this.getCache().clear("QRTZ_JOB_DETAILS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzJobDetails">从数据库中删除一个对象QrtzJobDetails</param>
	 */
	public int qrtzJobDetailsDeleteByCondition(QrtzJobDetailsExample qrtzJobDetailsQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsDeleteByCondition(qrtzJobDetailsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_DETAILS")) {
				this.getCache().clear("QRTZ_JOB_DETAILS");
			}
		}
		String kvalue = this.getQrtzJobDetailsExampleConditionSql(qrtzJobDetailsQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "条件删除", "conditionSql", kvalue, qrtzJobDetailsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzJobDetails到数据库中
	 * <param name="qrtzJobDetails">需要更新的QrtzJobDetails</param>
	 */
	public int qrtzJobDetailsUpdate(QrtzJobDetails qrtzJobDetails) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsUpdate(qrtzJobDetails);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_DETAILS")) {
				this.getCache().clear("QRTZ_JOB_DETAILS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzJobDetails.getId());
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "更新", "ID", kvalue, qrtzJobDetails, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzJobDetails到数据库中
	 * <param name="qrtzJobDetails">需要更新的QrtzJobDetails</param>
	 */
	public int qrtzJobDetailsUpdateSelective(QrtzJobDetails qrtzJobDetails) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsUpdateSelective(qrtzJobDetails);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_DETAILS")) {
				this.getCache().clear("QRTZ_JOB_DETAILS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzJobDetails.getId());
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "部分更新", "ID", kvalue, qrtzJobDetails, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzJobDetails到数据库中
	 * <param name="qrtzJobDetailsQueryCondition">附加的条件</param>
	 * <param name="qrtzJobDetails">需要更新的QrtzJobDetails</param>
	 */
	public int qrtzJobDetailsUpdateByCondition(QrtzJobDetails qrtzJobDetails, QrtzJobDetailsExample qrtzJobDetailsQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsUpdateByCondition(qrtzJobDetails, qrtzJobDetailsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_DETAILS")) {
				this.getCache().clear("QRTZ_JOB_DETAILS");
			}
		}
		String kvalue = this.getQrtzJobDetailsExampleConditionSql(qrtzJobDetailsQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "条件更新", "conditionSql", kvalue, qrtzJobDetails, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzJobDetails到数据库中
	 * <param name="qrtzJobDetailsQueryCondition">附加的条件</param>
	 * <param name="qrtzJobDetails">需要更新的QrtzJobDetails</param>
	 */
	public int qrtzJobDetailsUpdateSelectiveByCondition(QrtzJobDetails qrtzJobDetails, QrtzJobDetailsExample qrtzJobDetailsQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzJobDetailsUpdateSelectiveByCondition(qrtzJobDetails, qrtzJobDetailsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_DETAILS")) {
				this.getCache().clear("QRTZ_JOB_DETAILS");
			}
		}
		String kvalue = this.getQrtzJobDetailsExampleConditionSql(qrtzJobDetailsQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_JOB_DETAILS", "批量部分更新", "conditionSql", kvalue, qrtzJobDetails, ret);
		return ret;
	}
	
	public String getQrtzJobDetailsExampleConditionSql(QrtzJobDetailsExample qrtzJobDetailsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzJobDetailsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzJobDetailsExample.Criteria item = qrtzJobDetailsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzJobDetailsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzJobDetails">从数据库中查询一个对象QrtzJobDetails</param>
	 * <param name="AId"></param>
	 */
	public QrtzJobDetails qrtzJobDetailsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("QRTZ_JOB_DETAILS")) {
			String key = ("QRTZ_JOB_DETAILS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			QrtzJobDetails obj = ((QrtzJobDetails)(this.getCache().get("QRTZ_JOB_DETAILS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzJobDetailsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_JOB_DETAILS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzJobDetailsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="qrtzJobDetailsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzJobDetails> qrtzJobDetailsSelectObjects(QrtzJobDetailsExample qrtzJobDetailsQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_JOB_DETAILS")) {
			String key = ("QRTZ_JOB_DETAILS_" 
						+ ("queryObject_" + this.getQrtzJobDetailsExampleConditionSql(qrtzJobDetailsQueryCondition)));
			List<QrtzJobDetails> obj = ((List<QrtzJobDetails>)(this.getCache().get("QRTZ_JOB_DETAILS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzJobDetailsSelectObjects(qrtzJobDetailsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_JOB_DETAILS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzJobDetailsSelectObjects(qrtzJobDetailsQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzJobDetailsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzJobDetailsQuerySelectObjectsCount(QrtzJobDetailsExample qrtzJobDetailsQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_JOB_DETAILS")) {
			String key = ("QRTZ_JOB_DETAILS_" 
						+ ("queryCount_" + this.getQrtzJobDetailsExampleConditionSql(qrtzJobDetailsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_JOB_DETAILS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzJobDetailsQuerySelectObjectsCount(qrtzJobDetailsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_JOB_DETAILS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzJobDetailsQuerySelectObjectsCount(qrtzJobDetailsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzJobListeners到数据库中
	 * <param name="qrtzJobListeners">需要插入的新对象</param>
	 */
	public int qrtzJobListenersInsert(QrtzJobListeners qrtzJobListeners) throws CacheException {
		int ret = this.getDao().qrtzJobListenersInsert(qrtzJobListeners);
		if (this.needCache("QRTZ_JOB_LISTENERS")) {
			this.getCache().clear("QRTZ_JOB_LISTENERS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzJobListeners.getId());
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "插入", "ID", kvalue, qrtzJobListeners, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzJobListeners">从数据库中删除一个对象QrtzJobListeners</param>
	 * <param name="AId"></param>
	 */
	public int qrtzJobListenersDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().qrtzJobListenersDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_LISTENERS")) {
				this.getCache().clear("QRTZ_JOB_LISTENERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzJobListeners">从数据库中删除一个对象QrtzJobListeners</param>
	 */
	public int qrtzJobListenersDeleteByCondition(QrtzJobListenersExample qrtzJobListenersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzJobListenersDeleteByCondition(qrtzJobListenersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_LISTENERS")) {
				this.getCache().clear("QRTZ_JOB_LISTENERS");
			}
		}
		String kvalue = this.getQrtzJobListenersExampleConditionSql(qrtzJobListenersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "条件删除", "conditionSql", kvalue, qrtzJobListenersQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzJobListeners到数据库中
	 * <param name="qrtzJobListeners">需要更新的QrtzJobListeners</param>
	 */
	public int qrtzJobListenersUpdate(QrtzJobListeners qrtzJobListeners) throws CacheException {
		int ret = this.getDao().qrtzJobListenersUpdate(qrtzJobListeners);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_LISTENERS")) {
				this.getCache().clear("QRTZ_JOB_LISTENERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzJobListeners.getId());
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "更新", "ID", kvalue, qrtzJobListeners, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzJobListeners到数据库中
	 * <param name="qrtzJobListeners">需要更新的QrtzJobListeners</param>
	 */
	public int qrtzJobListenersUpdateSelective(QrtzJobListeners qrtzJobListeners) throws CacheException {
		int ret = this.getDao().qrtzJobListenersUpdateSelective(qrtzJobListeners);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_LISTENERS")) {
				this.getCache().clear("QRTZ_JOB_LISTENERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzJobListeners.getId());
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "部分更新", "ID", kvalue, qrtzJobListeners, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzJobListeners到数据库中
	 * <param name="qrtzJobListenersQueryCondition">附加的条件</param>
	 * <param name="qrtzJobListeners">需要更新的QrtzJobListeners</param>
	 */
	public int qrtzJobListenersUpdateByCondition(QrtzJobListeners qrtzJobListeners, QrtzJobListenersExample qrtzJobListenersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzJobListenersUpdateByCondition(qrtzJobListeners, qrtzJobListenersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_LISTENERS")) {
				this.getCache().clear("QRTZ_JOB_LISTENERS");
			}
		}
		String kvalue = this.getQrtzJobListenersExampleConditionSql(qrtzJobListenersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "条件更新", "conditionSql", kvalue, qrtzJobListeners, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzJobListeners到数据库中
	 * <param name="qrtzJobListenersQueryCondition">附加的条件</param>
	 * <param name="qrtzJobListeners">需要更新的QrtzJobListeners</param>
	 */
	public int qrtzJobListenersUpdateSelectiveByCondition(QrtzJobListeners qrtzJobListeners, QrtzJobListenersExample qrtzJobListenersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzJobListenersUpdateSelectiveByCondition(qrtzJobListeners, qrtzJobListenersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_JOB_LISTENERS")) {
				this.getCache().clear("QRTZ_JOB_LISTENERS");
			}
		}
		String kvalue = this.getQrtzJobListenersExampleConditionSql(qrtzJobListenersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_JOB_LISTENERS", "批量部分更新", "conditionSql", kvalue, qrtzJobListeners, ret);
		return ret;
	}
	
	public String getQrtzJobListenersExampleConditionSql(QrtzJobListenersExample qrtzJobListenersQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzJobListenersQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzJobListenersExample.Criteria item = qrtzJobListenersQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzJobListenersExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzJobListeners">从数据库中查询一个对象QrtzJobListeners</param>
	 * <param name="AId"></param>
	 */
	public QrtzJobListeners qrtzJobListenersSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("QRTZ_JOB_LISTENERS")) {
			String key = ("QRTZ_JOB_LISTENERS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			QrtzJobListeners obj = ((QrtzJobListeners)(this.getCache().get("QRTZ_JOB_LISTENERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzJobListenersSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_JOB_LISTENERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzJobListenersSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="qrtzJobListenersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzJobListeners> qrtzJobListenersSelectObjects(QrtzJobListenersExample qrtzJobListenersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_JOB_LISTENERS")) {
			String key = ("QRTZ_JOB_LISTENERS_" 
						+ ("queryObject_" + this.getQrtzJobListenersExampleConditionSql(qrtzJobListenersQueryCondition)));
			List<QrtzJobListeners> obj = ((List<QrtzJobListeners>)(this.getCache().get("QRTZ_JOB_LISTENERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzJobListenersSelectObjects(qrtzJobListenersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_JOB_LISTENERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzJobListenersSelectObjects(qrtzJobListenersQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzJobListenersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzJobListenersQuerySelectObjectsCount(QrtzJobListenersExample qrtzJobListenersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_JOB_LISTENERS")) {
			String key = ("QRTZ_JOB_LISTENERS_" 
						+ ("queryCount_" + this.getQrtzJobListenersExampleConditionSql(qrtzJobListenersQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_JOB_LISTENERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzJobListenersQuerySelectObjectsCount(qrtzJobListenersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_JOB_LISTENERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzJobListenersQuerySelectObjectsCount(qrtzJobListenersQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzSimpleTriggers到数据库中
	 * <param name="qrtzSimpleTriggers">需要插入的新对象</param>
	 */
	public int qrtzSimpleTriggersInsert(QrtzSimpleTriggers qrtzSimpleTriggers) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersInsert(qrtzSimpleTriggers);
		if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
			this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzSimpleTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "插入", "ID", kvalue, qrtzSimpleTriggers, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzSimpleTriggers">从数据库中删除一个对象QrtzSimpleTriggers</param>
	 * <param name="AId"></param>
	 */
	public int qrtzSimpleTriggersDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
				this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzSimpleTriggers">从数据库中删除一个对象QrtzSimpleTriggers</param>
	 */
	public int qrtzSimpleTriggersDeleteByCondition(QrtzSimpleTriggersExample qrtzSimpleTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersDeleteByCondition(qrtzSimpleTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
				this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzSimpleTriggersExampleConditionSql(qrtzSimpleTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "条件删除", "conditionSql", kvalue, qrtzSimpleTriggersQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzSimpleTriggers到数据库中
	 * <param name="qrtzSimpleTriggers">需要更新的QrtzSimpleTriggers</param>
	 */
	public int qrtzSimpleTriggersUpdate(QrtzSimpleTriggers qrtzSimpleTriggers) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersUpdate(qrtzSimpleTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
				this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzSimpleTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "更新", "ID", kvalue, qrtzSimpleTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzSimpleTriggers到数据库中
	 * <param name="qrtzSimpleTriggers">需要更新的QrtzSimpleTriggers</param>
	 */
	public int qrtzSimpleTriggersUpdateSelective(QrtzSimpleTriggers qrtzSimpleTriggers) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersUpdateSelective(qrtzSimpleTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
				this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzSimpleTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "部分更新", "ID", kvalue, qrtzSimpleTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzSimpleTriggers到数据库中
	 * <param name="qrtzSimpleTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzSimpleTriggers">需要更新的QrtzSimpleTriggers</param>
	 */
	public int qrtzSimpleTriggersUpdateByCondition(QrtzSimpleTriggers qrtzSimpleTriggers, QrtzSimpleTriggersExample qrtzSimpleTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersUpdateByCondition(qrtzSimpleTriggers, qrtzSimpleTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
				this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzSimpleTriggersExampleConditionSql(qrtzSimpleTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "条件更新", "conditionSql", kvalue, qrtzSimpleTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzSimpleTriggers到数据库中
	 * <param name="qrtzSimpleTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzSimpleTriggers">需要更新的QrtzSimpleTriggers</param>
	 */
	public int qrtzSimpleTriggersUpdateSelectiveByCondition(QrtzSimpleTriggers qrtzSimpleTriggers, QrtzSimpleTriggersExample qrtzSimpleTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzSimpleTriggersUpdateSelectiveByCondition(qrtzSimpleTriggers, qrtzSimpleTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
				this.getCache().clear("QRTZ_SIMPLE_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzSimpleTriggersExampleConditionSql(qrtzSimpleTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_SIMPLE_TRIGGERS", "批量部分更新", "conditionSql", kvalue, qrtzSimpleTriggers, ret);
		return ret;
	}
	
	public String getQrtzSimpleTriggersExampleConditionSql(QrtzSimpleTriggersExample qrtzSimpleTriggersQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzSimpleTriggersQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzSimpleTriggersExample.Criteria item = qrtzSimpleTriggersQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzSimpleTriggersExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzSimpleTriggers">从数据库中查询一个对象QrtzSimpleTriggers</param>
	 * <param name="AId"></param>
	 */
	public QrtzSimpleTriggers qrtzSimpleTriggersSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
			String key = ("QRTZ_SIMPLE_TRIGGERS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			QrtzSimpleTriggers obj = ((QrtzSimpleTriggers)(this.getCache().get("QRTZ_SIMPLE_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzSimpleTriggersSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_SIMPLE_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzSimpleTriggersSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="qrtzSimpleTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzSimpleTriggers> qrtzSimpleTriggersSelectObjects(QrtzSimpleTriggersExample qrtzSimpleTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
			String key = ("QRTZ_SIMPLE_TRIGGERS_" 
						+ ("queryObject_" + this.getQrtzSimpleTriggersExampleConditionSql(qrtzSimpleTriggersQueryCondition)));
			List<QrtzSimpleTriggers> obj = ((List<QrtzSimpleTriggers>)(this.getCache().get("QRTZ_SIMPLE_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzSimpleTriggersSelectObjects(qrtzSimpleTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_SIMPLE_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzSimpleTriggersSelectObjects(qrtzSimpleTriggersQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzSimpleTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzSimpleTriggersQuerySelectObjectsCount(QrtzSimpleTriggersExample qrtzSimpleTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_SIMPLE_TRIGGERS")) {
			String key = ("QRTZ_SIMPLE_TRIGGERS_" 
						+ ("queryCount_" + this.getQrtzSimpleTriggersExampleConditionSql(qrtzSimpleTriggersQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_SIMPLE_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzSimpleTriggersQuerySelectObjectsCount(qrtzSimpleTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_SIMPLE_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzSimpleTriggersQuerySelectObjectsCount(qrtzSimpleTriggersQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzTriggerListeners到数据库中
	 * <param name="qrtzTriggerListeners">需要插入的新对象</param>
	 */
	public int qrtzTriggerListenersInsert(QrtzTriggerListeners qrtzTriggerListeners) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersInsert(qrtzTriggerListeners);
		if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
			this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzTriggerListeners.getId());
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "插入", "ID", kvalue, qrtzTriggerListeners, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzTriggerListeners">从数据库中删除一个对象QrtzTriggerListeners</param>
	 * <param name="AId"></param>
	 */
	public int qrtzTriggerListenersDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
				this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzTriggerListeners">从数据库中删除一个对象QrtzTriggerListeners</param>
	 */
	public int qrtzTriggerListenersDeleteByCondition(QrtzTriggerListenersExample qrtzTriggerListenersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersDeleteByCondition(qrtzTriggerListenersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
				this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
			}
		}
		String kvalue = this.getQrtzTriggerListenersExampleConditionSql(qrtzTriggerListenersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "条件删除", "conditionSql", kvalue, qrtzTriggerListenersQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzTriggerListeners到数据库中
	 * <param name="qrtzTriggerListeners">需要更新的QrtzTriggerListeners</param>
	 */
	public int qrtzTriggerListenersUpdate(QrtzTriggerListeners qrtzTriggerListeners) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersUpdate(qrtzTriggerListeners);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
				this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzTriggerListeners.getId());
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "更新", "ID", kvalue, qrtzTriggerListeners, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzTriggerListeners到数据库中
	 * <param name="qrtzTriggerListeners">需要更新的QrtzTriggerListeners</param>
	 */
	public int qrtzTriggerListenersUpdateSelective(QrtzTriggerListeners qrtzTriggerListeners) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersUpdateSelective(qrtzTriggerListeners);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
				this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzTriggerListeners.getId());
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "部分更新", "ID", kvalue, qrtzTriggerListeners, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzTriggerListeners到数据库中
	 * <param name="qrtzTriggerListenersQueryCondition">附加的条件</param>
	 * <param name="qrtzTriggerListeners">需要更新的QrtzTriggerListeners</param>
	 */
	public int qrtzTriggerListenersUpdateByCondition(QrtzTriggerListeners qrtzTriggerListeners, QrtzTriggerListenersExample qrtzTriggerListenersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersUpdateByCondition(qrtzTriggerListeners, qrtzTriggerListenersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
				this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
			}
		}
		String kvalue = this.getQrtzTriggerListenersExampleConditionSql(qrtzTriggerListenersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "条件更新", "conditionSql", kvalue, qrtzTriggerListeners, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzTriggerListeners到数据库中
	 * <param name="qrtzTriggerListenersQueryCondition">附加的条件</param>
	 * <param name="qrtzTriggerListeners">需要更新的QrtzTriggerListeners</param>
	 */
	public int qrtzTriggerListenersUpdateSelectiveByCondition(QrtzTriggerListeners qrtzTriggerListeners, QrtzTriggerListenersExample qrtzTriggerListenersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzTriggerListenersUpdateSelectiveByCondition(qrtzTriggerListeners, qrtzTriggerListenersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
				this.getCache().clear("QRTZ_TRIGGER_LISTENERS");
			}
		}
		String kvalue = this.getQrtzTriggerListenersExampleConditionSql(qrtzTriggerListenersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_TRIGGER_LISTENERS", "批量部分更新", "conditionSql", kvalue, qrtzTriggerListeners, ret);
		return ret;
	}
	
	public String getQrtzTriggerListenersExampleConditionSql(QrtzTriggerListenersExample qrtzTriggerListenersQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzTriggerListenersQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzTriggerListenersExample.Criteria item = qrtzTriggerListenersQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzTriggerListenersExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzTriggerListeners">从数据库中查询一个对象QrtzTriggerListeners</param>
	 * <param name="AId"></param>
	 */
	public QrtzTriggerListeners qrtzTriggerListenersSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
			String key = ("QRTZ_TRIGGER_LISTENERS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			QrtzTriggerListeners obj = ((QrtzTriggerListeners)(this.getCache().get("QRTZ_TRIGGER_LISTENERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzTriggerListenersSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_TRIGGER_LISTENERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzTriggerListenersSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="qrtzTriggerListenersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzTriggerListeners> qrtzTriggerListenersSelectObjects(QrtzTriggerListenersExample qrtzTriggerListenersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
			String key = ("QRTZ_TRIGGER_LISTENERS_" 
						+ ("queryObject_" + this.getQrtzTriggerListenersExampleConditionSql(qrtzTriggerListenersQueryCondition)));
			List<QrtzTriggerListeners> obj = ((List<QrtzTriggerListeners>)(this.getCache().get("QRTZ_TRIGGER_LISTENERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzTriggerListenersSelectObjects(qrtzTriggerListenersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_TRIGGER_LISTENERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzTriggerListenersSelectObjects(qrtzTriggerListenersQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzTriggerListenersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzTriggerListenersQuerySelectObjectsCount(QrtzTriggerListenersExample qrtzTriggerListenersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_TRIGGER_LISTENERS")) {
			String key = ("QRTZ_TRIGGER_LISTENERS_" 
						+ ("queryCount_" + this.getQrtzTriggerListenersExampleConditionSql(qrtzTriggerListenersQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_TRIGGER_LISTENERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzTriggerListenersQuerySelectObjectsCount(qrtzTriggerListenersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_TRIGGER_LISTENERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzTriggerListenersQuerySelectObjectsCount(qrtzTriggerListenersQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象QrtzTriggers到数据库中
	 * <param name="qrtzTriggers">需要插入的新对象</param>
	 */
	public int qrtzTriggersInsert(QrtzTriggers qrtzTriggers) throws CacheException {
		int ret = this.getDao().qrtzTriggersInsert(qrtzTriggers);
		if (this.needCache("QRTZ_TRIGGERS")) {
			this.getCache().clear("QRTZ_TRIGGERS");
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "插入", "ID", kvalue, qrtzTriggers, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzTriggers">从数据库中删除一个对象QrtzTriggers</param>
	 * <param name="AId"></param>
	 */
	public int qrtzTriggersDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().qrtzTriggersDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGERS")) {
				this.getCache().clear("QRTZ_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="qrtzTriggers">从数据库中删除一个对象QrtzTriggers</param>
	 */
	public int qrtzTriggersDeleteByCondition(QrtzTriggersExample qrtzTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzTriggersDeleteByCondition(qrtzTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGERS")) {
				this.getCache().clear("QRTZ_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzTriggersExampleConditionSql(qrtzTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "条件删除", "conditionSql", kvalue, qrtzTriggersQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象QrtzTriggers到数据库中
	 * <param name="qrtzTriggers">需要更新的QrtzTriggers</param>
	 */
	public int qrtzTriggersUpdate(QrtzTriggers qrtzTriggers) throws CacheException {
		int ret = this.getDao().qrtzTriggersUpdate(qrtzTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGERS")) {
				this.getCache().clear("QRTZ_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "更新", "ID", kvalue, qrtzTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性QrtzTriggers到数据库中
	 * <param name="qrtzTriggers">需要更新的QrtzTriggers</param>
	 */
	public int qrtzTriggersUpdateSelective(QrtzTriggers qrtzTriggers) throws CacheException {
		int ret = this.getDao().qrtzTriggersUpdateSelective(qrtzTriggers);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGERS")) {
				this.getCache().clear("QRTZ_TRIGGERS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + qrtzTriggers.getId());
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "部分更新", "ID", kvalue, qrtzTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzTriggers到数据库中
	 * <param name="qrtzTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzTriggers">需要更新的QrtzTriggers</param>
	 */
	public int qrtzTriggersUpdateByCondition(QrtzTriggers qrtzTriggers, QrtzTriggersExample qrtzTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzTriggersUpdateByCondition(qrtzTriggers, qrtzTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGERS")) {
				this.getCache().clear("QRTZ_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzTriggersExampleConditionSql(qrtzTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "条件更新", "conditionSql", kvalue, qrtzTriggers, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象QrtzTriggers到数据库中
	 * <param name="qrtzTriggersQueryCondition">附加的条件</param>
	 * <param name="qrtzTriggers">需要更新的QrtzTriggers</param>
	 */
	public int qrtzTriggersUpdateSelectiveByCondition(QrtzTriggers qrtzTriggers, QrtzTriggersExample qrtzTriggersQueryCondition) throws CacheException {
		int ret = this.getDao().qrtzTriggersUpdateSelectiveByCondition(qrtzTriggers, qrtzTriggersQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("QRTZ_TRIGGERS")) {
				this.getCache().clear("QRTZ_TRIGGERS");
			}
		}
		String kvalue = this.getQrtzTriggersExampleConditionSql(qrtzTriggersQueryCondition);
		this.operatesLogSimpleAdd("QRTZ_TRIGGERS", "批量部分更新", "conditionSql", kvalue, qrtzTriggers, ret);
		return ret;
	}
	
	public String getQrtzTriggersExampleConditionSql(QrtzTriggersExample qrtzTriggersQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < qrtzTriggersQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			QrtzTriggersExample.Criteria item = qrtzTriggersQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					QrtzTriggersExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="qrtzTriggers">从数据库中查询一个对象QrtzTriggers</param>
	 * <param name="AId"></param>
	 */
	public QrtzTriggers qrtzTriggersSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("QRTZ_TRIGGERS")) {
			String key = ("QRTZ_TRIGGERS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			QrtzTriggers obj = ((QrtzTriggers)(this.getCache().get("QRTZ_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzTriggersSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("QRTZ_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzTriggersSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="qrtzTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<QrtzTriggers> qrtzTriggersSelectObjects(QrtzTriggersExample qrtzTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_TRIGGERS")) {
			String key = ("QRTZ_TRIGGERS_" 
						+ ("queryObject_" + this.getQrtzTriggersExampleConditionSql(qrtzTriggersQueryCondition)));
			List<QrtzTriggers> obj = ((List<QrtzTriggers>)(this.getCache().get("QRTZ_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzTriggersSelectObjects(qrtzTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzTriggersSelectObjects(qrtzTriggersQueryCondition);
		}
	}
	
	/**
	 * <param name="qrtzTriggersQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int qrtzTriggersQuerySelectObjectsCount(QrtzTriggersExample qrtzTriggersQueryCondition) throws CacheException {
		if (this.needCache("QRTZ_TRIGGERS")) {
			String key = ("QRTZ_TRIGGERS_" 
						+ ("queryCount_" + this.getQrtzTriggersExampleConditionSql(qrtzTriggersQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("QRTZ_TRIGGERS", key)));
			if ((obj == null)) {
				obj = this.getDao().qrtzTriggersQuerySelectObjectsCount(qrtzTriggersQueryCondition);
				if ((obj != null)) {
					this.getCache().put("QRTZ_TRIGGERS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().qrtzTriggersQuerySelectObjectsCount(qrtzTriggersQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Remembermetoken到数据库中
	 * <param name="remembermetoken">需要插入的新对象</param>
	 */
	public int remembermetokenInsert(Remembermetoken remembermetoken) throws CacheException {
		int ret = this.getDao().remembermetokenInsert(remembermetoken);
		if (this.needCache("REMEMBERMETOKEN")) {
			this.getCache().clear("REMEMBERMETOKEN");
		}
		String kvalue = "";
		kvalue = (kvalue + remembermetoken.getId());
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "插入", "ID", kvalue, remembermetoken, ret);
		return ret;
	}
	
	/**
	 * <param name="remembermetoken">从数据库中删除一个对象Remembermetoken</param>
	 * <param name="AId"></param>
	 */
	public int remembermetokenDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().remembermetokenDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("REMEMBERMETOKEN")) {
				this.getCache().clear("REMEMBERMETOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="remembermetoken">从数据库中删除一个对象Remembermetoken</param>
	 */
	public int remembermetokenDeleteByCondition(RemembermetokenExample remembermetokenQueryCondition) throws CacheException {
		int ret = this.getDao().remembermetokenDeleteByCondition(remembermetokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("REMEMBERMETOKEN")) {
				this.getCache().clear("REMEMBERMETOKEN");
			}
		}
		String kvalue = this.getRemembermetokenExampleConditionSql(remembermetokenQueryCondition);
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "条件删除", "conditionSql", kvalue, remembermetokenQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Remembermetoken到数据库中
	 * <param name="remembermetoken">需要更新的Remembermetoken</param>
	 */
	public int remembermetokenUpdate(Remembermetoken remembermetoken) throws CacheException {
		int ret = this.getDao().remembermetokenUpdate(remembermetoken);
		if ((ret > 0)) {
			if (this.needCache("REMEMBERMETOKEN")) {
				this.getCache().clear("REMEMBERMETOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + remembermetoken.getId());
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "更新", "ID", kvalue, remembermetoken, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Remembermetoken到数据库中
	 * <param name="remembermetoken">需要更新的Remembermetoken</param>
	 */
	public int remembermetokenUpdateSelective(Remembermetoken remembermetoken) throws CacheException {
		int ret = this.getDao().remembermetokenUpdateSelective(remembermetoken);
		if ((ret > 0)) {
			if (this.needCache("REMEMBERMETOKEN")) {
				this.getCache().clear("REMEMBERMETOKEN");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + remembermetoken.getId());
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "部分更新", "ID", kvalue, remembermetoken, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Remembermetoken到数据库中
	 * <param name="remembermetokenQueryCondition">附加的条件</param>
	 * <param name="remembermetoken">需要更新的Remembermetoken</param>
	 */
	public int remembermetokenUpdateByCondition(Remembermetoken remembermetoken, RemembermetokenExample remembermetokenQueryCondition) throws CacheException {
		int ret = this.getDao().remembermetokenUpdateByCondition(remembermetoken, remembermetokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("REMEMBERMETOKEN")) {
				this.getCache().clear("REMEMBERMETOKEN");
			}
		}
		String kvalue = this.getRemembermetokenExampleConditionSql(remembermetokenQueryCondition);
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "条件更新", "conditionSql", kvalue, remembermetoken, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Remembermetoken到数据库中
	 * <param name="remembermetokenQueryCondition">附加的条件</param>
	 * <param name="remembermetoken">需要更新的Remembermetoken</param>
	 */
	public int remembermetokenUpdateSelectiveByCondition(Remembermetoken remembermetoken, RemembermetokenExample remembermetokenQueryCondition) throws CacheException {
		int ret = this.getDao().remembermetokenUpdateSelectiveByCondition(remembermetoken, remembermetokenQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("REMEMBERMETOKEN")) {
				this.getCache().clear("REMEMBERMETOKEN");
			}
		}
		String kvalue = this.getRemembermetokenExampleConditionSql(remembermetokenQueryCondition);
		this.operatesLogSimpleAdd("REMEMBERMETOKEN", "批量部分更新", "conditionSql", kvalue, remembermetoken, ret);
		return ret;
	}
	
	public String getRemembermetokenExampleConditionSql(RemembermetokenExample remembermetokenQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < remembermetokenQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			RemembermetokenExample.Criteria item = remembermetokenQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					RemembermetokenExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="remembermetoken">从数据库中查询一个对象Remembermetoken</param>
	 * <param name="AId"></param>
	 */
	public Remembermetoken remembermetokenSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("REMEMBERMETOKEN")) {
			String key = ("REMEMBERMETOKEN_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Remembermetoken obj = ((Remembermetoken)(this.getCache().get("REMEMBERMETOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().remembermetokenSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("REMEMBERMETOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remembermetokenSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="remembermetokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Remembermetoken> remembermetokenSelectObjects(RemembermetokenExample remembermetokenQueryCondition) throws CacheException {
		if (this.needCache("REMEMBERMETOKEN")) {
			String key = ("REMEMBERMETOKEN_" 
						+ ("queryObject_" + this.getRemembermetokenExampleConditionSql(remembermetokenQueryCondition)));
			List<Remembermetoken> obj = ((List<Remembermetoken>)(this.getCache().get("REMEMBERMETOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().remembermetokenSelectObjects(remembermetokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("REMEMBERMETOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remembermetokenSelectObjects(remembermetokenQueryCondition);
		}
	}
	
	/**
	 * <param name="remembermetokenQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int remembermetokenQuerySelectObjectsCount(RemembermetokenExample remembermetokenQueryCondition) throws CacheException {
		if (this.needCache("REMEMBERMETOKEN")) {
			String key = ("REMEMBERMETOKEN_" 
						+ ("queryCount_" + this.getRemembermetokenExampleConditionSql(remembermetokenQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("REMEMBERMETOKEN", key)));
			if ((obj == null)) {
				obj = this.getDao().remembermetokenQuerySelectObjectsCount(remembermetokenQueryCondition);
				if ((obj != null)) {
					this.getCache().put("REMEMBERMETOKEN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remembermetokenQuerySelectObjectsCount(remembermetokenQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Remotelink到数据库中
	 * <param name="remotelink">需要插入的新对象</param>
	 */
	public int remotelinkInsert(RemotelinkWithBLOBs remotelink) throws CacheException {
		int ret = this.getDao().remotelinkInsert(remotelink);
		if (this.needCache("REMOTELINK")) {
			this.getCache().clear("REMOTELINK");
		}
		String kvalue = "";
		kvalue = (kvalue + remotelink.getId());
		this.operatesLogSimpleAdd("REMOTELINK", "插入", "ID", kvalue, remotelink, ret);
		return ret;
	}
	
	/**
	 * <param name="remotelink">从数据库中删除一个对象Remotelink</param>
	 * <param name="AId"></param>
	 */
	public int remotelinkDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().remotelinkDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("REMOTELINK", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="remotelink">从数据库中删除一个对象Remotelink</param>
	 */
	public int remotelinkDeleteByCondition(RemotelinkExample remotelinkQueryCondition) throws CacheException {
		int ret = this.getDao().remotelinkDeleteByCondition(remotelinkQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = this.getRemotelinkExampleConditionSql(remotelinkQueryCondition);
		this.operatesLogSimpleAdd("REMOTELINK", "条件删除", "conditionSql", kvalue, remotelinkQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Remotelink到数据库中
	 * <param name="remotelink">需要更新的Remotelink</param>
	 */
	public int remotelinkUpdate(RemotelinkWithBLOBs remotelink) throws CacheException {
		int ret = this.getDao().remotelinkUpdate(remotelink);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + remotelink.getId());
		this.operatesLogSimpleAdd("REMOTELINK", "更新", "ID", kvalue, remotelink, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Remotelink到数据库中
	 * <param name="remotelink">需要更新的Remotelink</param>
	 */
	public int remotelinkUpdateSelective(RemotelinkWithBLOBs remotelink) throws CacheException {
		int ret = this.getDao().remotelinkUpdateSelective(remotelink);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + remotelink.getId());
		this.operatesLogSimpleAdd("REMOTELINK", "部分更新", "ID", kvalue, remotelink, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Remotelink到数据库中
	 * <param name="remotelink">需要更新的Remotelink</param>
	 */
	public int remotelinkUpdateWithBlobs(RemotelinkWithBLOBs remotelink) throws CacheException {
		int ret = this.getDao().remotelinkUpdateWithBlobs(remotelink);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + remotelink.getId());
		this.operatesLogSimpleAdd("REMOTELINK", "更新含Blob", "ID", kvalue, remotelink, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Remotelink到数据库中
	 * <param name="remotelinkQueryCondition">附加的条件</param>
	 * <param name="remotelink">需要更新的Remotelink</param>
	 */
	public int remotelinkUpdateByCondition(RemotelinkWithBLOBs remotelink, RemotelinkExample remotelinkQueryCondition) throws CacheException {
		int ret = this.getDao().remotelinkUpdateByCondition(remotelink, remotelinkQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = this.getRemotelinkExampleConditionSql(remotelinkQueryCondition);
		this.operatesLogSimpleAdd("REMOTELINK", "条件更新", "conditionSql", kvalue, remotelink, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Remotelink到数据库中
	 * <param name="remotelinkQueryCondition">附加的条件</param>
	 * <param name="remotelink">需要更新的Remotelink</param>
	 */
	public int remotelinkUpdateSelectiveByCondition(RemotelinkWithBLOBs remotelink, RemotelinkExample remotelinkQueryCondition) throws CacheException {
		int ret = this.getDao().remotelinkUpdateSelectiveByCondition(remotelink, remotelinkQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("REMOTELINK")) {
				this.getCache().clear("REMOTELINK");
			}
		}
		String kvalue = this.getRemotelinkExampleConditionSql(remotelinkQueryCondition);
		this.operatesLogSimpleAdd("REMOTELINK", "批量部分更新", "conditionSql", kvalue, remotelink, ret);
		return ret;
	}
	
	public String getRemotelinkExampleConditionSql(RemotelinkExample remotelinkQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < remotelinkQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			RemotelinkExample.Criteria item = remotelinkQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					RemotelinkExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="remotelink">从数据库中查询一个对象Remotelink</param>
	 * <param name="AId"></param>
	 */
	public Remotelink remotelinkSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("REMOTELINK")) {
			String key = ("REMOTELINK_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Remotelink obj = ((Remotelink)(this.getCache().get("REMOTELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().remotelinkSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("REMOTELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remotelinkSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="remotelinkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Remotelink> remotelinkSelectObjects(RemotelinkExample remotelinkQueryCondition) throws CacheException {
		if (this.needCache("REMOTELINK")) {
			String key = ("REMOTELINK_" 
						+ ("queryObject_" + this.getRemotelinkExampleConditionSql(remotelinkQueryCondition)));
			List<Remotelink> obj = ((List<Remotelink>)(this.getCache().get("REMOTELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().remotelinkSelectObjects(remotelinkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("REMOTELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remotelinkSelectObjects(remotelinkQueryCondition);
		}
	}
	
	/**
	 * <param name="remotelinkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<RemotelinkWithBLOBs> remotelinkSelectObjectsWithBLOBs(RemotelinkExample remotelinkQueryCondition) throws CacheException {
		if (this.needCache("REMOTELINK")) {
			String key = ("REMOTELINK_" 
						+ ("queryObject_" + this.getRemotelinkExampleConditionSql(remotelinkQueryCondition)));
			List<RemotelinkWithBLOBs> obj = ((List<RemotelinkWithBLOBs>)(this.getCache().get("REMOTELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().remotelinkSelectObjectsWithBLOBs(remotelinkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("REMOTELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remotelinkSelectObjectsWithBLOBs(remotelinkQueryCondition);
		}
	}
	
	/**
	 * <param name="remotelinkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int remotelinkQuerySelectObjectsCount(RemotelinkExample remotelinkQueryCondition) throws CacheException {
		if (this.needCache("REMOTELINK")) {
			String key = ("REMOTELINK_" 
						+ ("queryCount_" + this.getRemotelinkExampleConditionSql(remotelinkQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("REMOTELINK", key)));
			if ((obj == null)) {
				obj = this.getDao().remotelinkQuerySelectObjectsCount(remotelinkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("REMOTELINK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().remotelinkQuerySelectObjectsCount(remotelinkQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Resolution到数据库中
	 * <param name="resolution">需要插入的新对象</param>
	 */
	public int resolutionInsert(Resolution resolution) throws CacheException {
		int ret = this.getDao().resolutionInsert(resolution);
		if (this.needCache("RESOLUTION")) {
			this.getCache().clear("RESOLUTION");
		}
		String kvalue = "";
		kvalue = (kvalue + resolution.getId());
		this.operatesLogSimpleAdd("RESOLUTION", "插入", "ID", kvalue, resolution, ret);
		return ret;
	}
	
	/**
	 * <param name="resolution">从数据库中删除一个对象Resolution</param>
	 * <param name="AId"></param>
	 */
	public int resolutionDeleteByPrimaryKey(String AId) throws CacheException {
		int ret = this.getDao().resolutionDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("RESOLUTION", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="resolution">从数据库中删除一个对象Resolution</param>
	 */
	public int resolutionDeleteByCondition(ResolutionExample resolutionQueryCondition) throws CacheException {
		int ret = this.getDao().resolutionDeleteByCondition(resolutionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = this.getResolutionExampleConditionSql(resolutionQueryCondition);
		this.operatesLogSimpleAdd("RESOLUTION", "条件删除", "conditionSql", kvalue, resolutionQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Resolution到数据库中
	 * <param name="resolution">需要更新的Resolution</param>
	 */
	public int resolutionUpdate(Resolution resolution) throws CacheException {
		int ret = this.getDao().resolutionUpdate(resolution);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + resolution.getId());
		this.operatesLogSimpleAdd("RESOLUTION", "更新", "ID", kvalue, resolution, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Resolution到数据库中
	 * <param name="resolution">需要更新的Resolution</param>
	 */
	public int resolutionUpdateSelective(Resolution resolution) throws CacheException {
		int ret = this.getDao().resolutionUpdateSelective(resolution);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + resolution.getId());
		this.operatesLogSimpleAdd("RESOLUTION", "部分更新", "ID", kvalue, resolution, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Resolution到数据库中
	 * <param name="resolution">需要更新的Resolution</param>
	 */
	public int resolutionUpdateWithBlobs(Resolution resolution) throws CacheException {
		int ret = this.getDao().resolutionUpdateWithBlobs(resolution);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + resolution.getId());
		this.operatesLogSimpleAdd("RESOLUTION", "更新含Blob", "ID", kvalue, resolution, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Resolution到数据库中
	 * <param name="resolutionQueryCondition">附加的条件</param>
	 * <param name="resolution">需要更新的Resolution</param>
	 */
	public int resolutionUpdateByCondition(Resolution resolution, ResolutionExample resolutionQueryCondition) throws CacheException {
		int ret = this.getDao().resolutionUpdateByCondition(resolution, resolutionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = this.getResolutionExampleConditionSql(resolutionQueryCondition);
		this.operatesLogSimpleAdd("RESOLUTION", "条件更新", "conditionSql", kvalue, resolution, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Resolution到数据库中
	 * <param name="resolutionQueryCondition">附加的条件</param>
	 * <param name="resolution">需要更新的Resolution</param>
	 */
	public int resolutionUpdateSelectiveByCondition(Resolution resolution, ResolutionExample resolutionQueryCondition) throws CacheException {
		int ret = this.getDao().resolutionUpdateSelectiveByCondition(resolution, resolutionQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("RESOLUTION")) {
				this.getCache().clear("RESOLUTION");
			}
		}
		String kvalue = this.getResolutionExampleConditionSql(resolutionQueryCondition);
		this.operatesLogSimpleAdd("RESOLUTION", "批量部分更新", "conditionSql", kvalue, resolution, ret);
		return ret;
	}
	
	public String getResolutionExampleConditionSql(ResolutionExample resolutionQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < resolutionQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ResolutionExample.Criteria item = resolutionQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ResolutionExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="resolution">从数据库中查询一个对象Resolution</param>
	 * <param name="AId"></param>
	 */
	public Resolution resolutionSelectByPrimaryKey(String AId) throws CacheException {
		if (this.needCache("RESOLUTION")) {
			String key = ("RESOLUTION_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Resolution obj = ((Resolution)(this.getCache().get("RESOLUTION", key)));
			if ((obj == null)) {
				obj = this.getDao().resolutionSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("RESOLUTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().resolutionSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="resolutionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Resolution> resolutionSelectObjects(ResolutionExample resolutionQueryCondition) throws CacheException {
		if (this.needCache("RESOLUTION")) {
			String key = ("RESOLUTION_" 
						+ ("queryObject_" + this.getResolutionExampleConditionSql(resolutionQueryCondition)));
			List<Resolution> obj = ((List<Resolution>)(this.getCache().get("RESOLUTION", key)));
			if ((obj == null)) {
				obj = this.getDao().resolutionSelectObjects(resolutionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("RESOLUTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().resolutionSelectObjects(resolutionQueryCondition);
		}
	}
	
	/**
	 * <param name="resolutionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Resolution> resolutionSelectObjectsWithBLOBs(ResolutionExample resolutionQueryCondition) throws CacheException {
		if (this.needCache("RESOLUTION")) {
			String key = ("RESOLUTION_" 
						+ ("queryObject_" + this.getResolutionExampleConditionSql(resolutionQueryCondition)));
			List<Resolution> obj = ((List<Resolution>)(this.getCache().get("RESOLUTION", key)));
			if ((obj == null)) {
				obj = this.getDao().resolutionSelectObjectsWithBLOBs(resolutionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("RESOLUTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().resolutionSelectObjectsWithBLOBs(resolutionQueryCondition);
		}
	}
	
	/**
	 * <param name="resolutionQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int resolutionQuerySelectObjectsCount(ResolutionExample resolutionQueryCondition) throws CacheException {
		if (this.needCache("RESOLUTION")) {
			String key = ("RESOLUTION_" 
						+ ("queryCount_" + this.getResolutionExampleConditionSql(resolutionQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("RESOLUTION", key)));
			if ((obj == null)) {
				obj = this.getDao().resolutionQuerySelectObjectsCount(resolutionQueryCondition);
				if ((obj != null)) {
					this.getCache().put("RESOLUTION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().resolutionQuerySelectObjectsCount(resolutionQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Schemeissuesecurities到数据库中
	 * <param name="schemeissuesecurities">需要插入的新对象</param>
	 */
	public int schemeissuesecuritiesInsert(Schemeissuesecurities schemeissuesecurities) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesInsert(schemeissuesecurities);
		if (this.needCache("SCHEMEISSUESECURITIES")) {
			this.getCache().clear("SCHEMEISSUESECURITIES");
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecurities.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "插入", "ID", kvalue, schemeissuesecurities, ret);
		return ret;
	}
	
	/**
	 * <param name="schemeissuesecurities">从数据库中删除一个对象Schemeissuesecurities</param>
	 * <param name="AId"></param>
	 */
	public int schemeissuesecuritiesDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITIES")) {
				this.getCache().clear("SCHEMEISSUESECURITIES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="schemeissuesecurities">从数据库中删除一个对象Schemeissuesecurities</param>
	 */
	public int schemeissuesecuritiesDeleteByCondition(SchemeissuesecuritiesExample schemeissuesecuritiesQueryCondition) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesDeleteByCondition(schemeissuesecuritiesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITIES")) {
				this.getCache().clear("SCHEMEISSUESECURITIES");
			}
		}
		String kvalue = this.getSchemeissuesecuritiesExampleConditionSql(schemeissuesecuritiesQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "条件删除", "conditionSql", kvalue, schemeissuesecuritiesQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Schemeissuesecurities到数据库中
	 * <param name="schemeissuesecurities">需要更新的Schemeissuesecurities</param>
	 */
	public int schemeissuesecuritiesUpdate(Schemeissuesecurities schemeissuesecurities) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesUpdate(schemeissuesecurities);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITIES")) {
				this.getCache().clear("SCHEMEISSUESECURITIES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecurities.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "更新", "ID", kvalue, schemeissuesecurities, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Schemeissuesecurities到数据库中
	 * <param name="schemeissuesecurities">需要更新的Schemeissuesecurities</param>
	 */
	public int schemeissuesecuritiesUpdateSelective(Schemeissuesecurities schemeissuesecurities) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesUpdateSelective(schemeissuesecurities);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITIES")) {
				this.getCache().clear("SCHEMEISSUESECURITIES");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecurities.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "部分更新", "ID", kvalue, schemeissuesecurities, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Schemeissuesecurities到数据库中
	 * <param name="schemeissuesecuritiesQueryCondition">附加的条件</param>
	 * <param name="schemeissuesecurities">需要更新的Schemeissuesecurities</param>
	 */
	public int schemeissuesecuritiesUpdateByCondition(Schemeissuesecurities schemeissuesecurities, SchemeissuesecuritiesExample schemeissuesecuritiesQueryCondition) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesUpdateByCondition(schemeissuesecurities, schemeissuesecuritiesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITIES")) {
				this.getCache().clear("SCHEMEISSUESECURITIES");
			}
		}
		String kvalue = this.getSchemeissuesecuritiesExampleConditionSql(schemeissuesecuritiesQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "条件更新", "conditionSql", kvalue, schemeissuesecurities, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Schemeissuesecurities到数据库中
	 * <param name="schemeissuesecuritiesQueryCondition">附加的条件</param>
	 * <param name="schemeissuesecurities">需要更新的Schemeissuesecurities</param>
	 */
	public int schemeissuesecuritiesUpdateSelectiveByCondition(Schemeissuesecurities schemeissuesecurities, SchemeissuesecuritiesExample schemeissuesecuritiesQueryCondition) throws CacheException {
		int ret = this.getDao().schemeissuesecuritiesUpdateSelectiveByCondition(schemeissuesecurities, schemeissuesecuritiesQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITIES")) {
				this.getCache().clear("SCHEMEISSUESECURITIES");
			}
		}
		String kvalue = this.getSchemeissuesecuritiesExampleConditionSql(schemeissuesecuritiesQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITIES", "批量部分更新", "conditionSql", kvalue, schemeissuesecurities, ret);
		return ret;
	}
	
	public String getSchemeissuesecuritiesExampleConditionSql(SchemeissuesecuritiesExample schemeissuesecuritiesQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < schemeissuesecuritiesQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			SchemeissuesecuritiesExample.Criteria item = schemeissuesecuritiesQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					SchemeissuesecuritiesExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="schemeissuesecurities">从数据库中查询一个对象Schemeissuesecurities</param>
	 * <param name="AId"></param>
	 */
	public Schemeissuesecurities schemeissuesecuritiesSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITIES")) {
			String key = ("SCHEMEISSUESECURITIES_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Schemeissuesecurities obj = ((Schemeissuesecurities)(this.getCache().get("SCHEMEISSUESECURITIES", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritiesSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITIES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritiesSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="schemeissuesecuritiesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Schemeissuesecurities> schemeissuesecuritiesSelectObjects(SchemeissuesecuritiesExample schemeissuesecuritiesQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITIES")) {
			String key = ("SCHEMEISSUESECURITIES_" 
						+ ("queryObject_" + this.getSchemeissuesecuritiesExampleConditionSql(schemeissuesecuritiesQueryCondition)));
			List<Schemeissuesecurities> obj = ((List<Schemeissuesecurities>)(this.getCache().get("SCHEMEISSUESECURITIES", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritiesSelectObjects(schemeissuesecuritiesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITIES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritiesSelectObjects(schemeissuesecuritiesQueryCondition);
		}
	}
	
	/**
	 * <param name="schemeissuesecuritiesQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int schemeissuesecuritiesQuerySelectObjectsCount(SchemeissuesecuritiesExample schemeissuesecuritiesQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITIES")) {
			String key = ("SCHEMEISSUESECURITIES_" 
						+ ("queryCount_" + this.getSchemeissuesecuritiesExampleConditionSql(schemeissuesecuritiesQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SCHEMEISSUESECURITIES", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritiesQuerySelectObjectsCount(schemeissuesecuritiesQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITIES", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritiesQuerySelectObjectsCount(schemeissuesecuritiesQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Schemeissuesecuritylevels到数据库中
	 * <param name="schemeissuesecuritylevels">需要插入的新对象</param>
	 */
	public int schemeissuesecuritylevelsInsert(Schemeissuesecuritylevels schemeissuesecuritylevels) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsInsert(schemeissuesecuritylevels);
		if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
			this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecuritylevels.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "插入", "ID", kvalue, schemeissuesecuritylevels, ret);
		return ret;
	}
	
	/**
	 * <param name="schemeissuesecuritylevels">从数据库中删除一个对象Schemeissuesecuritylevels</param>
	 * <param name="AId"></param>
	 */
	public int schemeissuesecuritylevelsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="schemeissuesecuritylevels">从数据库中删除一个对象Schemeissuesecuritylevels</param>
	 */
	public int schemeissuesecuritylevelsDeleteByCondition(SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsDeleteByCondition(schemeissuesecuritylevelsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = this.getSchemeissuesecuritylevelsExampleConditionSql(schemeissuesecuritylevelsQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "条件删除", "conditionSql", kvalue, schemeissuesecuritylevelsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Schemeissuesecuritylevels到数据库中
	 * <param name="schemeissuesecuritylevels">需要更新的Schemeissuesecuritylevels</param>
	 */
	public int schemeissuesecuritylevelsUpdate(Schemeissuesecuritylevels schemeissuesecuritylevels) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsUpdate(schemeissuesecuritylevels);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecuritylevels.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "更新", "ID", kvalue, schemeissuesecuritylevels, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Schemeissuesecuritylevels到数据库中
	 * <param name="schemeissuesecuritylevels">需要更新的Schemeissuesecuritylevels</param>
	 */
	public int schemeissuesecuritylevelsUpdateSelective(Schemeissuesecuritylevels schemeissuesecuritylevels) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsUpdateSelective(schemeissuesecuritylevels);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecuritylevels.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "部分更新", "ID", kvalue, schemeissuesecuritylevels, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Schemeissuesecuritylevels到数据库中
	 * <param name="schemeissuesecuritylevels">需要更新的Schemeissuesecuritylevels</param>
	 */
	public int schemeissuesecuritylevelsUpdateWithBlobs(Schemeissuesecuritylevels schemeissuesecuritylevels) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsUpdateWithBlobs(schemeissuesecuritylevels);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemeissuesecuritylevels.getId());
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "更新含Blob", "ID", kvalue, schemeissuesecuritylevels, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Schemeissuesecuritylevels到数据库中
	 * <param name="schemeissuesecuritylevelsQueryCondition">附加的条件</param>
	 * <param name="schemeissuesecuritylevels">需要更新的Schemeissuesecuritylevels</param>
	 */
	public int schemeissuesecuritylevelsUpdateByCondition(Schemeissuesecuritylevels schemeissuesecuritylevels, SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsUpdateByCondition(schemeissuesecuritylevels, schemeissuesecuritylevelsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = this.getSchemeissuesecuritylevelsExampleConditionSql(schemeissuesecuritylevelsQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "条件更新", "conditionSql", kvalue, schemeissuesecuritylevels, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Schemeissuesecuritylevels到数据库中
	 * <param name="schemeissuesecuritylevelsQueryCondition">附加的条件</param>
	 * <param name="schemeissuesecuritylevels">需要更新的Schemeissuesecuritylevels</param>
	 */
	public int schemeissuesecuritylevelsUpdateSelectiveByCondition(Schemeissuesecuritylevels schemeissuesecuritylevels, SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) throws CacheException {
		int ret = this.getDao().schemeissuesecuritylevelsUpdateSelectiveByCondition(schemeissuesecuritylevels, schemeissuesecuritylevelsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
				this.getCache().clear("SCHEMEISSUESECURITYLEVELS");
			}
		}
		String kvalue = this.getSchemeissuesecuritylevelsExampleConditionSql(schemeissuesecuritylevelsQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEISSUESECURITYLEVELS", "批量部分更新", "conditionSql", kvalue, schemeissuesecuritylevels, ret);
		return ret;
	}
	
	public String getSchemeissuesecuritylevelsExampleConditionSql(SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < schemeissuesecuritylevelsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			SchemeissuesecuritylevelsExample.Criteria item = schemeissuesecuritylevelsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					SchemeissuesecuritylevelsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="schemeissuesecuritylevels">从数据库中查询一个对象Schemeissuesecuritylevels</param>
	 * <param name="AId"></param>
	 */
	public Schemeissuesecuritylevels schemeissuesecuritylevelsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
			String key = ("SCHEMEISSUESECURITYLEVELS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Schemeissuesecuritylevels obj = ((Schemeissuesecuritylevels)(this.getCache().get("SCHEMEISSUESECURITYLEVELS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritylevelsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITYLEVELS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritylevelsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="schemeissuesecuritylevelsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Schemeissuesecuritylevels> schemeissuesecuritylevelsSelectObjects(SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
			String key = ("SCHEMEISSUESECURITYLEVELS_" 
						+ ("queryObject_" + this.getSchemeissuesecuritylevelsExampleConditionSql(schemeissuesecuritylevelsQueryCondition)));
			List<Schemeissuesecuritylevels> obj = ((List<Schemeissuesecuritylevels>)(this.getCache().get("SCHEMEISSUESECURITYLEVELS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritylevelsSelectObjects(schemeissuesecuritylevelsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITYLEVELS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritylevelsSelectObjects(schemeissuesecuritylevelsQueryCondition);
		}
	}
	
	/**
	 * <param name="schemeissuesecuritylevelsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Schemeissuesecuritylevels> schemeissuesecuritylevelsSelectObjectsWithBLOBs(SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
			String key = ("SCHEMEISSUESECURITYLEVELS_" 
						+ ("queryObject_" + this.getSchemeissuesecuritylevelsExampleConditionSql(schemeissuesecuritylevelsQueryCondition)));
			List<Schemeissuesecuritylevels> obj = ((List<Schemeissuesecuritylevels>)(this.getCache().get("SCHEMEISSUESECURITYLEVELS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritylevelsSelectObjectsWithBLOBs(schemeissuesecuritylevelsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITYLEVELS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritylevelsSelectObjectsWithBLOBs(schemeissuesecuritylevelsQueryCondition);
		}
	}
	
	/**
	 * <param name="schemeissuesecuritylevelsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int schemeissuesecuritylevelsQuerySelectObjectsCount(SchemeissuesecuritylevelsExample schemeissuesecuritylevelsQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEISSUESECURITYLEVELS")) {
			String key = ("SCHEMEISSUESECURITYLEVELS_" 
						+ ("queryCount_" + this.getSchemeissuesecuritylevelsExampleConditionSql(schemeissuesecuritylevelsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SCHEMEISSUESECURITYLEVELS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemeissuesecuritylevelsQuerySelectObjectsCount(schemeissuesecuritylevelsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEISSUESECURITYLEVELS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemeissuesecuritylevelsQuerySelectObjectsCount(schemeissuesecuritylevelsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Schemepermissions到数据库中
	 * <param name="schemepermissions">需要插入的新对象</param>
	 */
	public int schemepermissionsInsert(Schemepermissions schemepermissions) throws CacheException {
		int ret = this.getDao().schemepermissionsInsert(schemepermissions);
		if (this.needCache("SCHEMEPERMISSIONS")) {
			this.getCache().clear("SCHEMEPERMISSIONS");
		}
		String kvalue = "";
		kvalue = (kvalue + schemepermissions.getId());
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "插入", "ID", kvalue, schemepermissions, ret);
		return ret;
	}
	
	/**
	 * <param name="schemepermissions">从数据库中删除一个对象Schemepermissions</param>
	 * <param name="AId"></param>
	 */
	public int schemepermissionsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().schemepermissionsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEPERMISSIONS")) {
				this.getCache().clear("SCHEMEPERMISSIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="schemepermissions">从数据库中删除一个对象Schemepermissions</param>
	 */
	public int schemepermissionsDeleteByCondition(SchemepermissionsExample schemepermissionsQueryCondition) throws CacheException {
		int ret = this.getDao().schemepermissionsDeleteByCondition(schemepermissionsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEPERMISSIONS")) {
				this.getCache().clear("SCHEMEPERMISSIONS");
			}
		}
		String kvalue = this.getSchemepermissionsExampleConditionSql(schemepermissionsQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "条件删除", "conditionSql", kvalue, schemepermissionsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Schemepermissions到数据库中
	 * <param name="schemepermissions">需要更新的Schemepermissions</param>
	 */
	public int schemepermissionsUpdate(Schemepermissions schemepermissions) throws CacheException {
		int ret = this.getDao().schemepermissionsUpdate(schemepermissions);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEPERMISSIONS")) {
				this.getCache().clear("SCHEMEPERMISSIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemepermissions.getId());
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "更新", "ID", kvalue, schemepermissions, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Schemepermissions到数据库中
	 * <param name="schemepermissions">需要更新的Schemepermissions</param>
	 */
	public int schemepermissionsUpdateSelective(Schemepermissions schemepermissions) throws CacheException {
		int ret = this.getDao().schemepermissionsUpdateSelective(schemepermissions);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEPERMISSIONS")) {
				this.getCache().clear("SCHEMEPERMISSIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + schemepermissions.getId());
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "部分更新", "ID", kvalue, schemepermissions, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Schemepermissions到数据库中
	 * <param name="schemepermissionsQueryCondition">附加的条件</param>
	 * <param name="schemepermissions">需要更新的Schemepermissions</param>
	 */
	public int schemepermissionsUpdateByCondition(Schemepermissions schemepermissions, SchemepermissionsExample schemepermissionsQueryCondition) throws CacheException {
		int ret = this.getDao().schemepermissionsUpdateByCondition(schemepermissions, schemepermissionsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEPERMISSIONS")) {
				this.getCache().clear("SCHEMEPERMISSIONS");
			}
		}
		String kvalue = this.getSchemepermissionsExampleConditionSql(schemepermissionsQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "条件更新", "conditionSql", kvalue, schemepermissions, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Schemepermissions到数据库中
	 * <param name="schemepermissionsQueryCondition">附加的条件</param>
	 * <param name="schemepermissions">需要更新的Schemepermissions</param>
	 */
	public int schemepermissionsUpdateSelectiveByCondition(Schemepermissions schemepermissions, SchemepermissionsExample schemepermissionsQueryCondition) throws CacheException {
		int ret = this.getDao().schemepermissionsUpdateSelectiveByCondition(schemepermissions, schemepermissionsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SCHEMEPERMISSIONS")) {
				this.getCache().clear("SCHEMEPERMISSIONS");
			}
		}
		String kvalue = this.getSchemepermissionsExampleConditionSql(schemepermissionsQueryCondition);
		this.operatesLogSimpleAdd("SCHEMEPERMISSIONS", "批量部分更新", "conditionSql", kvalue, schemepermissions, ret);
		return ret;
	}
	
	public String getSchemepermissionsExampleConditionSql(SchemepermissionsExample schemepermissionsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < schemepermissionsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			SchemepermissionsExample.Criteria item = schemepermissionsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					SchemepermissionsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="schemepermissions">从数据库中查询一个对象Schemepermissions</param>
	 * <param name="AId"></param>
	 */
	public Schemepermissions schemepermissionsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("SCHEMEPERMISSIONS")) {
			String key = ("SCHEMEPERMISSIONS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Schemepermissions obj = ((Schemepermissions)(this.getCache().get("SCHEMEPERMISSIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemepermissionsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("SCHEMEPERMISSIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemepermissionsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="schemepermissionsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Schemepermissions> schemepermissionsSelectObjects(SchemepermissionsExample schemepermissionsQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEPERMISSIONS")) {
			String key = ("SCHEMEPERMISSIONS_" 
						+ ("queryObject_" + this.getSchemepermissionsExampleConditionSql(schemepermissionsQueryCondition)));
			List<Schemepermissions> obj = ((List<Schemepermissions>)(this.getCache().get("SCHEMEPERMISSIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemepermissionsSelectObjects(schemepermissionsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEPERMISSIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemepermissionsSelectObjects(schemepermissionsQueryCondition);
		}
	}
	
	/**
	 * <param name="schemepermissionsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int schemepermissionsQuerySelectObjectsCount(SchemepermissionsExample schemepermissionsQueryCondition) throws CacheException {
		if (this.needCache("SCHEMEPERMISSIONS")) {
			String key = ("SCHEMEPERMISSIONS_" 
						+ ("queryCount_" + this.getSchemepermissionsExampleConditionSql(schemepermissionsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SCHEMEPERMISSIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().schemepermissionsQuerySelectObjectsCount(schemepermissionsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SCHEMEPERMISSIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().schemepermissionsQuerySelectObjectsCount(schemepermissionsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Searchrequest到数据库中
	 * <param name="searchrequest">需要插入的新对象</param>
	 */
	public int searchrequestInsert(SearchrequestWithBLOBs searchrequest) throws CacheException {
		int ret = this.getDao().searchrequestInsert(searchrequest);
		if (this.needCache("SEARCHREQUEST")) {
			this.getCache().clear("SEARCHREQUEST");
		}
		String kvalue = "";
		kvalue = (kvalue + searchrequest.getId());
		this.operatesLogSimpleAdd("SEARCHREQUEST", "插入", "ID", kvalue, searchrequest, ret);
		return ret;
	}
	
	/**
	 * <param name="searchrequest">从数据库中删除一个对象Searchrequest</param>
	 * <param name="AId"></param>
	 */
	public int searchrequestDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().searchrequestDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("SEARCHREQUEST", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="searchrequest">从数据库中删除一个对象Searchrequest</param>
	 */
	public int searchrequestDeleteByCondition(SearchrequestExample searchrequestQueryCondition) throws CacheException {
		int ret = this.getDao().searchrequestDeleteByCondition(searchrequestQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = this.getSearchrequestExampleConditionSql(searchrequestQueryCondition);
		this.operatesLogSimpleAdd("SEARCHREQUEST", "条件删除", "conditionSql", kvalue, searchrequestQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Searchrequest到数据库中
	 * <param name="searchrequest">需要更新的Searchrequest</param>
	 */
	public int searchrequestUpdate(SearchrequestWithBLOBs searchrequest) throws CacheException {
		int ret = this.getDao().searchrequestUpdate(searchrequest);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + searchrequest.getId());
		this.operatesLogSimpleAdd("SEARCHREQUEST", "更新", "ID", kvalue, searchrequest, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Searchrequest到数据库中
	 * <param name="searchrequest">需要更新的Searchrequest</param>
	 */
	public int searchrequestUpdateSelective(SearchrequestWithBLOBs searchrequest) throws CacheException {
		int ret = this.getDao().searchrequestUpdateSelective(searchrequest);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + searchrequest.getId());
		this.operatesLogSimpleAdd("SEARCHREQUEST", "部分更新", "ID", kvalue, searchrequest, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Searchrequest到数据库中
	 * <param name="searchrequest">需要更新的Searchrequest</param>
	 */
	public int searchrequestUpdateWithBlobs(SearchrequestWithBLOBs searchrequest) throws CacheException {
		int ret = this.getDao().searchrequestUpdateWithBlobs(searchrequest);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + searchrequest.getId());
		this.operatesLogSimpleAdd("SEARCHREQUEST", "更新含Blob", "ID", kvalue, searchrequest, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Searchrequest到数据库中
	 * <param name="searchrequestQueryCondition">附加的条件</param>
	 * <param name="searchrequest">需要更新的Searchrequest</param>
	 */
	public int searchrequestUpdateByCondition(SearchrequestWithBLOBs searchrequest, SearchrequestExample searchrequestQueryCondition) throws CacheException {
		int ret = this.getDao().searchrequestUpdateByCondition(searchrequest, searchrequestQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = this.getSearchrequestExampleConditionSql(searchrequestQueryCondition);
		this.operatesLogSimpleAdd("SEARCHREQUEST", "条件更新", "conditionSql", kvalue, searchrequest, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Searchrequest到数据库中
	 * <param name="searchrequestQueryCondition">附加的条件</param>
	 * <param name="searchrequest">需要更新的Searchrequest</param>
	 */
	public int searchrequestUpdateSelectiveByCondition(SearchrequestWithBLOBs searchrequest, SearchrequestExample searchrequestQueryCondition) throws CacheException {
		int ret = this.getDao().searchrequestUpdateSelectiveByCondition(searchrequest, searchrequestQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SEARCHREQUEST")) {
				this.getCache().clear("SEARCHREQUEST");
			}
		}
		String kvalue = this.getSearchrequestExampleConditionSql(searchrequestQueryCondition);
		this.operatesLogSimpleAdd("SEARCHREQUEST", "批量部分更新", "conditionSql", kvalue, searchrequest, ret);
		return ret;
	}
	
	public String getSearchrequestExampleConditionSql(SearchrequestExample searchrequestQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < searchrequestQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			SearchrequestExample.Criteria item = searchrequestQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					SearchrequestExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="searchrequest">从数据库中查询一个对象Searchrequest</param>
	 * <param name="AId"></param>
	 */
	public Searchrequest searchrequestSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("SEARCHREQUEST")) {
			String key = ("SEARCHREQUEST_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Searchrequest obj = ((Searchrequest)(this.getCache().get("SEARCHREQUEST", key)));
			if ((obj == null)) {
				obj = this.getDao().searchrequestSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("SEARCHREQUEST", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().searchrequestSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="searchrequestQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Searchrequest> searchrequestSelectObjects(SearchrequestExample searchrequestQueryCondition) throws CacheException {
		if (this.needCache("SEARCHREQUEST")) {
			String key = ("SEARCHREQUEST_" 
						+ ("queryObject_" + this.getSearchrequestExampleConditionSql(searchrequestQueryCondition)));
			List<Searchrequest> obj = ((List<Searchrequest>)(this.getCache().get("SEARCHREQUEST", key)));
			if ((obj == null)) {
				obj = this.getDao().searchrequestSelectObjects(searchrequestQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SEARCHREQUEST", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().searchrequestSelectObjects(searchrequestQueryCondition);
		}
	}
	
	/**
	 * <param name="searchrequestQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<SearchrequestWithBLOBs> searchrequestSelectObjectsWithBLOBs(SearchrequestExample searchrequestQueryCondition) throws CacheException {
		if (this.needCache("SEARCHREQUEST")) {
			String key = ("SEARCHREQUEST_" 
						+ ("queryObject_" + this.getSearchrequestExampleConditionSql(searchrequestQueryCondition)));
			List<SearchrequestWithBLOBs> obj = ((List<SearchrequestWithBLOBs>)(this.getCache().get("SEARCHREQUEST", key)));
			if ((obj == null)) {
				obj = this.getDao().searchrequestSelectObjectsWithBLOBs(searchrequestQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SEARCHREQUEST", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().searchrequestSelectObjectsWithBLOBs(searchrequestQueryCondition);
		}
	}
	
	/**
	 * <param name="searchrequestQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int searchrequestQuerySelectObjectsCount(SearchrequestExample searchrequestQueryCondition) throws CacheException {
		if (this.needCache("SEARCHREQUEST")) {
			String key = ("SEARCHREQUEST_" 
						+ ("queryCount_" + this.getSearchrequestExampleConditionSql(searchrequestQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SEARCHREQUEST", key)));
			if ((obj == null)) {
				obj = this.getDao().searchrequestQuerySelectObjectsCount(searchrequestQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SEARCHREQUEST", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().searchrequestQuerySelectObjectsCount(searchrequestQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象SequenceValueItem到数据库中
	 * <param name="sequenceValueItem">需要插入的新对象</param>
	 */
	public int sequenceValueItemInsert(SequenceValueItem sequenceValueItem) throws CacheException {
		int ret = this.getDao().sequenceValueItemInsert(sequenceValueItem);
		if (this.needCache("SEQUENCE_VALUE_ITEM")) {
			this.getCache().clear("SEQUENCE_VALUE_ITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + sequenceValueItem.getSeqName());
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "插入", "SEQ_NAME", kvalue, sequenceValueItem, ret);
		return ret;
	}
	
	/**
	 * <param name="sequenceValueItem">从数据库中删除一个对象SequenceValueItem</param>
	 * <param name="ASeqName"></param>
	 */
	public int sequenceValueItemDeleteByPrimaryKey(String ASeqName) throws CacheException {
		int ret = this.getDao().sequenceValueItemDeleteByPrimaryKey(ASeqName);
		if ((ret > 0)) {
			if (this.needCache("SEQUENCE_VALUE_ITEM")) {
				this.getCache().clear("SEQUENCE_VALUE_ITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ASeqName);
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "删除", "SEQ_NAME", kvalue, ASeqName, ret);
		return ret;
	}
	
	/**
	 * <param name="sequenceValueItem">从数据库中删除一个对象SequenceValueItem</param>
	 */
	public int sequenceValueItemDeleteByCondition(SequenceValueItemExample sequenceValueItemQueryCondition) throws CacheException {
		int ret = this.getDao().sequenceValueItemDeleteByCondition(sequenceValueItemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SEQUENCE_VALUE_ITEM")) {
				this.getCache().clear("SEQUENCE_VALUE_ITEM");
			}
		}
		String kvalue = this.getSequenceValueItemExampleConditionSql(sequenceValueItemQueryCondition);
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "条件删除", "conditionSql", kvalue, sequenceValueItemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象SequenceValueItem到数据库中
	 * <param name="sequenceValueItem">需要更新的SequenceValueItem</param>
	 */
	public int sequenceValueItemUpdate(SequenceValueItem sequenceValueItem) throws CacheException {
		int ret = this.getDao().sequenceValueItemUpdate(sequenceValueItem);
		if ((ret > 0)) {
			if (this.needCache("SEQUENCE_VALUE_ITEM")) {
				this.getCache().clear("SEQUENCE_VALUE_ITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + sequenceValueItem.getSeqName());
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "更新", "SEQ_NAME", kvalue, sequenceValueItem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性SequenceValueItem到数据库中
	 * <param name="sequenceValueItem">需要更新的SequenceValueItem</param>
	 */
	public int sequenceValueItemUpdateSelective(SequenceValueItem sequenceValueItem) throws CacheException {
		int ret = this.getDao().sequenceValueItemUpdateSelective(sequenceValueItem);
		if ((ret > 0)) {
			if (this.needCache("SEQUENCE_VALUE_ITEM")) {
				this.getCache().clear("SEQUENCE_VALUE_ITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + sequenceValueItem.getSeqName());
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "部分更新", "SEQ_NAME", kvalue, sequenceValueItem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象SequenceValueItem到数据库中
	 * <param name="sequenceValueItemQueryCondition">附加的条件</param>
	 * <param name="sequenceValueItem">需要更新的SequenceValueItem</param>
	 */
	public int sequenceValueItemUpdateByCondition(SequenceValueItem sequenceValueItem, SequenceValueItemExample sequenceValueItemQueryCondition) throws CacheException {
		int ret = this.getDao().sequenceValueItemUpdateByCondition(sequenceValueItem, sequenceValueItemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SEQUENCE_VALUE_ITEM")) {
				this.getCache().clear("SEQUENCE_VALUE_ITEM");
			}
		}
		String kvalue = this.getSequenceValueItemExampleConditionSql(sequenceValueItemQueryCondition);
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "条件更新", "conditionSql", kvalue, sequenceValueItem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象SequenceValueItem到数据库中
	 * <param name="sequenceValueItemQueryCondition">附加的条件</param>
	 * <param name="sequenceValueItem">需要更新的SequenceValueItem</param>
	 */
	public int sequenceValueItemUpdateSelectiveByCondition(SequenceValueItem sequenceValueItem, SequenceValueItemExample sequenceValueItemQueryCondition) throws CacheException {
		int ret = this.getDao().sequenceValueItemUpdateSelectiveByCondition(sequenceValueItem, sequenceValueItemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SEQUENCE_VALUE_ITEM")) {
				this.getCache().clear("SEQUENCE_VALUE_ITEM");
			}
		}
		String kvalue = this.getSequenceValueItemExampleConditionSql(sequenceValueItemQueryCondition);
		this.operatesLogSimpleAdd("SEQUENCE_VALUE_ITEM", "批量部分更新", "conditionSql", kvalue, sequenceValueItem, ret);
		return ret;
	}
	
	public String getSequenceValueItemExampleConditionSql(SequenceValueItemExample sequenceValueItemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < sequenceValueItemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			SequenceValueItemExample.Criteria item = sequenceValueItemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					SequenceValueItemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="sequenceValueItem">从数据库中查询一个对象SequenceValueItem</param>
	 * <param name="ASeqName"></param>
	 */
	public SequenceValueItem sequenceValueItemSelectByPrimaryKey(String ASeqName) throws CacheException {
		if (this.needCache("SEQUENCE_VALUE_ITEM")) {
			String key = ("SEQUENCE_VALUE_ITEM_" 
						+ (("_BYUNIINDEX_" + ASeqName) 
						+ "_"));
			SequenceValueItem obj = ((SequenceValueItem)(this.getCache().get("SEQUENCE_VALUE_ITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().sequenceValueItemSelectByPrimaryKey(ASeqName);
				if ((obj != null)) {
					this.getCache().put("SEQUENCE_VALUE_ITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().sequenceValueItemSelectByPrimaryKey(ASeqName);
		}
	}
	
	/**
	 * <param name="sequenceValueItemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<SequenceValueItem> sequenceValueItemSelectObjects(SequenceValueItemExample sequenceValueItemQueryCondition) throws CacheException {
		if (this.needCache("SEQUENCE_VALUE_ITEM")) {
			String key = ("SEQUENCE_VALUE_ITEM_" 
						+ ("queryObject_" + this.getSequenceValueItemExampleConditionSql(sequenceValueItemQueryCondition)));
			List<SequenceValueItem> obj = ((List<SequenceValueItem>)(this.getCache().get("SEQUENCE_VALUE_ITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().sequenceValueItemSelectObjects(sequenceValueItemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SEQUENCE_VALUE_ITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().sequenceValueItemSelectObjects(sequenceValueItemQueryCondition);
		}
	}
	
	/**
	 * <param name="sequenceValueItemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int sequenceValueItemQuerySelectObjectsCount(SequenceValueItemExample sequenceValueItemQueryCondition) throws CacheException {
		if (this.needCache("SEQUENCE_VALUE_ITEM")) {
			String key = ("SEQUENCE_VALUE_ITEM_" 
						+ ("queryCount_" + this.getSequenceValueItemExampleConditionSql(sequenceValueItemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SEQUENCE_VALUE_ITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().sequenceValueItemQuerySelectObjectsCount(sequenceValueItemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SEQUENCE_VALUE_ITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().sequenceValueItemQuerySelectObjectsCount(sequenceValueItemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Serviceconfig到数据库中
	 * <param name="serviceconfig">需要插入的新对象</param>
	 */
	public int serviceconfigInsert(Serviceconfig serviceconfig) throws CacheException {
		int ret = this.getDao().serviceconfigInsert(serviceconfig);
		if (this.needCache("SERVICECONFIG")) {
			this.getCache().clear("SERVICECONFIG");
		}
		String kvalue = "";
		kvalue = (kvalue + serviceconfig.getId());
		this.operatesLogSimpleAdd("SERVICECONFIG", "插入", "ID", kvalue, serviceconfig, ret);
		return ret;
	}
	
	/**
	 * <param name="serviceconfig">从数据库中删除一个对象Serviceconfig</param>
	 * <param name="AId"></param>
	 */
	public int serviceconfigDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().serviceconfigDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("SERVICECONFIG")) {
				this.getCache().clear("SERVICECONFIG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("SERVICECONFIG", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="serviceconfig">从数据库中删除一个对象Serviceconfig</param>
	 */
	public int serviceconfigDeleteByCondition(ServiceconfigExample serviceconfigQueryCondition) throws CacheException {
		int ret = this.getDao().serviceconfigDeleteByCondition(serviceconfigQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SERVICECONFIG")) {
				this.getCache().clear("SERVICECONFIG");
			}
		}
		String kvalue = this.getServiceconfigExampleConditionSql(serviceconfigQueryCondition);
		this.operatesLogSimpleAdd("SERVICECONFIG", "条件删除", "conditionSql", kvalue, serviceconfigQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Serviceconfig到数据库中
	 * <param name="serviceconfig">需要更新的Serviceconfig</param>
	 */
	public int serviceconfigUpdate(Serviceconfig serviceconfig) throws CacheException {
		int ret = this.getDao().serviceconfigUpdate(serviceconfig);
		if ((ret > 0)) {
			if (this.needCache("SERVICECONFIG")) {
				this.getCache().clear("SERVICECONFIG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + serviceconfig.getId());
		this.operatesLogSimpleAdd("SERVICECONFIG", "更新", "ID", kvalue, serviceconfig, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Serviceconfig到数据库中
	 * <param name="serviceconfig">需要更新的Serviceconfig</param>
	 */
	public int serviceconfigUpdateSelective(Serviceconfig serviceconfig) throws CacheException {
		int ret = this.getDao().serviceconfigUpdateSelective(serviceconfig);
		if ((ret > 0)) {
			if (this.needCache("SERVICECONFIG")) {
				this.getCache().clear("SERVICECONFIG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + serviceconfig.getId());
		this.operatesLogSimpleAdd("SERVICECONFIG", "部分更新", "ID", kvalue, serviceconfig, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Serviceconfig到数据库中
	 * <param name="serviceconfigQueryCondition">附加的条件</param>
	 * <param name="serviceconfig">需要更新的Serviceconfig</param>
	 */
	public int serviceconfigUpdateByCondition(Serviceconfig serviceconfig, ServiceconfigExample serviceconfigQueryCondition) throws CacheException {
		int ret = this.getDao().serviceconfigUpdateByCondition(serviceconfig, serviceconfigQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SERVICECONFIG")) {
				this.getCache().clear("SERVICECONFIG");
			}
		}
		String kvalue = this.getServiceconfigExampleConditionSql(serviceconfigQueryCondition);
		this.operatesLogSimpleAdd("SERVICECONFIG", "条件更新", "conditionSql", kvalue, serviceconfig, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Serviceconfig到数据库中
	 * <param name="serviceconfigQueryCondition">附加的条件</param>
	 * <param name="serviceconfig">需要更新的Serviceconfig</param>
	 */
	public int serviceconfigUpdateSelectiveByCondition(Serviceconfig serviceconfig, ServiceconfigExample serviceconfigQueryCondition) throws CacheException {
		int ret = this.getDao().serviceconfigUpdateSelectiveByCondition(serviceconfig, serviceconfigQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SERVICECONFIG")) {
				this.getCache().clear("SERVICECONFIG");
			}
		}
		String kvalue = this.getServiceconfigExampleConditionSql(serviceconfigQueryCondition);
		this.operatesLogSimpleAdd("SERVICECONFIG", "批量部分更新", "conditionSql", kvalue, serviceconfig, ret);
		return ret;
	}
	
	public String getServiceconfigExampleConditionSql(ServiceconfigExample serviceconfigQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < serviceconfigQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ServiceconfigExample.Criteria item = serviceconfigQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ServiceconfigExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="serviceconfig">从数据库中查询一个对象Serviceconfig</param>
	 * <param name="AId"></param>
	 */
	public Serviceconfig serviceconfigSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("SERVICECONFIG")) {
			String key = ("SERVICECONFIG_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Serviceconfig obj = ((Serviceconfig)(this.getCache().get("SERVICECONFIG", key)));
			if ((obj == null)) {
				obj = this.getDao().serviceconfigSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("SERVICECONFIG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().serviceconfigSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="serviceconfigQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Serviceconfig> serviceconfigSelectObjects(ServiceconfigExample serviceconfigQueryCondition) throws CacheException {
		if (this.needCache("SERVICECONFIG")) {
			String key = ("SERVICECONFIG_" 
						+ ("queryObject_" + this.getServiceconfigExampleConditionSql(serviceconfigQueryCondition)));
			List<Serviceconfig> obj = ((List<Serviceconfig>)(this.getCache().get("SERVICECONFIG", key)));
			if ((obj == null)) {
				obj = this.getDao().serviceconfigSelectObjects(serviceconfigQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SERVICECONFIG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().serviceconfigSelectObjects(serviceconfigQueryCondition);
		}
	}
	
	/**
	 * <param name="serviceconfigQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int serviceconfigQuerySelectObjectsCount(ServiceconfigExample serviceconfigQueryCondition) throws CacheException {
		if (this.needCache("SERVICECONFIG")) {
			String key = ("SERVICECONFIG_" 
						+ ("queryCount_" + this.getServiceconfigExampleConditionSql(serviceconfigQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SERVICECONFIG", key)));
			if ((obj == null)) {
				obj = this.getDao().serviceconfigQuerySelectObjectsCount(serviceconfigQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SERVICECONFIG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().serviceconfigQuerySelectObjectsCount(serviceconfigQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Sharepermissions到数据库中
	 * <param name="sharepermissions">需要插入的新对象</param>
	 */
	public int sharepermissionsInsert(Sharepermissions sharepermissions) throws CacheException {
		int ret = this.getDao().sharepermissionsInsert(sharepermissions);
		if (this.needCache("SHAREPERMISSIONS")) {
			this.getCache().clear("SHAREPERMISSIONS");
		}
		String kvalue = "";
		kvalue = (kvalue + sharepermissions.getId());
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "插入", "ID", kvalue, sharepermissions, ret);
		return ret;
	}
	
	/**
	 * <param name="sharepermissions">从数据库中删除一个对象Sharepermissions</param>
	 * <param name="AId"></param>
	 */
	public int sharepermissionsDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().sharepermissionsDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("SHAREPERMISSIONS")) {
				this.getCache().clear("SHAREPERMISSIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="sharepermissions">从数据库中删除一个对象Sharepermissions</param>
	 */
	public int sharepermissionsDeleteByCondition(SharepermissionsExample sharepermissionsQueryCondition) throws CacheException {
		int ret = this.getDao().sharepermissionsDeleteByCondition(sharepermissionsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SHAREPERMISSIONS")) {
				this.getCache().clear("SHAREPERMISSIONS");
			}
		}
		String kvalue = this.getSharepermissionsExampleConditionSql(sharepermissionsQueryCondition);
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "条件删除", "conditionSql", kvalue, sharepermissionsQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Sharepermissions到数据库中
	 * <param name="sharepermissions">需要更新的Sharepermissions</param>
	 */
	public int sharepermissionsUpdate(Sharepermissions sharepermissions) throws CacheException {
		int ret = this.getDao().sharepermissionsUpdate(sharepermissions);
		if ((ret > 0)) {
			if (this.needCache("SHAREPERMISSIONS")) {
				this.getCache().clear("SHAREPERMISSIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + sharepermissions.getId());
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "更新", "ID", kvalue, sharepermissions, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Sharepermissions到数据库中
	 * <param name="sharepermissions">需要更新的Sharepermissions</param>
	 */
	public int sharepermissionsUpdateSelective(Sharepermissions sharepermissions) throws CacheException {
		int ret = this.getDao().sharepermissionsUpdateSelective(sharepermissions);
		if ((ret > 0)) {
			if (this.needCache("SHAREPERMISSIONS")) {
				this.getCache().clear("SHAREPERMISSIONS");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + sharepermissions.getId());
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "部分更新", "ID", kvalue, sharepermissions, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Sharepermissions到数据库中
	 * <param name="sharepermissionsQueryCondition">附加的条件</param>
	 * <param name="sharepermissions">需要更新的Sharepermissions</param>
	 */
	public int sharepermissionsUpdateByCondition(Sharepermissions sharepermissions, SharepermissionsExample sharepermissionsQueryCondition) throws CacheException {
		int ret = this.getDao().sharepermissionsUpdateByCondition(sharepermissions, sharepermissionsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SHAREPERMISSIONS")) {
				this.getCache().clear("SHAREPERMISSIONS");
			}
		}
		String kvalue = this.getSharepermissionsExampleConditionSql(sharepermissionsQueryCondition);
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "条件更新", "conditionSql", kvalue, sharepermissions, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Sharepermissions到数据库中
	 * <param name="sharepermissionsQueryCondition">附加的条件</param>
	 * <param name="sharepermissions">需要更新的Sharepermissions</param>
	 */
	public int sharepermissionsUpdateSelectiveByCondition(Sharepermissions sharepermissions, SharepermissionsExample sharepermissionsQueryCondition) throws CacheException {
		int ret = this.getDao().sharepermissionsUpdateSelectiveByCondition(sharepermissions, sharepermissionsQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("SHAREPERMISSIONS")) {
				this.getCache().clear("SHAREPERMISSIONS");
			}
		}
		String kvalue = this.getSharepermissionsExampleConditionSql(sharepermissionsQueryCondition);
		this.operatesLogSimpleAdd("SHAREPERMISSIONS", "批量部分更新", "conditionSql", kvalue, sharepermissions, ret);
		return ret;
	}
	
	public String getSharepermissionsExampleConditionSql(SharepermissionsExample sharepermissionsQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < sharepermissionsQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			SharepermissionsExample.Criteria item = sharepermissionsQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					SharepermissionsExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="sharepermissions">从数据库中查询一个对象Sharepermissions</param>
	 * <param name="AId"></param>
	 */
	public Sharepermissions sharepermissionsSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("SHAREPERMISSIONS")) {
			String key = ("SHAREPERMISSIONS_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Sharepermissions obj = ((Sharepermissions)(this.getCache().get("SHAREPERMISSIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().sharepermissionsSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("SHAREPERMISSIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().sharepermissionsSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="sharepermissionsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Sharepermissions> sharepermissionsSelectObjects(SharepermissionsExample sharepermissionsQueryCondition) throws CacheException {
		if (this.needCache("SHAREPERMISSIONS")) {
			String key = ("SHAREPERMISSIONS_" 
						+ ("queryObject_" + this.getSharepermissionsExampleConditionSql(sharepermissionsQueryCondition)));
			List<Sharepermissions> obj = ((List<Sharepermissions>)(this.getCache().get("SHAREPERMISSIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().sharepermissionsSelectObjects(sharepermissionsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SHAREPERMISSIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().sharepermissionsSelectObjects(sharepermissionsQueryCondition);
		}
	}
	
	/**
	 * <param name="sharepermissionsQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int sharepermissionsQuerySelectObjectsCount(SharepermissionsExample sharepermissionsQueryCondition) throws CacheException {
		if (this.needCache("SHAREPERMISSIONS")) {
			String key = ("SHAREPERMISSIONS_" 
						+ ("queryCount_" + this.getSharepermissionsExampleConditionSql(sharepermissionsQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("SHAREPERMISSIONS", key)));
			if ((obj == null)) {
				obj = this.getDao().sharepermissionsQuerySelectObjectsCount(sharepermissionsQueryCondition);
				if ((obj != null)) {
					this.getCache().put("SHAREPERMISSIONS", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().sharepermissionsQuerySelectObjectsCount(sharepermissionsQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象TrackbackPing到数据库中
	 * <param name="trackbackPing">需要插入的新对象</param>
	 */
	public int trackbackPingInsert(TrackbackPing trackbackPing) throws CacheException {
		int ret = this.getDao().trackbackPingInsert(trackbackPing);
		if (this.needCache("TRACKBACK_PING")) {
			this.getCache().clear("TRACKBACK_PING");
		}
		String kvalue = "";
		kvalue = (kvalue + trackbackPing.getId());
		this.operatesLogSimpleAdd("TRACKBACK_PING", "插入", "ID", kvalue, trackbackPing, ret);
		return ret;
	}
	
	/**
	 * <param name="trackbackPing">从数据库中删除一个对象TrackbackPing</param>
	 * <param name="AId"></param>
	 */
	public int trackbackPingDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().trackbackPingDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("TRACKBACK_PING")) {
				this.getCache().clear("TRACKBACK_PING");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("TRACKBACK_PING", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="trackbackPing">从数据库中删除一个对象TrackbackPing</param>
	 */
	public int trackbackPingDeleteByCondition(TrackbackPingExample trackbackPingQueryCondition) throws CacheException {
		int ret = this.getDao().trackbackPingDeleteByCondition(trackbackPingQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("TRACKBACK_PING")) {
				this.getCache().clear("TRACKBACK_PING");
			}
		}
		String kvalue = this.getTrackbackPingExampleConditionSql(trackbackPingQueryCondition);
		this.operatesLogSimpleAdd("TRACKBACK_PING", "条件删除", "conditionSql", kvalue, trackbackPingQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象TrackbackPing到数据库中
	 * <param name="trackbackPing">需要更新的TrackbackPing</param>
	 */
	public int trackbackPingUpdate(TrackbackPing trackbackPing) throws CacheException {
		int ret = this.getDao().trackbackPingUpdate(trackbackPing);
		if ((ret > 0)) {
			if (this.needCache("TRACKBACK_PING")) {
				this.getCache().clear("TRACKBACK_PING");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + trackbackPing.getId());
		this.operatesLogSimpleAdd("TRACKBACK_PING", "更新", "ID", kvalue, trackbackPing, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性TrackbackPing到数据库中
	 * <param name="trackbackPing">需要更新的TrackbackPing</param>
	 */
	public int trackbackPingUpdateSelective(TrackbackPing trackbackPing) throws CacheException {
		int ret = this.getDao().trackbackPingUpdateSelective(trackbackPing);
		if ((ret > 0)) {
			if (this.needCache("TRACKBACK_PING")) {
				this.getCache().clear("TRACKBACK_PING");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + trackbackPing.getId());
		this.operatesLogSimpleAdd("TRACKBACK_PING", "部分更新", "ID", kvalue, trackbackPing, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象TrackbackPing到数据库中
	 * <param name="trackbackPingQueryCondition">附加的条件</param>
	 * <param name="trackbackPing">需要更新的TrackbackPing</param>
	 */
	public int trackbackPingUpdateByCondition(TrackbackPing trackbackPing, TrackbackPingExample trackbackPingQueryCondition) throws CacheException {
		int ret = this.getDao().trackbackPingUpdateByCondition(trackbackPing, trackbackPingQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("TRACKBACK_PING")) {
				this.getCache().clear("TRACKBACK_PING");
			}
		}
		String kvalue = this.getTrackbackPingExampleConditionSql(trackbackPingQueryCondition);
		this.operatesLogSimpleAdd("TRACKBACK_PING", "条件更新", "conditionSql", kvalue, trackbackPing, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象TrackbackPing到数据库中
	 * <param name="trackbackPingQueryCondition">附加的条件</param>
	 * <param name="trackbackPing">需要更新的TrackbackPing</param>
	 */
	public int trackbackPingUpdateSelectiveByCondition(TrackbackPing trackbackPing, TrackbackPingExample trackbackPingQueryCondition) throws CacheException {
		int ret = this.getDao().trackbackPingUpdateSelectiveByCondition(trackbackPing, trackbackPingQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("TRACKBACK_PING")) {
				this.getCache().clear("TRACKBACK_PING");
			}
		}
		String kvalue = this.getTrackbackPingExampleConditionSql(trackbackPingQueryCondition);
		this.operatesLogSimpleAdd("TRACKBACK_PING", "批量部分更新", "conditionSql", kvalue, trackbackPing, ret);
		return ret;
	}
	
	public String getTrackbackPingExampleConditionSql(TrackbackPingExample trackbackPingQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < trackbackPingQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			TrackbackPingExample.Criteria item = trackbackPingQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					TrackbackPingExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="trackbackPing">从数据库中查询一个对象TrackbackPing</param>
	 * <param name="AId"></param>
	 */
	public TrackbackPing trackbackPingSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("TRACKBACK_PING")) {
			String key = ("TRACKBACK_PING_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			TrackbackPing obj = ((TrackbackPing)(this.getCache().get("TRACKBACK_PING", key)));
			if ((obj == null)) {
				obj = this.getDao().trackbackPingSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("TRACKBACK_PING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trackbackPingSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="trackbackPingQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<TrackbackPing> trackbackPingSelectObjects(TrackbackPingExample trackbackPingQueryCondition) throws CacheException {
		if (this.needCache("TRACKBACK_PING")) {
			String key = ("TRACKBACK_PING_" 
						+ ("queryObject_" + this.getTrackbackPingExampleConditionSql(trackbackPingQueryCondition)));
			List<TrackbackPing> obj = ((List<TrackbackPing>)(this.getCache().get("TRACKBACK_PING", key)));
			if ((obj == null)) {
				obj = this.getDao().trackbackPingSelectObjects(trackbackPingQueryCondition);
				if ((obj != null)) {
					this.getCache().put("TRACKBACK_PING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trackbackPingSelectObjects(trackbackPingQueryCondition);
		}
	}
	
	/**
	 * <param name="trackbackPingQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int trackbackPingQuerySelectObjectsCount(TrackbackPingExample trackbackPingQueryCondition) throws CacheException {
		if (this.needCache("TRACKBACK_PING")) {
			String key = ("TRACKBACK_PING_" 
						+ ("queryCount_" + this.getTrackbackPingExampleConditionSql(trackbackPingQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("TRACKBACK_PING", key)));
			if ((obj == null)) {
				obj = this.getDao().trackbackPingQuerySelectObjectsCount(trackbackPingQueryCondition);
				if ((obj != null)) {
					this.getCache().put("TRACKBACK_PING", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trackbackPingQuerySelectObjectsCount(trackbackPingQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Trustedapp到数据库中
	 * <param name="trustedapp">需要插入的新对象</param>
	 */
	public int trustedappInsert(TrustedappWithBLOBs trustedapp) throws CacheException {
		int ret = this.getDao().trustedappInsert(trustedapp);
		if (this.needCache("TRUSTEDAPP")) {
			this.getCache().clear("TRUSTEDAPP");
		}
		String kvalue = "";
		kvalue = (kvalue + trustedapp.getId());
		this.operatesLogSimpleAdd("TRUSTEDAPP", "插入", "ID", kvalue, trustedapp, ret);
		return ret;
	}
	
	/**
	 * <param name="trustedapp">从数据库中删除一个对象Trustedapp</param>
	 * <param name="AId"></param>
	 */
	public int trustedappDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().trustedappDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("TRUSTEDAPP", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="trustedapp">从数据库中删除一个对象Trustedapp</param>
	 */
	public int trustedappDeleteByCondition(TrustedappExample trustedappQueryCondition) throws CacheException {
		int ret = this.getDao().trustedappDeleteByCondition(trustedappQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = this.getTrustedappExampleConditionSql(trustedappQueryCondition);
		this.operatesLogSimpleAdd("TRUSTEDAPP", "条件删除", "conditionSql", kvalue, trustedappQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Trustedapp到数据库中
	 * <param name="trustedapp">需要更新的Trustedapp</param>
	 */
	public int trustedappUpdate(TrustedappWithBLOBs trustedapp) throws CacheException {
		int ret = this.getDao().trustedappUpdate(trustedapp);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + trustedapp.getId());
		this.operatesLogSimpleAdd("TRUSTEDAPP", "更新", "ID", kvalue, trustedapp, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Trustedapp到数据库中
	 * <param name="trustedapp">需要更新的Trustedapp</param>
	 */
	public int trustedappUpdateSelective(TrustedappWithBLOBs trustedapp) throws CacheException {
		int ret = this.getDao().trustedappUpdateSelective(trustedapp);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + trustedapp.getId());
		this.operatesLogSimpleAdd("TRUSTEDAPP", "部分更新", "ID", kvalue, trustedapp, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Trustedapp到数据库中
	 * <param name="trustedapp">需要更新的Trustedapp</param>
	 */
	public int trustedappUpdateWithBlobs(TrustedappWithBLOBs trustedapp) throws CacheException {
		int ret = this.getDao().trustedappUpdateWithBlobs(trustedapp);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + trustedapp.getId());
		this.operatesLogSimpleAdd("TRUSTEDAPP", "更新含Blob", "ID", kvalue, trustedapp, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Trustedapp到数据库中
	 * <param name="trustedappQueryCondition">附加的条件</param>
	 * <param name="trustedapp">需要更新的Trustedapp</param>
	 */
	public int trustedappUpdateByCondition(TrustedappWithBLOBs trustedapp, TrustedappExample trustedappQueryCondition) throws CacheException {
		int ret = this.getDao().trustedappUpdateByCondition(trustedapp, trustedappQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = this.getTrustedappExampleConditionSql(trustedappQueryCondition);
		this.operatesLogSimpleAdd("TRUSTEDAPP", "条件更新", "conditionSql", kvalue, trustedapp, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Trustedapp到数据库中
	 * <param name="trustedappQueryCondition">附加的条件</param>
	 * <param name="trustedapp">需要更新的Trustedapp</param>
	 */
	public int trustedappUpdateSelectiveByCondition(TrustedappWithBLOBs trustedapp, TrustedappExample trustedappQueryCondition) throws CacheException {
		int ret = this.getDao().trustedappUpdateSelectiveByCondition(trustedapp, trustedappQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("TRUSTEDAPP")) {
				this.getCache().clear("TRUSTEDAPP");
			}
		}
		String kvalue = this.getTrustedappExampleConditionSql(trustedappQueryCondition);
		this.operatesLogSimpleAdd("TRUSTEDAPP", "批量部分更新", "conditionSql", kvalue, trustedapp, ret);
		return ret;
	}
	
	public String getTrustedappExampleConditionSql(TrustedappExample trustedappQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < trustedappQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			TrustedappExample.Criteria item = trustedappQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					TrustedappExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="trustedapp">从数据库中查询一个对象Trustedapp</param>
	 * <param name="AId"></param>
	 */
	public Trustedapp trustedappSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("TRUSTEDAPP")) {
			String key = ("TRUSTEDAPP_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Trustedapp obj = ((Trustedapp)(this.getCache().get("TRUSTEDAPP", key)));
			if ((obj == null)) {
				obj = this.getDao().trustedappSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("TRUSTEDAPP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trustedappSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="trustedappQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Trustedapp> trustedappSelectObjects(TrustedappExample trustedappQueryCondition) throws CacheException {
		if (this.needCache("TRUSTEDAPP")) {
			String key = ("TRUSTEDAPP_" 
						+ ("queryObject_" + this.getTrustedappExampleConditionSql(trustedappQueryCondition)));
			List<Trustedapp> obj = ((List<Trustedapp>)(this.getCache().get("TRUSTEDAPP", key)));
			if ((obj == null)) {
				obj = this.getDao().trustedappSelectObjects(trustedappQueryCondition);
				if ((obj != null)) {
					this.getCache().put("TRUSTEDAPP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trustedappSelectObjects(trustedappQueryCondition);
		}
	}
	
	/**
	 * <param name="trustedappQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<TrustedappWithBLOBs> trustedappSelectObjectsWithBLOBs(TrustedappExample trustedappQueryCondition) throws CacheException {
		if (this.needCache("TRUSTEDAPP")) {
			String key = ("TRUSTEDAPP_" 
						+ ("queryObject_" + this.getTrustedappExampleConditionSql(trustedappQueryCondition)));
			List<TrustedappWithBLOBs> obj = ((List<TrustedappWithBLOBs>)(this.getCache().get("TRUSTEDAPP", key)));
			if ((obj == null)) {
				obj = this.getDao().trustedappSelectObjectsWithBLOBs(trustedappQueryCondition);
				if ((obj != null)) {
					this.getCache().put("TRUSTEDAPP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trustedappSelectObjectsWithBLOBs(trustedappQueryCondition);
		}
	}
	
	/**
	 * <param name="trustedappQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int trustedappQuerySelectObjectsCount(TrustedappExample trustedappQueryCondition) throws CacheException {
		if (this.needCache("TRUSTEDAPP")) {
			String key = ("TRUSTEDAPP_" 
						+ ("queryCount_" + this.getTrustedappExampleConditionSql(trustedappQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("TRUSTEDAPP", key)));
			if ((obj == null)) {
				obj = this.getDao().trustedappQuerySelectObjectsCount(trustedappQueryCondition);
				if ((obj != null)) {
					this.getCache().put("TRUSTEDAPP", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().trustedappQuerySelectObjectsCount(trustedappQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Upgradehistory到数据库中
	 * <param name="upgradehistory">需要插入的新对象</param>
	 */
	public int upgradehistoryInsert(Upgradehistory upgradehistory) throws CacheException {
		int ret = this.getDao().upgradehistoryInsert(upgradehistory);
		if (this.needCache("UPGRADEHISTORY")) {
			this.getCache().clear("UPGRADEHISTORY");
		}
		String kvalue = "";
		kvalue = (kvalue + upgradehistory.getUpgradeclass());
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "插入", "UPGRADECLASS", kvalue, upgradehistory, ret);
		return ret;
	}
	
	/**
	 * <param name="upgradehistory">从数据库中删除一个对象Upgradehistory</param>
	 * <param name="AUpgradeclass"></param>
	 */
	public int upgradehistoryDeleteByPrimaryKey(String AUpgradeclass) throws CacheException {
		int ret = this.getDao().upgradehistoryDeleteByPrimaryKey(AUpgradeclass);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEHISTORY")) {
				this.getCache().clear("UPGRADEHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AUpgradeclass);
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "删除", "UPGRADECLASS", kvalue, AUpgradeclass, ret);
		return ret;
	}
	
	/**
	 * <param name="upgradehistory">从数据库中删除一个对象Upgradehistory</param>
	 */
	public int upgradehistoryDeleteByCondition(UpgradehistoryExample upgradehistoryQueryCondition) throws CacheException {
		int ret = this.getDao().upgradehistoryDeleteByCondition(upgradehistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEHISTORY")) {
				this.getCache().clear("UPGRADEHISTORY");
			}
		}
		String kvalue = this.getUpgradehistoryExampleConditionSql(upgradehistoryQueryCondition);
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "条件删除", "conditionSql", kvalue, upgradehistoryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Upgradehistory到数据库中
	 * <param name="upgradehistory">需要更新的Upgradehistory</param>
	 */
	public int upgradehistoryUpdate(Upgradehistory upgradehistory) throws CacheException {
		int ret = this.getDao().upgradehistoryUpdate(upgradehistory);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEHISTORY")) {
				this.getCache().clear("UPGRADEHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + upgradehistory.getUpgradeclass());
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "更新", "UPGRADECLASS", kvalue, upgradehistory, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Upgradehistory到数据库中
	 * <param name="upgradehistory">需要更新的Upgradehistory</param>
	 */
	public int upgradehistoryUpdateSelective(Upgradehistory upgradehistory) throws CacheException {
		int ret = this.getDao().upgradehistoryUpdateSelective(upgradehistory);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEHISTORY")) {
				this.getCache().clear("UPGRADEHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + upgradehistory.getUpgradeclass());
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "部分更新", "UPGRADECLASS", kvalue, upgradehistory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Upgradehistory到数据库中
	 * <param name="upgradehistoryQueryCondition">附加的条件</param>
	 * <param name="upgradehistory">需要更新的Upgradehistory</param>
	 */
	public int upgradehistoryUpdateByCondition(Upgradehistory upgradehistory, UpgradehistoryExample upgradehistoryQueryCondition) throws CacheException {
		int ret = this.getDao().upgradehistoryUpdateByCondition(upgradehistory, upgradehistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEHISTORY")) {
				this.getCache().clear("UPGRADEHISTORY");
			}
		}
		String kvalue = this.getUpgradehistoryExampleConditionSql(upgradehistoryQueryCondition);
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "条件更新", "conditionSql", kvalue, upgradehistory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Upgradehistory到数据库中
	 * <param name="upgradehistoryQueryCondition">附加的条件</param>
	 * <param name="upgradehistory">需要更新的Upgradehistory</param>
	 */
	public int upgradehistoryUpdateSelectiveByCondition(Upgradehistory upgradehistory, UpgradehistoryExample upgradehistoryQueryCondition) throws CacheException {
		int ret = this.getDao().upgradehistoryUpdateSelectiveByCondition(upgradehistory, upgradehistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEHISTORY")) {
				this.getCache().clear("UPGRADEHISTORY");
			}
		}
		String kvalue = this.getUpgradehistoryExampleConditionSql(upgradehistoryQueryCondition);
		this.operatesLogSimpleAdd("UPGRADEHISTORY", "批量部分更新", "conditionSql", kvalue, upgradehistory, ret);
		return ret;
	}
	
	public String getUpgradehistoryExampleConditionSql(UpgradehistoryExample upgradehistoryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < upgradehistoryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			UpgradehistoryExample.Criteria item = upgradehistoryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					UpgradehistoryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="upgradehistory">从数据库中查询一个对象Upgradehistory</param>
	 * <param name="AUpgradeclass"></param>
	 */
	public Upgradehistory upgradehistorySelectByPrimaryKey(String AUpgradeclass) throws CacheException {
		if (this.needCache("UPGRADEHISTORY")) {
			String key = ("UPGRADEHISTORY_" 
						+ (("_BYUNIINDEX_" + AUpgradeclass) 
						+ "_"));
			Upgradehistory obj = ((Upgradehistory)(this.getCache().get("UPGRADEHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().upgradehistorySelectByPrimaryKey(AUpgradeclass);
				if ((obj != null)) {
					this.getCache().put("UPGRADEHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().upgradehistorySelectByPrimaryKey(AUpgradeclass);
		}
	}
	
	/**
	 * <param name="upgradehistoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Upgradehistory> upgradehistorySelectObjects(UpgradehistoryExample upgradehistoryQueryCondition) throws CacheException {
		if (this.needCache("UPGRADEHISTORY")) {
			String key = ("UPGRADEHISTORY_" 
						+ ("queryObject_" + this.getUpgradehistoryExampleConditionSql(upgradehistoryQueryCondition)));
			List<Upgradehistory> obj = ((List<Upgradehistory>)(this.getCache().get("UPGRADEHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().upgradehistorySelectObjects(upgradehistoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("UPGRADEHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().upgradehistorySelectObjects(upgradehistoryQueryCondition);
		}
	}
	
	/**
	 * <param name="upgradehistoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int upgradehistoryQuerySelectObjectsCount(UpgradehistoryExample upgradehistoryQueryCondition) throws CacheException {
		if (this.needCache("UPGRADEHISTORY")) {
			String key = ("UPGRADEHISTORY_" 
						+ ("queryCount_" + this.getUpgradehistoryExampleConditionSql(upgradehistoryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("UPGRADEHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().upgradehistoryQuerySelectObjectsCount(upgradehistoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("UPGRADEHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().upgradehistoryQuerySelectObjectsCount(upgradehistoryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Upgradeversionhistory到数据库中
	 * <param name="upgradeversionhistory">需要插入的新对象</param>
	 */
	public int upgradeversionhistoryInsert(Upgradeversionhistory upgradeversionhistory) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryInsert(upgradeversionhistory);
		if (this.needCache("UPGRADEVERSIONHISTORY")) {
			this.getCache().clear("UPGRADEVERSIONHISTORY");
		}
		String kvalue = "";
		kvalue = (kvalue + upgradeversionhistory.getTargetbuild());
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "插入", "TARGETBUILD", kvalue, upgradeversionhistory, ret);
		return ret;
	}
	
	/**
	 * <param name="upgradeversionhistory">从数据库中删除一个对象Upgradeversionhistory</param>
	 * <param name="ATargetbuild"></param>
	 */
	public int upgradeversionhistoryDeleteByPrimaryKey(String ATargetbuild) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryDeleteByPrimaryKey(ATargetbuild);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEVERSIONHISTORY")) {
				this.getCache().clear("UPGRADEVERSIONHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + ATargetbuild);
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "删除", "TARGETBUILD", kvalue, ATargetbuild, ret);
		return ret;
	}
	
	/**
	 * <param name="upgradeversionhistory">从数据库中删除一个对象Upgradeversionhistory</param>
	 */
	public int upgradeversionhistoryDeleteByCondition(UpgradeversionhistoryExample upgradeversionhistoryQueryCondition) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryDeleteByCondition(upgradeversionhistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEVERSIONHISTORY")) {
				this.getCache().clear("UPGRADEVERSIONHISTORY");
			}
		}
		String kvalue = this.getUpgradeversionhistoryExampleConditionSql(upgradeversionhistoryQueryCondition);
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "条件删除", "conditionSql", kvalue, upgradeversionhistoryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Upgradeversionhistory到数据库中
	 * <param name="upgradeversionhistory">需要更新的Upgradeversionhistory</param>
	 */
	public int upgradeversionhistoryUpdate(Upgradeversionhistory upgradeversionhistory) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryUpdate(upgradeversionhistory);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEVERSIONHISTORY")) {
				this.getCache().clear("UPGRADEVERSIONHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + upgradeversionhistory.getTargetbuild());
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "更新", "TARGETBUILD", kvalue, upgradeversionhistory, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Upgradeversionhistory到数据库中
	 * <param name="upgradeversionhistory">需要更新的Upgradeversionhistory</param>
	 */
	public int upgradeversionhistoryUpdateSelective(Upgradeversionhistory upgradeversionhistory) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryUpdateSelective(upgradeversionhistory);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEVERSIONHISTORY")) {
				this.getCache().clear("UPGRADEVERSIONHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + upgradeversionhistory.getTargetbuild());
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "部分更新", "TARGETBUILD", kvalue, upgradeversionhistory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Upgradeversionhistory到数据库中
	 * <param name="upgradeversionhistoryQueryCondition">附加的条件</param>
	 * <param name="upgradeversionhistory">需要更新的Upgradeversionhistory</param>
	 */
	public int upgradeversionhistoryUpdateByCondition(Upgradeversionhistory upgradeversionhistory, UpgradeversionhistoryExample upgradeversionhistoryQueryCondition) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryUpdateByCondition(upgradeversionhistory, upgradeversionhistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEVERSIONHISTORY")) {
				this.getCache().clear("UPGRADEVERSIONHISTORY");
			}
		}
		String kvalue = this.getUpgradeversionhistoryExampleConditionSql(upgradeversionhistoryQueryCondition);
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "条件更新", "conditionSql", kvalue, upgradeversionhistory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Upgradeversionhistory到数据库中
	 * <param name="upgradeversionhistoryQueryCondition">附加的条件</param>
	 * <param name="upgradeversionhistory">需要更新的Upgradeversionhistory</param>
	 */
	public int upgradeversionhistoryUpdateSelectiveByCondition(Upgradeversionhistory upgradeversionhistory, UpgradeversionhistoryExample upgradeversionhistoryQueryCondition) throws CacheException {
		int ret = this.getDao().upgradeversionhistoryUpdateSelectiveByCondition(upgradeversionhistory, upgradeversionhistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("UPGRADEVERSIONHISTORY")) {
				this.getCache().clear("UPGRADEVERSIONHISTORY");
			}
		}
		String kvalue = this.getUpgradeversionhistoryExampleConditionSql(upgradeversionhistoryQueryCondition);
		this.operatesLogSimpleAdd("UPGRADEVERSIONHISTORY", "批量部分更新", "conditionSql", kvalue, upgradeversionhistory, ret);
		return ret;
	}
	
	public String getUpgradeversionhistoryExampleConditionSql(UpgradeversionhistoryExample upgradeversionhistoryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < upgradeversionhistoryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			UpgradeversionhistoryExample.Criteria item = upgradeversionhistoryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					UpgradeversionhistoryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="upgradeversionhistory">从数据库中查询一个对象Upgradeversionhistory</param>
	 * <param name="ATargetbuild"></param>
	 */
	public Upgradeversionhistory upgradeversionhistorySelectByPrimaryKey(String ATargetbuild) throws CacheException {
		if (this.needCache("UPGRADEVERSIONHISTORY")) {
			String key = ("UPGRADEVERSIONHISTORY_" 
						+ (("_BYUNIINDEX_" + ATargetbuild) 
						+ "_"));
			Upgradeversionhistory obj = ((Upgradeversionhistory)(this.getCache().get("UPGRADEVERSIONHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().upgradeversionhistorySelectByPrimaryKey(ATargetbuild);
				if ((obj != null)) {
					this.getCache().put("UPGRADEVERSIONHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().upgradeversionhistorySelectByPrimaryKey(ATargetbuild);
		}
	}
	
	/**
	 * <param name="upgradeversionhistoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Upgradeversionhistory> upgradeversionhistorySelectObjects(UpgradeversionhistoryExample upgradeversionhistoryQueryCondition) throws CacheException {
		if (this.needCache("UPGRADEVERSIONHISTORY")) {
			String key = ("UPGRADEVERSIONHISTORY_" 
						+ ("queryObject_" + this.getUpgradeversionhistoryExampleConditionSql(upgradeversionhistoryQueryCondition)));
			List<Upgradeversionhistory> obj = ((List<Upgradeversionhistory>)(this.getCache().get("UPGRADEVERSIONHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().upgradeversionhistorySelectObjects(upgradeversionhistoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("UPGRADEVERSIONHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().upgradeversionhistorySelectObjects(upgradeversionhistoryQueryCondition);
		}
	}
	
	/**
	 * <param name="upgradeversionhistoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int upgradeversionhistoryQuerySelectObjectsCount(UpgradeversionhistoryExample upgradeversionhistoryQueryCondition) throws CacheException {
		if (this.needCache("UPGRADEVERSIONHISTORY")) {
			String key = ("UPGRADEVERSIONHISTORY_" 
						+ ("queryCount_" + this.getUpgradeversionhistoryExampleConditionSql(upgradeversionhistoryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("UPGRADEVERSIONHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().upgradeversionhistoryQuerySelectObjectsCount(upgradeversionhistoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("UPGRADEVERSIONHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().upgradeversionhistoryQuerySelectObjectsCount(upgradeversionhistoryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Userassociation到数据库中
	 * <param name="userassociation">需要插入的新对象</param>
	 */
	public int userassociationInsert(Userassociation userassociation) throws CacheException {
		int ret = this.getDao().userassociationInsert(userassociation);
		if (this.needCache("USERASSOCIATION")) {
			this.getCache().clear("USERASSOCIATION");
		}
		String kvalue = "";
		kvalue = (kvalue + userassociation.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSourceName());
		this.operatesLogSimpleAdd("USERASSOCIATION", "插入", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NAME", kvalue, userassociation, ret);
		return ret;
	}
	
	/**
	 * <param name="userassociation">从数据库中删除一个对象Userassociation</param>
	 * <param name="AUserassociationKey"> 主键类</param>
	 */
	public int userassociationDeleteByPrimaryKey(UserassociationKey AUserassociationKey) throws CacheException {
		int ret = this.getDao().userassociationDeleteByPrimaryKey(AUserassociationKey);
		if ((ret > 0)) {
			if (this.needCache("USERASSOCIATION")) {
				this.getCache().clear("USERASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AUserassociationKey.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + AUserassociationKey.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + AUserassociationKey.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + AUserassociationKey.getSourceName());
		this.operatesLogSimpleAdd("USERASSOCIATION", "删除", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NAME", kvalue, AUserassociationKey, ret);
		return ret;
	}
	
	/**
	 * <param name="userassociation">从数据库中删除一个对象Userassociation</param>
	 */
	public int userassociationDeleteByCondition(UserassociationExample userassociationQueryCondition) throws CacheException {
		int ret = this.getDao().userassociationDeleteByCondition(userassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERASSOCIATION")) {
				this.getCache().clear("USERASSOCIATION");
			}
		}
		String kvalue = this.getUserassociationExampleConditionSql(userassociationQueryCondition);
		this.operatesLogSimpleAdd("USERASSOCIATION", "条件删除", "conditionSql", kvalue, userassociationQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Userassociation到数据库中
	 * <param name="userassociation">需要更新的Userassociation</param>
	 */
	public int userassociationUpdate(Userassociation userassociation) throws CacheException {
		int ret = this.getDao().userassociationUpdate(userassociation);
		if ((ret > 0)) {
			if (this.needCache("USERASSOCIATION")) {
				this.getCache().clear("USERASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userassociation.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSourceName());
		this.operatesLogSimpleAdd("USERASSOCIATION", "更新", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NAME", kvalue, userassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Userassociation到数据库中
	 * <param name="userassociation">需要更新的Userassociation</param>
	 */
	public int userassociationUpdateSelective(Userassociation userassociation) throws CacheException {
		int ret = this.getDao().userassociationUpdateSelective(userassociation);
		if ((ret > 0)) {
			if (this.needCache("USERASSOCIATION")) {
				this.getCache().clear("USERASSOCIATION");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userassociation.getAssociationType());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSinkNodeEntity());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSinkNodeId());
		kvalue = (kvalue + ",");
		kvalue = (kvalue + userassociation.getSourceName());
		this.operatesLogSimpleAdd("USERASSOCIATION", "部分更新", "ASSOCIATION_TYPE,SINK_NODE_ENTITY,SINK_NODE_ID,SOURCE_NAME", kvalue, userassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Userassociation到数据库中
	 * <param name="userassociationQueryCondition">附加的条件</param>
	 * <param name="userassociation">需要更新的Userassociation</param>
	 */
	public int userassociationUpdateByCondition(Userassociation userassociation, UserassociationExample userassociationQueryCondition) throws CacheException {
		int ret = this.getDao().userassociationUpdateByCondition(userassociation, userassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERASSOCIATION")) {
				this.getCache().clear("USERASSOCIATION");
			}
		}
		String kvalue = this.getUserassociationExampleConditionSql(userassociationQueryCondition);
		this.operatesLogSimpleAdd("USERASSOCIATION", "条件更新", "conditionSql", kvalue, userassociation, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Userassociation到数据库中
	 * <param name="userassociationQueryCondition">附加的条件</param>
	 * <param name="userassociation">需要更新的Userassociation</param>
	 */
	public int userassociationUpdateSelectiveByCondition(Userassociation userassociation, UserassociationExample userassociationQueryCondition) throws CacheException {
		int ret = this.getDao().userassociationUpdateSelectiveByCondition(userassociation, userassociationQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERASSOCIATION")) {
				this.getCache().clear("USERASSOCIATION");
			}
		}
		String kvalue = this.getUserassociationExampleConditionSql(userassociationQueryCondition);
		this.operatesLogSimpleAdd("USERASSOCIATION", "批量部分更新", "conditionSql", kvalue, userassociation, ret);
		return ret;
	}
	
	public String getUserassociationExampleConditionSql(UserassociationExample userassociationQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < userassociationQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			UserassociationExample.Criteria item = userassociationQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					UserassociationExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="userassociation">从数据库中查询一个对象Userassociation</param>
	 * <param name="AUserassociationKey"> 主键类</param>
	 */
	public Userassociation userassociationSelectByPrimaryKey(UserassociationKey AUserassociationKey) throws CacheException {
		if (this.needCache("USERASSOCIATION")) {
			String key = ("USERASSOCIATION_" + "_BYUNIINDEX_");
			Userassociation obj = ((Userassociation)(this.getCache().get("USERASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().userassociationSelectByPrimaryKey(AUserassociationKey);
				if ((obj != null)) {
					this.getCache().put("USERASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userassociationSelectByPrimaryKey(AUserassociationKey);
		}
	}
	
	/**
	 * <param name="userassociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Userassociation> userassociationSelectObjects(UserassociationExample userassociationQueryCondition) throws CacheException {
		if (this.needCache("USERASSOCIATION")) {
			String key = ("USERASSOCIATION_" 
						+ ("queryObject_" + this.getUserassociationExampleConditionSql(userassociationQueryCondition)));
			List<Userassociation> obj = ((List<Userassociation>)(this.getCache().get("USERASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().userassociationSelectObjects(userassociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userassociationSelectObjects(userassociationQueryCondition);
		}
	}
	
	/**
	 * <param name="userassociationQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int userassociationQuerySelectObjectsCount(UserassociationExample userassociationQueryCondition) throws CacheException {
		if (this.needCache("USERASSOCIATION")) {
			String key = ("USERASSOCIATION_" 
						+ ("queryCount_" + this.getUserassociationExampleConditionSql(userassociationQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("USERASSOCIATION", key)));
			if ((obj == null)) {
				obj = this.getDao().userassociationQuerySelectObjectsCount(userassociationQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERASSOCIATION", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userassociationQuerySelectObjectsCount(userassociationQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Userbase到数据库中
	 * <param name="userbase">需要插入的新对象</param>
	 */
	public int userbaseInsert(Userbase userbase) throws CacheException {
		int ret = this.getDao().userbaseInsert(userbase);
		if (this.needCache("USERBASE")) {
			this.getCache().clear("USERBASE");
		}
		String kvalue = "";
		kvalue = (kvalue + userbase.getId());
		this.operatesLogSimpleAdd("USERBASE", "插入", "ID", kvalue, userbase, ret);
		return ret;
	}
	
	/**
	 * <param name="userbase">从数据库中删除一个对象Userbase</param>
	 * <param name="AId"></param>
	 */
	public int userbaseDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().userbaseDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("USERBASE")) {
				this.getCache().clear("USERBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("USERBASE", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="userbase">从数据库中删除一个对象Userbase</param>
	 */
	public int userbaseDeleteByCondition(UserbaseExample userbaseQueryCondition) throws CacheException {
		int ret = this.getDao().userbaseDeleteByCondition(userbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERBASE")) {
				this.getCache().clear("USERBASE");
			}
		}
		String kvalue = this.getUserbaseExampleConditionSql(userbaseQueryCondition);
		this.operatesLogSimpleAdd("USERBASE", "条件删除", "conditionSql", kvalue, userbaseQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Userbase到数据库中
	 * <param name="userbase">需要更新的Userbase</param>
	 */
	public int userbaseUpdate(Userbase userbase) throws CacheException {
		int ret = this.getDao().userbaseUpdate(userbase);
		if ((ret > 0)) {
			if (this.needCache("USERBASE")) {
				this.getCache().clear("USERBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userbase.getId());
		this.operatesLogSimpleAdd("USERBASE", "更新", "ID", kvalue, userbase, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Userbase到数据库中
	 * <param name="userbase">需要更新的Userbase</param>
	 */
	public int userbaseUpdateSelective(Userbase userbase) throws CacheException {
		int ret = this.getDao().userbaseUpdateSelective(userbase);
		if ((ret > 0)) {
			if (this.needCache("USERBASE")) {
				this.getCache().clear("USERBASE");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userbase.getId());
		this.operatesLogSimpleAdd("USERBASE", "部分更新", "ID", kvalue, userbase, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Userbase到数据库中
	 * <param name="userbaseQueryCondition">附加的条件</param>
	 * <param name="userbase">需要更新的Userbase</param>
	 */
	public int userbaseUpdateByCondition(Userbase userbase, UserbaseExample userbaseQueryCondition) throws CacheException {
		int ret = this.getDao().userbaseUpdateByCondition(userbase, userbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERBASE")) {
				this.getCache().clear("USERBASE");
			}
		}
		String kvalue = this.getUserbaseExampleConditionSql(userbaseQueryCondition);
		this.operatesLogSimpleAdd("USERBASE", "条件更新", "conditionSql", kvalue, userbase, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Userbase到数据库中
	 * <param name="userbaseQueryCondition">附加的条件</param>
	 * <param name="userbase">需要更新的Userbase</param>
	 */
	public int userbaseUpdateSelectiveByCondition(Userbase userbase, UserbaseExample userbaseQueryCondition) throws CacheException {
		int ret = this.getDao().userbaseUpdateSelectiveByCondition(userbase, userbaseQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERBASE")) {
				this.getCache().clear("USERBASE");
			}
		}
		String kvalue = this.getUserbaseExampleConditionSql(userbaseQueryCondition);
		this.operatesLogSimpleAdd("USERBASE", "批量部分更新", "conditionSql", kvalue, userbase, ret);
		return ret;
	}
	
	public String getUserbaseExampleConditionSql(UserbaseExample userbaseQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < userbaseQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			UserbaseExample.Criteria item = userbaseQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					UserbaseExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="userbase">从数据库中查询一个对象Userbase</param>
	 * <param name="AId"></param>
	 */
	public Userbase userbaseSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("USERBASE")) {
			String key = ("USERBASE_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Userbase obj = ((Userbase)(this.getCache().get("USERBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().userbaseSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("USERBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userbaseSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="userbaseQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Userbase> userbaseSelectObjects(UserbaseExample userbaseQueryCondition) throws CacheException {
		if (this.needCache("USERBASE")) {
			String key = ("USERBASE_" 
						+ ("queryObject_" + this.getUserbaseExampleConditionSql(userbaseQueryCondition)));
			List<Userbase> obj = ((List<Userbase>)(this.getCache().get("USERBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().userbaseSelectObjects(userbaseQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userbaseSelectObjects(userbaseQueryCondition);
		}
	}
	
	/**
	 * <param name="userbaseQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int userbaseQuerySelectObjectsCount(UserbaseExample userbaseQueryCondition) throws CacheException {
		if (this.needCache("USERBASE")) {
			String key = ("USERBASE_" 
						+ ("queryCount_" + this.getUserbaseExampleConditionSql(userbaseQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("USERBASE", key)));
			if ((obj == null)) {
				obj = this.getDao().userbaseQuerySelectObjectsCount(userbaseQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERBASE", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userbaseQuerySelectObjectsCount(userbaseQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Userhistoryitem到数据库中
	 * <param name="userhistoryitem">需要插入的新对象</param>
	 */
	public int userhistoryitemInsert(Userhistoryitem userhistoryitem) throws CacheException {
		int ret = this.getDao().userhistoryitemInsert(userhistoryitem);
		if (this.needCache("USERHISTORYITEM")) {
			this.getCache().clear("USERHISTORYITEM");
		}
		String kvalue = "";
		kvalue = (kvalue + userhistoryitem.getId());
		this.operatesLogSimpleAdd("USERHISTORYITEM", "插入", "ID", kvalue, userhistoryitem, ret);
		return ret;
	}
	
	/**
	 * <param name="userhistoryitem">从数据库中删除一个对象Userhistoryitem</param>
	 * <param name="AId"></param>
	 */
	public int userhistoryitemDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().userhistoryitemDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("USERHISTORYITEM", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="userhistoryitem">从数据库中删除一个对象Userhistoryitem</param>
	 */
	public int userhistoryitemDeleteByCondition(UserhistoryitemExample userhistoryitemQueryCondition) throws CacheException {
		int ret = this.getDao().userhistoryitemDeleteByCondition(userhistoryitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = this.getUserhistoryitemExampleConditionSql(userhistoryitemQueryCondition);
		this.operatesLogSimpleAdd("USERHISTORYITEM", "条件删除", "conditionSql", kvalue, userhistoryitemQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Userhistoryitem到数据库中
	 * <param name="userhistoryitem">需要更新的Userhistoryitem</param>
	 */
	public int userhistoryitemUpdate(Userhistoryitem userhistoryitem) throws CacheException {
		int ret = this.getDao().userhistoryitemUpdate(userhistoryitem);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userhistoryitem.getId());
		this.operatesLogSimpleAdd("USERHISTORYITEM", "更新", "ID", kvalue, userhistoryitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Userhistoryitem到数据库中
	 * <param name="userhistoryitem">需要更新的Userhistoryitem</param>
	 */
	public int userhistoryitemUpdateSelective(Userhistoryitem userhistoryitem) throws CacheException {
		int ret = this.getDao().userhistoryitemUpdateSelective(userhistoryitem);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userhistoryitem.getId());
		this.operatesLogSimpleAdd("USERHISTORYITEM", "部分更新", "ID", kvalue, userhistoryitem, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Userhistoryitem到数据库中
	 * <param name="userhistoryitem">需要更新的Userhistoryitem</param>
	 */
	public int userhistoryitemUpdateWithBlobs(Userhistoryitem userhistoryitem) throws CacheException {
		int ret = this.getDao().userhistoryitemUpdateWithBlobs(userhistoryitem);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + userhistoryitem.getId());
		this.operatesLogSimpleAdd("USERHISTORYITEM", "更新含Blob", "ID", kvalue, userhistoryitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Userhistoryitem到数据库中
	 * <param name="userhistoryitemQueryCondition">附加的条件</param>
	 * <param name="userhistoryitem">需要更新的Userhistoryitem</param>
	 */
	public int userhistoryitemUpdateByCondition(Userhistoryitem userhistoryitem, UserhistoryitemExample userhistoryitemQueryCondition) throws CacheException {
		int ret = this.getDao().userhistoryitemUpdateByCondition(userhistoryitem, userhistoryitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = this.getUserhistoryitemExampleConditionSql(userhistoryitemQueryCondition);
		this.operatesLogSimpleAdd("USERHISTORYITEM", "条件更新", "conditionSql", kvalue, userhistoryitem, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Userhistoryitem到数据库中
	 * <param name="userhistoryitemQueryCondition">附加的条件</param>
	 * <param name="userhistoryitem">需要更新的Userhistoryitem</param>
	 */
	public int userhistoryitemUpdateSelectiveByCondition(Userhistoryitem userhistoryitem, UserhistoryitemExample userhistoryitemQueryCondition) throws CacheException {
		int ret = this.getDao().userhistoryitemUpdateSelectiveByCondition(userhistoryitem, userhistoryitemQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("USERHISTORYITEM")) {
				this.getCache().clear("USERHISTORYITEM");
			}
		}
		String kvalue = this.getUserhistoryitemExampleConditionSql(userhistoryitemQueryCondition);
		this.operatesLogSimpleAdd("USERHISTORYITEM", "批量部分更新", "conditionSql", kvalue, userhistoryitem, ret);
		return ret;
	}
	
	public String getUserhistoryitemExampleConditionSql(UserhistoryitemExample userhistoryitemQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < userhistoryitemQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			UserhistoryitemExample.Criteria item = userhistoryitemQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					UserhistoryitemExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="userhistoryitem">从数据库中查询一个对象Userhistoryitem</param>
	 * <param name="AId"></param>
	 */
	public Userhistoryitem userhistoryitemSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("USERHISTORYITEM")) {
			String key = ("USERHISTORYITEM_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Userhistoryitem obj = ((Userhistoryitem)(this.getCache().get("USERHISTORYITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().userhistoryitemSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("USERHISTORYITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userhistoryitemSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="userhistoryitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Userhistoryitem> userhistoryitemSelectObjects(UserhistoryitemExample userhistoryitemQueryCondition) throws CacheException {
		if (this.needCache("USERHISTORYITEM")) {
			String key = ("USERHISTORYITEM_" 
						+ ("queryObject_" + this.getUserhistoryitemExampleConditionSql(userhistoryitemQueryCondition)));
			List<Userhistoryitem> obj = ((List<Userhistoryitem>)(this.getCache().get("USERHISTORYITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().userhistoryitemSelectObjects(userhistoryitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERHISTORYITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userhistoryitemSelectObjects(userhistoryitemQueryCondition);
		}
	}
	
	/**
	 * <param name="userhistoryitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Userhistoryitem> userhistoryitemSelectObjectsWithBLOBs(UserhistoryitemExample userhistoryitemQueryCondition) throws CacheException {
		if (this.needCache("USERHISTORYITEM")) {
			String key = ("USERHISTORYITEM_" 
						+ ("queryObject_" + this.getUserhistoryitemExampleConditionSql(userhistoryitemQueryCondition)));
			List<Userhistoryitem> obj = ((List<Userhistoryitem>)(this.getCache().get("USERHISTORYITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().userhistoryitemSelectObjectsWithBLOBs(userhistoryitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERHISTORYITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userhistoryitemSelectObjectsWithBLOBs(userhistoryitemQueryCondition);
		}
	}
	
	/**
	 * <param name="userhistoryitemQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int userhistoryitemQuerySelectObjectsCount(UserhistoryitemExample userhistoryitemQueryCondition) throws CacheException {
		if (this.needCache("USERHISTORYITEM")) {
			String key = ("USERHISTORYITEM_" 
						+ ("queryCount_" + this.getUserhistoryitemExampleConditionSql(userhistoryitemQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("USERHISTORYITEM", key)));
			if ((obj == null)) {
				obj = this.getDao().userhistoryitemQuerySelectObjectsCount(userhistoryitemQueryCondition);
				if ((obj != null)) {
					this.getCache().put("USERHISTORYITEM", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().userhistoryitemQuerySelectObjectsCount(userhistoryitemQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Versioncontrol到数据库中
	 * <param name="versioncontrol">需要插入的新对象</param>
	 */
	public int versioncontrolInsert(Versioncontrol versioncontrol) throws CacheException {
		int ret = this.getDao().versioncontrolInsert(versioncontrol);
		if (this.needCache("VERSIONCONTROL")) {
			this.getCache().clear("VERSIONCONTROL");
		}
		String kvalue = "";
		kvalue = (kvalue + versioncontrol.getId());
		this.operatesLogSimpleAdd("VERSIONCONTROL", "插入", "ID", kvalue, versioncontrol, ret);
		return ret;
	}
	
	/**
	 * <param name="versioncontrol">从数据库中删除一个对象Versioncontrol</param>
	 * <param name="AId"></param>
	 */
	public int versioncontrolDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().versioncontrolDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("VERSIONCONTROL")) {
				this.getCache().clear("VERSIONCONTROL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("VERSIONCONTROL", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="versioncontrol">从数据库中删除一个对象Versioncontrol</param>
	 */
	public int versioncontrolDeleteByCondition(VersioncontrolExample versioncontrolQueryCondition) throws CacheException {
		int ret = this.getDao().versioncontrolDeleteByCondition(versioncontrolQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("VERSIONCONTROL")) {
				this.getCache().clear("VERSIONCONTROL");
			}
		}
		String kvalue = this.getVersioncontrolExampleConditionSql(versioncontrolQueryCondition);
		this.operatesLogSimpleAdd("VERSIONCONTROL", "条件删除", "conditionSql", kvalue, versioncontrolQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Versioncontrol到数据库中
	 * <param name="versioncontrol">需要更新的Versioncontrol</param>
	 */
	public int versioncontrolUpdate(Versioncontrol versioncontrol) throws CacheException {
		int ret = this.getDao().versioncontrolUpdate(versioncontrol);
		if ((ret > 0)) {
			if (this.needCache("VERSIONCONTROL")) {
				this.getCache().clear("VERSIONCONTROL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + versioncontrol.getId());
		this.operatesLogSimpleAdd("VERSIONCONTROL", "更新", "ID", kvalue, versioncontrol, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Versioncontrol到数据库中
	 * <param name="versioncontrol">需要更新的Versioncontrol</param>
	 */
	public int versioncontrolUpdateSelective(Versioncontrol versioncontrol) throws CacheException {
		int ret = this.getDao().versioncontrolUpdateSelective(versioncontrol);
		if ((ret > 0)) {
			if (this.needCache("VERSIONCONTROL")) {
				this.getCache().clear("VERSIONCONTROL");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + versioncontrol.getId());
		this.operatesLogSimpleAdd("VERSIONCONTROL", "部分更新", "ID", kvalue, versioncontrol, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Versioncontrol到数据库中
	 * <param name="versioncontrolQueryCondition">附加的条件</param>
	 * <param name="versioncontrol">需要更新的Versioncontrol</param>
	 */
	public int versioncontrolUpdateByCondition(Versioncontrol versioncontrol, VersioncontrolExample versioncontrolQueryCondition) throws CacheException {
		int ret = this.getDao().versioncontrolUpdateByCondition(versioncontrol, versioncontrolQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("VERSIONCONTROL")) {
				this.getCache().clear("VERSIONCONTROL");
			}
		}
		String kvalue = this.getVersioncontrolExampleConditionSql(versioncontrolQueryCondition);
		this.operatesLogSimpleAdd("VERSIONCONTROL", "条件更新", "conditionSql", kvalue, versioncontrol, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Versioncontrol到数据库中
	 * <param name="versioncontrolQueryCondition">附加的条件</param>
	 * <param name="versioncontrol">需要更新的Versioncontrol</param>
	 */
	public int versioncontrolUpdateSelectiveByCondition(Versioncontrol versioncontrol, VersioncontrolExample versioncontrolQueryCondition) throws CacheException {
		int ret = this.getDao().versioncontrolUpdateSelectiveByCondition(versioncontrol, versioncontrolQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("VERSIONCONTROL")) {
				this.getCache().clear("VERSIONCONTROL");
			}
		}
		String kvalue = this.getVersioncontrolExampleConditionSql(versioncontrolQueryCondition);
		this.operatesLogSimpleAdd("VERSIONCONTROL", "批量部分更新", "conditionSql", kvalue, versioncontrol, ret);
		return ret;
	}
	
	public String getVersioncontrolExampleConditionSql(VersioncontrolExample versioncontrolQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < versioncontrolQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			VersioncontrolExample.Criteria item = versioncontrolQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					VersioncontrolExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="versioncontrol">从数据库中查询一个对象Versioncontrol</param>
	 * <param name="AId"></param>
	 */
	public Versioncontrol versioncontrolSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("VERSIONCONTROL")) {
			String key = ("VERSIONCONTROL_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Versioncontrol obj = ((Versioncontrol)(this.getCache().get("VERSIONCONTROL", key)));
			if ((obj == null)) {
				obj = this.getDao().versioncontrolSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("VERSIONCONTROL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().versioncontrolSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="versioncontrolQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Versioncontrol> versioncontrolSelectObjects(VersioncontrolExample versioncontrolQueryCondition) throws CacheException {
		if (this.needCache("VERSIONCONTROL")) {
			String key = ("VERSIONCONTROL_" 
						+ ("queryObject_" + this.getVersioncontrolExampleConditionSql(versioncontrolQueryCondition)));
			List<Versioncontrol> obj = ((List<Versioncontrol>)(this.getCache().get("VERSIONCONTROL", key)));
			if ((obj == null)) {
				obj = this.getDao().versioncontrolSelectObjects(versioncontrolQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VERSIONCONTROL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().versioncontrolSelectObjects(versioncontrolQueryCondition);
		}
	}
	
	/**
	 * <param name="versioncontrolQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int versioncontrolQuerySelectObjectsCount(VersioncontrolExample versioncontrolQueryCondition) throws CacheException {
		if (this.needCache("VERSIONCONTROL")) {
			String key = ("VERSIONCONTROL_" 
						+ ("queryCount_" + this.getVersioncontrolExampleConditionSql(versioncontrolQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("VERSIONCONTROL", key)));
			if ((obj == null)) {
				obj = this.getDao().versioncontrolQuerySelectObjectsCount(versioncontrolQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VERSIONCONTROL", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().versioncontrolQuerySelectObjectsCount(versioncontrolQueryCondition);
		}
	}
	
	public String getViewTopdeepBeanExampleConditionSql(ViewTopdeepBeanExample viewTopdeepBeanQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < viewTopdeepBeanQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ViewTopdeepBeanExample.Criteria item = viewTopdeepBeanQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ViewTopdeepBeanExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="viewTopdeepBeanQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<ViewTopdeepBean> viewTopdeepBeanSelectObjects(ViewTopdeepBeanExample viewTopdeepBeanQueryCondition) throws CacheException {
		if (this.needCache("VIEW_TOPDEEP_BEAN")) {
			String key = ("VIEW_TOPDEEP_BEAN_" 
						+ ("queryObject_" + this.getViewTopdeepBeanExampleConditionSql(viewTopdeepBeanQueryCondition)));
			List<ViewTopdeepBean> obj = ((List<ViewTopdeepBean>)(this.getCache().get("VIEW_TOPDEEP_BEAN", key)));
			if ((obj == null)) {
				obj = this.getDao().viewTopdeepBeanSelectObjects(viewTopdeepBeanQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VIEW_TOPDEEP_BEAN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().viewTopdeepBeanSelectObjects(viewTopdeepBeanQueryCondition);
		}
	}
	
	/**
	 * <param name="viewTopdeepBeanQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int viewTopdeepBeanQuerySelectObjectsCount(ViewTopdeepBeanExample viewTopdeepBeanQueryCondition) throws CacheException {
		if (this.needCache("VIEW_TOPDEEP_BEAN")) {
			String key = ("VIEW_TOPDEEP_BEAN_" 
						+ ("queryCount_" + this.getViewTopdeepBeanExampleConditionSql(viewTopdeepBeanQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("VIEW_TOPDEEP_BEAN", key)));
			if ((obj == null)) {
				obj = this.getDao().viewTopdeepBeanQuerySelectObjectsCount(viewTopdeepBeanQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VIEW_TOPDEEP_BEAN", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().viewTopdeepBeanQuerySelectObjectsCount(viewTopdeepBeanQueryCondition);
		}
	}
	
	public String getViewTopdeepWorkExampleConditionSql(ViewTopdeepWorkExample viewTopdeepWorkQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < viewTopdeepWorkQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			ViewTopdeepWorkExample.Criteria item = viewTopdeepWorkQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					ViewTopdeepWorkExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="viewTopdeepWorkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<ViewTopdeepWork> viewTopdeepWorkSelectObjects(ViewTopdeepWorkExample viewTopdeepWorkQueryCondition) throws CacheException {
		if (this.needCache("VIEW_TOPDEEP_WORK")) {
			String key = ("VIEW_TOPDEEP_WORK_" 
						+ ("queryObject_" + this.getViewTopdeepWorkExampleConditionSql(viewTopdeepWorkQueryCondition)));
			List<ViewTopdeepWork> obj = ((List<ViewTopdeepWork>)(this.getCache().get("VIEW_TOPDEEP_WORK", key)));
			if ((obj == null)) {
				obj = this.getDao().viewTopdeepWorkSelectObjects(viewTopdeepWorkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VIEW_TOPDEEP_WORK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().viewTopdeepWorkSelectObjects(viewTopdeepWorkQueryCondition);
		}
	}
	
	/**
	 * <param name="viewTopdeepWorkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<ViewTopdeepWorkWithBLOBs> viewTopdeepWorkSelectObjectsWithBLOBs(ViewTopdeepWorkExample viewTopdeepWorkQueryCondition) throws CacheException {
		if (this.needCache("VIEW_TOPDEEP_WORK")) {
			String key = ("VIEW_TOPDEEP_WORK_" 
						+ ("queryObject_" + this.getViewTopdeepWorkExampleConditionSql(viewTopdeepWorkQueryCondition)));
			List<ViewTopdeepWorkWithBLOBs> obj = ((List<ViewTopdeepWorkWithBLOBs>)(this.getCache().get("VIEW_TOPDEEP_WORK", key)));
			if ((obj == null)) {
				obj = this.getDao().viewTopdeepWorkSelectObjectsWithBLOBs(viewTopdeepWorkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VIEW_TOPDEEP_WORK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().viewTopdeepWorkSelectObjectsWithBLOBs(viewTopdeepWorkQueryCondition);
		}
	}
	
	/**
	 * <param name="viewTopdeepWorkQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int viewTopdeepWorkQuerySelectObjectsCount(ViewTopdeepWorkExample viewTopdeepWorkQueryCondition) throws CacheException {
		if (this.needCache("VIEW_TOPDEEP_WORK")) {
			String key = ("VIEW_TOPDEEP_WORK_" 
						+ ("queryCount_" + this.getViewTopdeepWorkExampleConditionSql(viewTopdeepWorkQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("VIEW_TOPDEEP_WORK", key)));
			if ((obj == null)) {
				obj = this.getDao().viewTopdeepWorkQuerySelectObjectsCount(viewTopdeepWorkQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VIEW_TOPDEEP_WORK", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().viewTopdeepWorkQuerySelectObjectsCount(viewTopdeepWorkQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Votehistory到数据库中
	 * <param name="votehistory">需要插入的新对象</param>
	 */
	public int votehistoryInsert(Votehistory votehistory) throws CacheException {
		int ret = this.getDao().votehistoryInsert(votehistory);
		if (this.needCache("VOTEHISTORY")) {
			this.getCache().clear("VOTEHISTORY");
		}
		String kvalue = "";
		kvalue = (kvalue + votehistory.getId());
		this.operatesLogSimpleAdd("VOTEHISTORY", "插入", "ID", kvalue, votehistory, ret);
		return ret;
	}
	
	/**
	 * <param name="votehistory">从数据库中删除一个对象Votehistory</param>
	 * <param name="AId"></param>
	 */
	public int votehistoryDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().votehistoryDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("VOTEHISTORY")) {
				this.getCache().clear("VOTEHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("VOTEHISTORY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="votehistory">从数据库中删除一个对象Votehistory</param>
	 */
	public int votehistoryDeleteByCondition(VotehistoryExample votehistoryQueryCondition) throws CacheException {
		int ret = this.getDao().votehistoryDeleteByCondition(votehistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("VOTEHISTORY")) {
				this.getCache().clear("VOTEHISTORY");
			}
		}
		String kvalue = this.getVotehistoryExampleConditionSql(votehistoryQueryCondition);
		this.operatesLogSimpleAdd("VOTEHISTORY", "条件删除", "conditionSql", kvalue, votehistoryQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Votehistory到数据库中
	 * <param name="votehistory">需要更新的Votehistory</param>
	 */
	public int votehistoryUpdate(Votehistory votehistory) throws CacheException {
		int ret = this.getDao().votehistoryUpdate(votehistory);
		if ((ret > 0)) {
			if (this.needCache("VOTEHISTORY")) {
				this.getCache().clear("VOTEHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + votehistory.getId());
		this.operatesLogSimpleAdd("VOTEHISTORY", "更新", "ID", kvalue, votehistory, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Votehistory到数据库中
	 * <param name="votehistory">需要更新的Votehistory</param>
	 */
	public int votehistoryUpdateSelective(Votehistory votehistory) throws CacheException {
		int ret = this.getDao().votehistoryUpdateSelective(votehistory);
		if ((ret > 0)) {
			if (this.needCache("VOTEHISTORY")) {
				this.getCache().clear("VOTEHISTORY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + votehistory.getId());
		this.operatesLogSimpleAdd("VOTEHISTORY", "部分更新", "ID", kvalue, votehistory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Votehistory到数据库中
	 * <param name="votehistoryQueryCondition">附加的条件</param>
	 * <param name="votehistory">需要更新的Votehistory</param>
	 */
	public int votehistoryUpdateByCondition(Votehistory votehistory, VotehistoryExample votehistoryQueryCondition) throws CacheException {
		int ret = this.getDao().votehistoryUpdateByCondition(votehistory, votehistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("VOTEHISTORY")) {
				this.getCache().clear("VOTEHISTORY");
			}
		}
		String kvalue = this.getVotehistoryExampleConditionSql(votehistoryQueryCondition);
		this.operatesLogSimpleAdd("VOTEHISTORY", "条件更新", "conditionSql", kvalue, votehistory, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Votehistory到数据库中
	 * <param name="votehistoryQueryCondition">附加的条件</param>
	 * <param name="votehistory">需要更新的Votehistory</param>
	 */
	public int votehistoryUpdateSelectiveByCondition(Votehistory votehistory, VotehistoryExample votehistoryQueryCondition) throws CacheException {
		int ret = this.getDao().votehistoryUpdateSelectiveByCondition(votehistory, votehistoryQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("VOTEHISTORY")) {
				this.getCache().clear("VOTEHISTORY");
			}
		}
		String kvalue = this.getVotehistoryExampleConditionSql(votehistoryQueryCondition);
		this.operatesLogSimpleAdd("VOTEHISTORY", "批量部分更新", "conditionSql", kvalue, votehistory, ret);
		return ret;
	}
	
	public String getVotehistoryExampleConditionSql(VotehistoryExample votehistoryQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < votehistoryQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			VotehistoryExample.Criteria item = votehistoryQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					VotehistoryExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="votehistory">从数据库中查询一个对象Votehistory</param>
	 * <param name="AId"></param>
	 */
	public Votehistory votehistorySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("VOTEHISTORY")) {
			String key = ("VOTEHISTORY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Votehistory obj = ((Votehistory)(this.getCache().get("VOTEHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().votehistorySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("VOTEHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().votehistorySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="votehistoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Votehistory> votehistorySelectObjects(VotehistoryExample votehistoryQueryCondition) throws CacheException {
		if (this.needCache("VOTEHISTORY")) {
			String key = ("VOTEHISTORY_" 
						+ ("queryObject_" + this.getVotehistoryExampleConditionSql(votehistoryQueryCondition)));
			List<Votehistory> obj = ((List<Votehistory>)(this.getCache().get("VOTEHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().votehistorySelectObjects(votehistoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VOTEHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().votehistorySelectObjects(votehistoryQueryCondition);
		}
	}
	
	/**
	 * <param name="votehistoryQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int votehistoryQuerySelectObjectsCount(VotehistoryExample votehistoryQueryCondition) throws CacheException {
		if (this.needCache("VOTEHISTORY")) {
			String key = ("VOTEHISTORY_" 
						+ ("queryCount_" + this.getVotehistoryExampleConditionSql(votehistoryQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("VOTEHISTORY", key)));
			if ((obj == null)) {
				obj = this.getDao().votehistoryQuerySelectObjectsCount(votehistoryQueryCondition);
				if ((obj != null)) {
					this.getCache().put("VOTEHISTORY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().votehistoryQuerySelectObjectsCount(votehistoryQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Workflowscheme到数据库中
	 * <param name="workflowscheme">需要插入的新对象</param>
	 */
	public int workflowschemeInsert(Workflowscheme workflowscheme) throws CacheException {
		int ret = this.getDao().workflowschemeInsert(workflowscheme);
		if (this.needCache("WORKFLOWSCHEME")) {
			this.getCache().clear("WORKFLOWSCHEME");
		}
		String kvalue = "";
		kvalue = (kvalue + workflowscheme.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "插入", "ID", kvalue, workflowscheme, ret);
		return ret;
	}
	
	/**
	 * <param name="workflowscheme">从数据库中删除一个对象Workflowscheme</param>
	 * <param name="AId"></param>
	 */
	public int workflowschemeDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().workflowschemeDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="workflowscheme">从数据库中删除一个对象Workflowscheme</param>
	 */
	public int workflowschemeDeleteByCondition(WorkflowschemeExample workflowschemeQueryCondition) throws CacheException {
		int ret = this.getDao().workflowschemeDeleteByCondition(workflowschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = this.getWorkflowschemeExampleConditionSql(workflowschemeQueryCondition);
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "条件删除", "conditionSql", kvalue, workflowschemeQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Workflowscheme到数据库中
	 * <param name="workflowscheme">需要更新的Workflowscheme</param>
	 */
	public int workflowschemeUpdate(Workflowscheme workflowscheme) throws CacheException {
		int ret = this.getDao().workflowschemeUpdate(workflowscheme);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + workflowscheme.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "更新", "ID", kvalue, workflowscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Workflowscheme到数据库中
	 * <param name="workflowscheme">需要更新的Workflowscheme</param>
	 */
	public int workflowschemeUpdateSelective(Workflowscheme workflowscheme) throws CacheException {
		int ret = this.getDao().workflowschemeUpdateSelective(workflowscheme);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + workflowscheme.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "部分更新", "ID", kvalue, workflowscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Workflowscheme到数据库中
	 * <param name="workflowscheme">需要更新的Workflowscheme</param>
	 */
	public int workflowschemeUpdateWithBlobs(Workflowscheme workflowscheme) throws CacheException {
		int ret = this.getDao().workflowschemeUpdateWithBlobs(workflowscheme);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + workflowscheme.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "更新含Blob", "ID", kvalue, workflowscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Workflowscheme到数据库中
	 * <param name="workflowschemeQueryCondition">附加的条件</param>
	 * <param name="workflowscheme">需要更新的Workflowscheme</param>
	 */
	public int workflowschemeUpdateByCondition(Workflowscheme workflowscheme, WorkflowschemeExample workflowschemeQueryCondition) throws CacheException {
		int ret = this.getDao().workflowschemeUpdateByCondition(workflowscheme, workflowschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = this.getWorkflowschemeExampleConditionSql(workflowschemeQueryCondition);
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "条件更新", "conditionSql", kvalue, workflowscheme, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Workflowscheme到数据库中
	 * <param name="workflowschemeQueryCondition">附加的条件</param>
	 * <param name="workflowscheme">需要更新的Workflowscheme</param>
	 */
	public int workflowschemeUpdateSelectiveByCondition(Workflowscheme workflowscheme, WorkflowschemeExample workflowschemeQueryCondition) throws CacheException {
		int ret = this.getDao().workflowschemeUpdateSelectiveByCondition(workflowscheme, workflowschemeQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEME")) {
				this.getCache().clear("WORKFLOWSCHEME");
			}
		}
		String kvalue = this.getWorkflowschemeExampleConditionSql(workflowschemeQueryCondition);
		this.operatesLogSimpleAdd("WORKFLOWSCHEME", "批量部分更新", "conditionSql", kvalue, workflowscheme, ret);
		return ret;
	}
	
	public String getWorkflowschemeExampleConditionSql(WorkflowschemeExample workflowschemeQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < workflowschemeQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			WorkflowschemeExample.Criteria item = workflowschemeQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					WorkflowschemeExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="workflowscheme">从数据库中查询一个对象Workflowscheme</param>
	 * <param name="AId"></param>
	 */
	public Workflowscheme workflowschemeSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("WORKFLOWSCHEME")) {
			String key = ("WORKFLOWSCHEME_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Workflowscheme obj = ((Workflowscheme)(this.getCache().get("WORKFLOWSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="workflowschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Workflowscheme> workflowschemeSelectObjects(WorkflowschemeExample workflowschemeQueryCondition) throws CacheException {
		if (this.needCache("WORKFLOWSCHEME")) {
			String key = ("WORKFLOWSCHEME_" 
						+ ("queryObject_" + this.getWorkflowschemeExampleConditionSql(workflowschemeQueryCondition)));
			List<Workflowscheme> obj = ((List<Workflowscheme>)(this.getCache().get("WORKFLOWSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeSelectObjects(workflowschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeSelectObjects(workflowschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="workflowschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Workflowscheme> workflowschemeSelectObjectsWithBLOBs(WorkflowschemeExample workflowschemeQueryCondition) throws CacheException {
		if (this.needCache("WORKFLOWSCHEME")) {
			String key = ("WORKFLOWSCHEME_" 
						+ ("queryObject_" + this.getWorkflowschemeExampleConditionSql(workflowschemeQueryCondition)));
			List<Workflowscheme> obj = ((List<Workflowscheme>)(this.getCache().get("WORKFLOWSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeSelectObjectsWithBLOBs(workflowschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeSelectObjectsWithBLOBs(workflowschemeQueryCondition);
		}
	}
	
	/**
	 * <param name="workflowschemeQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int workflowschemeQuerySelectObjectsCount(WorkflowschemeExample workflowschemeQueryCondition) throws CacheException {
		if (this.needCache("WORKFLOWSCHEME")) {
			String key = ("WORKFLOWSCHEME_" 
						+ ("queryCount_" + this.getWorkflowschemeExampleConditionSql(workflowschemeQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("WORKFLOWSCHEME", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeQuerySelectObjectsCount(workflowschemeQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEME", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeQuerySelectObjectsCount(workflowschemeQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Workflowschemeentity到数据库中
	 * <param name="workflowschemeentity">需要插入的新对象</param>
	 */
	public int workflowschemeentityInsert(Workflowschemeentity workflowschemeentity) throws CacheException {
		int ret = this.getDao().workflowschemeentityInsert(workflowschemeentity);
		if (this.needCache("WORKFLOWSCHEMEENTITY")) {
			this.getCache().clear("WORKFLOWSCHEMEENTITY");
		}
		String kvalue = "";
		kvalue = (kvalue + workflowschemeentity.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "插入", "ID", kvalue, workflowschemeentity, ret);
		return ret;
	}
	
	/**
	 * <param name="workflowschemeentity">从数据库中删除一个对象Workflowschemeentity</param>
	 * <param name="AId"></param>
	 */
	public int workflowschemeentityDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().workflowschemeentityDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEMEENTITY")) {
				this.getCache().clear("WORKFLOWSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="workflowschemeentity">从数据库中删除一个对象Workflowschemeentity</param>
	 */
	public int workflowschemeentityDeleteByCondition(WorkflowschemeentityExample workflowschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().workflowschemeentityDeleteByCondition(workflowschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEMEENTITY")) {
				this.getCache().clear("WORKFLOWSCHEMEENTITY");
			}
		}
		String kvalue = this.getWorkflowschemeentityExampleConditionSql(workflowschemeentityQueryCondition);
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "条件删除", "conditionSql", kvalue, workflowschemeentityQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Workflowschemeentity到数据库中
	 * <param name="workflowschemeentity">需要更新的Workflowschemeentity</param>
	 */
	public int workflowschemeentityUpdate(Workflowschemeentity workflowschemeentity) throws CacheException {
		int ret = this.getDao().workflowschemeentityUpdate(workflowschemeentity);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEMEENTITY")) {
				this.getCache().clear("WORKFLOWSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + workflowschemeentity.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "更新", "ID", kvalue, workflowschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Workflowschemeentity到数据库中
	 * <param name="workflowschemeentity">需要更新的Workflowschemeentity</param>
	 */
	public int workflowschemeentityUpdateSelective(Workflowschemeentity workflowschemeentity) throws CacheException {
		int ret = this.getDao().workflowschemeentityUpdateSelective(workflowschemeentity);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEMEENTITY")) {
				this.getCache().clear("WORKFLOWSCHEMEENTITY");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + workflowschemeentity.getId());
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "部分更新", "ID", kvalue, workflowschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Workflowschemeentity到数据库中
	 * <param name="workflowschemeentityQueryCondition">附加的条件</param>
	 * <param name="workflowschemeentity">需要更新的Workflowschemeentity</param>
	 */
	public int workflowschemeentityUpdateByCondition(Workflowschemeentity workflowschemeentity, WorkflowschemeentityExample workflowschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().workflowschemeentityUpdateByCondition(workflowschemeentity, workflowschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEMEENTITY")) {
				this.getCache().clear("WORKFLOWSCHEMEENTITY");
			}
		}
		String kvalue = this.getWorkflowschemeentityExampleConditionSql(workflowschemeentityQueryCondition);
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "条件更新", "conditionSql", kvalue, workflowschemeentity, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Workflowschemeentity到数据库中
	 * <param name="workflowschemeentityQueryCondition">附加的条件</param>
	 * <param name="workflowschemeentity">需要更新的Workflowschemeentity</param>
	 */
	public int workflowschemeentityUpdateSelectiveByCondition(Workflowschemeentity workflowschemeentity, WorkflowschemeentityExample workflowschemeentityQueryCondition) throws CacheException {
		int ret = this.getDao().workflowschemeentityUpdateSelectiveByCondition(workflowschemeentity, workflowschemeentityQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKFLOWSCHEMEENTITY")) {
				this.getCache().clear("WORKFLOWSCHEMEENTITY");
			}
		}
		String kvalue = this.getWorkflowschemeentityExampleConditionSql(workflowschemeentityQueryCondition);
		this.operatesLogSimpleAdd("WORKFLOWSCHEMEENTITY", "批量部分更新", "conditionSql", kvalue, workflowschemeentity, ret);
		return ret;
	}
	
	public String getWorkflowschemeentityExampleConditionSql(WorkflowschemeentityExample workflowschemeentityQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < workflowschemeentityQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			WorkflowschemeentityExample.Criteria item = workflowschemeentityQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					WorkflowschemeentityExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="workflowschemeentity">从数据库中查询一个对象Workflowschemeentity</param>
	 * <param name="AId"></param>
	 */
	public Workflowschemeentity workflowschemeentitySelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("WORKFLOWSCHEMEENTITY")) {
			String key = ("WORKFLOWSCHEMEENTITY_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Workflowschemeentity obj = ((Workflowschemeentity)(this.getCache().get("WORKFLOWSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeentitySelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeentitySelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="workflowschemeentityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Workflowschemeentity> workflowschemeentitySelectObjects(WorkflowschemeentityExample workflowschemeentityQueryCondition) throws CacheException {
		if (this.needCache("WORKFLOWSCHEMEENTITY")) {
			String key = ("WORKFLOWSCHEMEENTITY_" 
						+ ("queryObject_" + this.getWorkflowschemeentityExampleConditionSql(workflowschemeentityQueryCondition)));
			List<Workflowschemeentity> obj = ((List<Workflowschemeentity>)(this.getCache().get("WORKFLOWSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeentitySelectObjects(workflowschemeentityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeentitySelectObjects(workflowschemeentityQueryCondition);
		}
	}
	
	/**
	 * <param name="workflowschemeentityQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int workflowschemeentityQuerySelectObjectsCount(WorkflowschemeentityExample workflowschemeentityQueryCondition) throws CacheException {
		if (this.needCache("WORKFLOWSCHEMEENTITY")) {
			String key = ("WORKFLOWSCHEMEENTITY_" 
						+ ("queryCount_" + this.getWorkflowschemeentityExampleConditionSql(workflowschemeentityQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("WORKFLOWSCHEMEENTITY", key)));
			if ((obj == null)) {
				obj = this.getDao().workflowschemeentityQuerySelectObjectsCount(workflowschemeentityQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKFLOWSCHEMEENTITY", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().workflowschemeentityQuerySelectObjectsCount(workflowschemeentityQueryCondition);
		}
	}
	
	/**
	 * 插入一个对象Worklog到数据库中
	 * <param name="worklog">需要插入的新对象</param>
	 */
	public int worklogInsert(Worklog worklog) throws CacheException {
		int ret = this.getDao().worklogInsert(worklog);
		if (this.needCache("WORKLOG")) {
			this.getCache().clear("WORKLOG");
		}
		String kvalue = "";
		kvalue = (kvalue + worklog.getId());
		this.operatesLogSimpleAdd("WORKLOG", "插入", "ID", kvalue, worklog, ret);
		return ret;
	}
	
	/**
	 * <param name="worklog">从数据库中删除一个对象Worklog</param>
	 * <param name="AId"></param>
	 */
	public int worklogDeleteByPrimaryKey(long AId) throws CacheException {
		int ret = this.getDao().worklogDeleteByPrimaryKey(AId);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + AId);
		this.operatesLogSimpleAdd("WORKLOG", "删除", "ID", kvalue, AId, ret);
		return ret;
	}
	
	/**
	 * <param name="worklog">从数据库中删除一个对象Worklog</param>
	 */
	public int worklogDeleteByCondition(WorklogExample worklogQueryCondition) throws CacheException {
		int ret = this.getDao().worklogDeleteByCondition(worklogQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = this.getWorklogExampleConditionSql(worklogQueryCondition);
		this.operatesLogSimpleAdd("WORKLOG", "条件删除", "conditionSql", kvalue, worklogQueryCondition, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象Worklog到数据库中
	 * <param name="worklog">需要更新的Worklog</param>
	 */
	public int worklogUpdate(Worklog worklog) throws CacheException {
		int ret = this.getDao().worklogUpdate(worklog);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + worklog.getId());
		this.operatesLogSimpleAdd("WORKLOG", "更新", "ID", kvalue, worklog, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象的部分属性Worklog到数据库中
	 * <param name="worklog">需要更新的Worklog</param>
	 */
	public int worklogUpdateSelective(Worklog worklog) throws CacheException {
		int ret = this.getDao().worklogUpdateSelective(worklog);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + worklog.getId());
		this.operatesLogSimpleAdd("WORKLOG", "部分更新", "ID", kvalue, worklog, ret);
		return ret;
	}
	
	/**
	 * 更新一个对象，含Blob字段Worklog到数据库中
	 * <param name="worklog">需要更新的Worklog</param>
	 */
	public int worklogUpdateWithBlobs(Worklog worklog) throws CacheException {
		int ret = this.getDao().worklogUpdateWithBlobs(worklog);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = "";
		kvalue = (kvalue + worklog.getId());
		this.operatesLogSimpleAdd("WORKLOG", "更新含Blob", "ID", kvalue, worklog, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Worklog到数据库中
	 * <param name="worklogQueryCondition">附加的条件</param>
	 * <param name="worklog">需要更新的Worklog</param>
	 */
	public int worklogUpdateByCondition(Worklog worklog, WorklogExample worklogQueryCondition) throws CacheException {
		int ret = this.getDao().worklogUpdateByCondition(worklog, worklogQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = this.getWorklogExampleConditionSql(worklogQueryCondition);
		this.operatesLogSimpleAdd("WORKLOG", "条件更新", "conditionSql", kvalue, worklog, ret);
		return ret;
	}
	
	/**
	 * 更新一批对象Worklog到数据库中
	 * <param name="worklogQueryCondition">附加的条件</param>
	 * <param name="worklog">需要更新的Worklog</param>
	 */
	public int worklogUpdateSelectiveByCondition(Worklog worklog, WorklogExample worklogQueryCondition) throws CacheException {
		int ret = this.getDao().worklogUpdateSelectiveByCondition(worklog, worklogQueryCondition);
		if ((ret > 0)) {
			if (this.needCache("WORKLOG")) {
				this.getCache().clear("WORKLOG");
			}
		}
		String kvalue = this.getWorklogExampleConditionSql(worklogQueryCondition);
		this.operatesLogSimpleAdd("WORKLOG", "批量部分更新", "conditionSql", kvalue, worklog, ret);
		return ret;
	}
	
	public String getWorklogExampleConditionSql(WorklogExample worklogQueryCondition) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; (i < worklogQueryCondition.getOredCriteria().size()); i = (i + 1)) {
			WorklogExample.Criteria item = worklogQueryCondition.getOredCriteria().get(i);
			if (item.isValid()) {
				if ((sb.length() > 0)) {
					sb.append(" or ");
				}
				sb.append(" ((1 = 1) ");
				for (int j = 0; (j < item.getCriteria().size()); j = (j + 1)) {
					WorklogExample.Criterion item1 = item.getCriteria().get(j);
					if (item1.isNoValue()) {
						sb.append(" and (");
						sb.append(item1.getCondition());
						sb.append(")");
					}
					else {
						if (item1.isSingleValue()) {
							sb.append(" and (");
							sb.append(item1.getCondition());
							sb.append(item1.getValue());
							sb.append(")");
						}
						else {
							if (item1.isBetweenValue()) {
								sb.append(" and (");
								sb.append(item1.getCondition());
								sb.append(item1.getValue());
								sb.append(" and ");
								sb.append(item1.getSecondValue());
								sb.append(")");
							}
							else {
								if (item1.isListValue()) {
									sb.append(" and (");
									sb.append(item1.getCondition());
									sb.append("(");
									Collection coll = ((Collection)(item1.getValue()));
									boolean first = true;
									for (Iterator it = coll.iterator(); it.hasNext(); ) {
										if (first) {
											first = false;
										}
										else {
											sb.append(",");
										}
										sb.append(it.next());
									}
									sb.append(")");
									sb.append(")");
								}
							}
						}
					}
				}
				sb.append(")");
			}
		}
		return sb.toString();
	}
	
	/**
	 * <param name="worklog">从数据库中查询一个对象Worklog</param>
	 * <param name="AId"></param>
	 */
	public Worklog worklogSelectByPrimaryKey(long AId) throws CacheException {
		if (this.needCache("WORKLOG")) {
			String key = ("WORKLOG_" 
						+ (("_BYUNIINDEX_" + AId) 
						+ "_"));
			Worklog obj = ((Worklog)(this.getCache().get("WORKLOG", key)));
			if ((obj == null)) {
				obj = this.getDao().worklogSelectByPrimaryKey(AId);
				if ((obj != null)) {
					this.getCache().put("WORKLOG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().worklogSelectByPrimaryKey(AId);
		}
	}
	
	/**
	 * <param name="worklogQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Worklog> worklogSelectObjects(WorklogExample worklogQueryCondition) throws CacheException {
		if (this.needCache("WORKLOG")) {
			String key = ("WORKLOG_" 
						+ ("queryObject_" + this.getWorklogExampleConditionSql(worklogQueryCondition)));
			List<Worklog> obj = ((List<Worklog>)(this.getCache().get("WORKLOG", key)));
			if ((obj == null)) {
				obj = this.getDao().worklogSelectObjects(worklogQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKLOG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().worklogSelectObjects(worklogQueryCondition);
		}
	}
	
	/**
	 * <param name="worklogQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public List<Worklog> worklogSelectObjectsWithBLOBs(WorklogExample worklogQueryCondition) throws CacheException {
		if (this.needCache("WORKLOG")) {
			String key = ("WORKLOG_" 
						+ ("queryObject_" + this.getWorklogExampleConditionSql(worklogQueryCondition)));
			List<Worklog> obj = ((List<Worklog>)(this.getCache().get("WORKLOG", key)));
			if ((obj == null)) {
				obj = this.getDao().worklogSelectObjectsWithBLOBs(worklogQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKLOG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().worklogSelectObjectsWithBLOBs(worklogQueryCondition);
		}
	}
	
	/**
	 * <param name="worklogQueryCondition">附加查询条件</param>
	 * @return 查询结果
	 */
	public int worklogQuerySelectObjectsCount(WorklogExample worklogQueryCondition) throws CacheException {
		if (this.needCache("WORKLOG")) {
			String key = ("WORKLOG_" 
						+ ("queryCount_" + this.getWorklogExampleConditionSql(worklogQueryCondition)));
			Integer obj = ((Integer)(this.getCache().get("WORKLOG", key)));
			if ((obj == null)) {
				obj = this.getDao().worklogQuerySelectObjectsCount(worklogQueryCondition);
				if ((obj != null)) {
					this.getCache().put("WORKLOG", key, obj);
				}
			}
			return obj;
		}
		else {
			return this.getDao().worklogQuerySelectObjectsCount(worklogQueryCondition);
		}
	}
	
	/**
	 * 简单的日志接口,调用Dao
	 * <param name="tableName">表名称</param>
	 * <param name="operateName">操作名称</param>
	 * <param name="keyFieldName">主键字段名</param>
	 * <param name="keyFieldValue">主键字段值</param>
	 * <param name="param">附加参数</param>
	 * <param name="updateCount">更新数量</param>
	 */
	public void operatesLogSimpleAdd(String tableName, String operateName, String keyFieldName, String keyFieldValue, Object param, int updateCount) {
		this.getDao().operatesLogSimpleAdd(tableName, operateName, keyFieldName, keyFieldValue, param, updateCount);
	}
	
	/**
	 * 根据表名决定是否需要使用缓存
	 * <param name="tableName">原始表名称</param>
	 */
	protected Boolean needCache(String tableName) {
		return false;
	}
	
	/**
	 * 获得缓存服务
	 */
	public Cache getCache() {
		throw new UnsupportedOperationException();
	}
}
